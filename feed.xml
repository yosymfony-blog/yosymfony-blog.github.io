<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Yo! Symfony Blog</title>
        <link></link>
        <description>RSS feed for Yo! Symfony Blog</description>
        <atom:link href="/rss.xml" rel="self" type="application/rss+xml" />
                    <item>
                <title>Exception classes without &quot;Exception&quot; suffix?</title>
                <description><![CDATA[<blockquote class="twitter-tweet" data-lang="es"><p lang="en" dir="ltr">Try to remove the &quot;Exception&quot; suffix of your exceptions. Forces you to choose good names!</p>&mdash; Bernhard Schussek (@webmozart) <a href="https://twitter.com/webmozart/status/768463723254124544">24 de agosto de 2016</a></blockquote>

<p>Exceptions are a mechanic of most programming languages used to express exceptional situations
to the normal flow of a program execution. Exceptions are represented by classes
that typically extend from a base class provided by the language. Each language
has its own convencion for naming. In case of PHP, every not regular class should
be visible by suffixes: <code>Exception</code>, <code>Interface</code>, <code>Trait</code> or <code>Abstract</code> but, sometime,
as Bernhard Schussek (<a href="https://twitter.com/webmozart">@webmozart</a>) said in his twit,
the use of <code>Exception</code> suffix leads developers to be lazy at naming.</p>

<pre><code>class UserNotification
{
    public function sendWelcomeMessage()
    {
        try {
            $mailManager = new MailManager($this-&gt;user-&gt;getEmail(), $this-&gt;user-&gt;getName());
        } catch (EmailException $e) {
            ...
        }
    }
}
</code></pre>

<p>In the prior example, to use a single exception to communicate all exceptional things
occurring during an Email sending could be poor although that depends on your situation.
Maybe, a more appropriate code could be the following:</p>

<pre><code>class UserNotification
{
    public function sendWelcomeMessage()
    {
        try {
            $mailManager = new MailManager($this-&gt;user-&gt;getEmail(), $this-&gt;user-&gt;getName(), $content);
        } catch (EmailNotDeliverable $e) {
            ...
        } catch (EmailMessage $e) {
                ...
        } catch (SmtpException $e) {
            ...
        }
    }
}
</code></pre>

<p>In the previous snippet of code, <code>EmailNotDeliverable</code> could be used to communicate
issues related with the email delivery (address not valid or non-existent),
<code>EmailMessage</code> for issues related with the body of the Email (null content for example)
and <code>SmtpException</code> for all issues related with the connection between your code
and the SMTP server: operation timed out, bad authentication... etc.</p>

<p>Exceptions are regular classes that follow the same rules that the others.
Finding an appropriate name is just the beginning.</p>
]]></description>
                <link>/2016/08/25/exception-classes-without-quotexceptionquot-suffix</link>
                <pubDate>Thu, 25 Aug 2016 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/2016/08/25/exception-classes-without-quotexceptionquot-suffix</guid>
                                            </item>
                    <item>
                <title>Log files for human beings</title>
                <description><![CDATA[<p>At development time it's important to understand what is occurring inside your
code to take appropriate actions. At that moment, debugger and logger tools
have an importan role to play. Log files are a huge stream of text thought for
computers instead of human beings that, sometimes, it tough to work with those.</p>

<p>Ok, we get to the point. <a href="https://github.com/EasyCorp/easy-log-handler">EasyLogHandler</a>
is a human-friendly <a href="https://github.com/Seldaek/monolog">Monolog</a> handler
written by <a href="https://github.com/javiereguiluz">Javier Eguiluz</a>. It's optimized
to display the log information in a clear and concise way. This handler is ideal
for dev environments.</p>

<p>Below, an example of output:
<img src="/assets/img/easyLogHandler-output.png" alt="An EasyLogHandler output example" title="An EasyLogHandler output example" /></p>

<p>The output text is more suitable for you and me. You can see there are not many marks
of timestamps because in <code>dev</code> environment you shouldn't care about that.</p>

<p>To conclude this post, I'll say that sometimes we forget that we coding for humans because
machines only understand binary code. Writing a readable code is important. In
case of log files in certain environments, is important to keep that concept in mind.</p>
]]></description>
                <link>/2016/08/17/log-files-for-human-beings</link>
                <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/2016/08/17/log-files-for-human-beings</guid>
                                <category>monolog</category>
                                <category>log</category>
                                                <category>php</category>
                            </item>
                    <item>
                <title>Talking about the new features of Spress 1.1.0 on the latest episode of Drupodcast</title>
                <description><![CDATA[<p>On Wednesday, I had the opportunity to talk (in spanish) about the new features
of <a href="http://spress.yosymfony.com/releases/2015/01/08/spress-turns-1-1-0/">Spress 1.1.0</a> on <a href="http://www.drupodcast.com/">Drupodcast</a>.
I used slides for showing the new goodies and near the end of the episode I talked
about the new upcoming features of <a href="http://spress.yosymfony.com/releases/2016/01/02/spress-2-0-0-released/">Spress 2.0.0</a>:</p>

<ul>
<li><strong>Data sources</strong>.</li>
<li><strong>Collections</strong>. They are useful for defining new type of documents that
behave like pages or posts.</li>
<li><strong>Paginator for any kind of content</strong>.</li>
<li>The <strong>self-update command</strong>.</li>
</ul>

<h3>The complete session</h3>

<iframe src="https://www.youtube.com/embed/UQcsDsjG2tE?rel=0" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"></iframe>

<h3>The Slides</h3>

<iframe src="//slides.com/victorpuertas/novedades-spress-1-1/embed" width="576" height="420" frameborder="0" scrolling="no" allowfullscreen="allowfullscreen"></iframe>
]]></description>
                <link>/talking-about-the-new-features-of-spress-1-1-on-the-latest-episode-of-drupodcast</link>
                <pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/talking-about-the-new-features-of-spress-1-1-on-the-latest-episode-of-drupodcast</guid>
                                                <category>Spress</category>
                            </item>
                    <item>
                <title>With the specification of TOML 0.4.0 a new release of our parser is available</title>
                <description><![CDATA[<p><a href="https://github.com/toml-lang/toml/blob/master/versions/en/toml-v0.4.0.md">The specification 0.4.0 of TOML</a>
is out with new features such as literal strings or inline tables. In consecuence,
a new release of <a href="https://github.com/yosymfony/Toml">our parser is available</a>
with a complete support for the latest specificaction:</p>

<ul>
<li>Allows underscores in numbers.</li>
<li>Inline tables.</li>
</ul>

<p>Changes produced in our parser since the <a href="https://github.com/toml-lang/toml/releases/tag/v0.2.0">specificaction 0.2.0</a>:</p>

<ul>
<li>Multiline strings.</li>
<li>Literal strings.</li>
<li>Multiline literal strings.</li>
<li>Date format updated.</li>
</ul>

<p>TomlBuilder has support for literal string:</p>

<pre><code class="php">use Yosymfony\Toml\TomlBuilder;

$tb = new TomlBuilder();
$tb-&gt;addValue('literal', '@&lt;\i\c*\s*&gt;')
</code></pre>

<p>Literal strings must begin with '@'. This character indicates to TomlBuilder
that the string must be trated as literal.</p>

<p>There is a <a href="https://gitter.im/yosymfony/Toml">chat room on Gitter</a> for
talking about this library.</p>

<p>Enjoy it!</p>
]]></description>
                <link>/with-the-specification-of-toml-0-4-0-a-new-release-of-our-parser-is-available</link>
                <pubDate>Sat, 07 Mar 2015 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/with-the-specification-of-toml-0-4-0-a-new-release-of-our-parser-is-available</guid>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>HttpServer component: a simple HTTP Server for your PHP application</title>
                <description><![CDATA[<p>I'm currently working on a built-in server for <a href="http://spress.yosymfony.com">Spress</a>,
a simple HTTP server for watching changes in files without run <code>spress site:build</code>
command every time you make a change. <a href="https://github.com/yosymfony/HttpServer"><strong>HttpServer</strong></a> is
a small server built with <a href="http://reactphp.org/">REACT</a>, the event-driven and non-blocking
I/O library for PHP.</p>

<p>The installation is straightforward thanks to <a href="https://getcomposer.org/">Composer</a> tool:
add the following to your <code>composer.json</code> file:</p>

<pre><code class="json">"require": {
    "yosymfony/httpserver": "1.0.x-dev"
}
</code></pre>

<p>An example of how to use:</p>

<pre><code class="php">$requestHandler = new RequestHandler(function($request) {
    return 'Hi Yo! Symfony';
});

$server = new HttpServer($requestHandler);
$server-&gt;start();

// go to http://localhost:8080
</code></pre>

<p><code>RequestHandler</code> let you configure params such as port or host for
managing requests. The constructor only expects a single
<a href="http://php.net/manual/en/language.types.callable.php">callable</a> type argument.
That is a function to handle each request.</p>

<h3>The handler function</h3>

<p>The handler function receives a single parameter to describe the request.
By default, this argument is a
object type <a href="https://github.com/reactphp/http/blob/master/src/Request.php">React\Http\Request</a>.
If you want to receive a <a href="http://symfony.com/doc/current/components/http_foundation/introduction.html#request">Symfony HttpFoundation Request</a>
object, you need to enable this mode: <code>$requestHandler-&gt;enableHttpFoundationRequest()</code>.</p>

<h3>Configuring the response</h3>

<p>By default, the <code>Content-Type</code> value is <code>text/plain</code> at the response header and
a simple <code>return 'your text';</code> works fine but you can customize your response
with <a href="https://github.com/yosymfony/HttpServer#the-response">status code and custom headers attributes</a>.</p>

<h3>A complete example</h3>

<p>This example point out how to use an array response:</p>

<pre><code class="php">include_once __DIR__ . '/vendor/autoload.php';

use Yosymfony\HttpServer\HttpServer;
use Yosymfony\HttpServer\RequestHandler;

$requestHandler = new RequestHandler(function($request) {
   return [
      'content' =&gt; '&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;root&gt;Hi&lt;/root&gt;',
      'headers' =&gt; ['Content-Type' =&gt; 'text/xml'],
      'status_code' =&gt; 200
   ];
});

$requestHandler-&gt;listen(8080)-&gt;enableHttpFoundationRequest();

$server = new HttpServer($requestHandler);
$server-&gt;start();
</code></pre>

<p>Nice coding ;)</p>
]]></description>
                <link>/http-server-for-php</link>
                <pubDate>Fri, 15 Aug 2014 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/http-server-for-php</guid>
                                <category>http</category>
                                <category>react</category>
                                <category>server</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Toml parser 0.2.0 available</title>
                <description><![CDATA[<p>The new version of <a href="https://github.com/yosymfony/Toml">TOML parser</a> has
support for <a href="https://github.com/toml-lang/toml/releases/tag/v0.2.0">TOML specification 0.2.0</a>.
The main changes of this specificaction are the <strong>new array of tables</strong> and the
<strong>use of "table" instead of "key group" in terminology</strong>.</p>

<p>Now, <a href="https://github.com/yosymfony/Toml#tomlbuilder"><strong>TomlBuilder</strong></a> has support
for creates tables and array of tables. <strong>The method <code>addKeyGroup</code> was declared as deprecated and replaced by <code>addTable</code></strong>.</p>
]]></description>
                <link>/toml-parser-0-2-0-available</link>
                <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/toml-parser-0-2-0-available</guid>
                                <category>parser</category>
                                <category>toml</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Presentación de Spress: generador de sitios estáticos en PHP</title>
                <description><![CDATA[El pasado viernes tuve la oportunidad de presentar <a title="Spress static site generator in PHP" href="https://github.com/yosymfony/Spress" target="_blank"><strong>Spress -<em>generador de sitios estáticos</em>-</strong></a> gracias al equipo de <a href="http://aprendephp.es/spress/" target="_blank">Aprende PHP</a>. Fue una presentación en la que intenté mostrar las posibilidades de Spress, las ventajas de este tipo de soluciones y el funcionamiento básico de la misma. El siguiente paso será publicar la web del proyecto junto con toda su documentación.

<strong>La presentación:</strong>

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px; max-width: 100%;" src="http://www.slideshare.net/slideshow/embed_code/30546898" height="486" width="597" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Spress" href="https://es.slideshare.net/vpuertas/spress-slider" target="_blank">Spress</a> </strong> from <strong><a href="http://www.slideshare.net/vpuertas" target="_blank">Víctor Puertas</a></strong></div>
&nbsp;

<strong>El vídeo:</strong>
<iframe src="//www.youtube.com/embed/AydD4tRdKFo" height="480" width="640" allowfullscreen="" frameborder="0"></iframe>

&nbsp;

Github: <strong><a title="Github" href="https://github.com/yosymfony/Spress" target="_blank">Spress source code</a></strong>.
]]></description>
                <link>/presentacion-de-spress-generador-de-sitios-estaticos-en-php</link>
                <pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/presentacion-de-spress-generador-de-sitios-estaticos-en-php</guid>
                                <category>html</category>
                                <category>markdown</category>
                                <category>twig</category>
                                                <category>PHP</category>
                                <category>Spress</category>
                            </item>
                    <item>
                <title>Definición de algoritmo</title>
                <description><![CDATA[Este twit de @RobertoBez es genial:
<blockquote class="twitter-tweet" lang="es">definition of algorithm <a href="http://t.co/IlSNU9oe8M">pic.twitter.com/IlSNU9oe8M</a>

— Roberto Bez (@RobertoBez) <a href="https://twitter.com/RobertoBez/statuses/412859590506577920">diciembre 17, 2013</a></blockquote>
]]></description>
                <link>/definicion-de-algoritmo</link>
                <pubDate>Tue, 24 Dec 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/definicion-de-algoritmo</guid>
                                <category>algoritmo</category>
                                                <category>Varios</category>
                            </item>
                    <item>
                <title>Semana intensa para la comunidad Symfony</title>
                <description><![CDATA[Ha sido una semana intensa para la comunidad Symfony marcada por la <a title="SymfonyCon Warsaw (2013)" href="http://warsaw2013.symfony.com/" target="_blank">SymfonyCon celebrada en Varsovia</a>, que finaliza el día de hoy. Se han entregado los premios Symfony y desde aquí quiero dar la enhorabuena a <a title="Twitter de Javier Eguiluz" href="https://twitter.com/javiereguiluz" target="_blank"><strong>@javiereguiluz</strong></a> por varios motivos: El primero es el gran trabajo que realiza en la comunidad Symfony, el segundo, porque se ha incorporado oficialmente a <a title="Web de SensioLabs (Symfony)" href="http://sensiolabs.com/en" target="_blank">SensioLabs</a> y en tercer lugar por recibir el premio al mejor blog: <a title="Blog oficial de Symfony en español" href="http://symfony.es" target="_blank">symfony.es</a>.<!--more-->
<blockquote class="twitter-tweet" lang="es">Today <a href="https://twitter.com/javiereguiluz">@javiereguiluz</a> is joining <a href="https://twitter.com/sensiolabs">@sensiolabs</a>. Happy and excited to work with him on various <a href="https://twitter.com/search?q=%23Symfony&amp;src=hash">#Symfony</a> topics. More in my keynote. <a href="https://twitter.com/search?q=%23SymfonyCon&amp;src=hash">#SymfonyCon</a>

— Fabien Potencier (@fabpot) <a href="https://twitter.com/fabpot/statuses/410405551613685760">diciembre 10, 2013</a></blockquote>
<h3>SymfonyCon '14 en Madrid</h3>
De la conferencia se desprenden dos noticas importantes: <strong><a title="DeSymfony blog" href="http://desymfony.com/noticias/desymfony-descansara-en-2014-dando-la-bienvenida-a-symfonycon-madrid" target="_blank">No habrá DeSymfony 2014</a> y la SymfonyCon del próximo año se celebrará en Madrid</strong>. El equipo que organiza DeSymfony se va a dedicar por completo a organizar este gran evento, que requiere de una gran dedicación y a coger nuevas ideas para que la edición 2015 de DeSymfony sea espectacular.
<blockquote class="twitter-tweet" lang="es">deSymfony descansará en 2014 dando la bienvenida a SymfonyCon Madrid <a href="http://t.co/6I7AphmPt4">http://t.co/6I7AphmPt4</a> <a href="https://twitter.com/search?q=%23SymfonyCon&amp;src=hash">#SymfonyCon</a> <a href="https://twitter.com/search?q=%23deSymfony&amp;src=hash">#deSymfony</a>

— desymfony (@desymfony) <a href="https://twitter.com/desymfony/statuses/411533400445816835">diciembre 13, 2013</a></blockquote>
]]></description>
                <link>/semana-intensa-para-la-comunidad-symfony</link>
                <pubDate>Sat, 14 Dec 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/semana-intensa-para-la-comunidad-symfony</guid>
                                <category>symfonycon</category>
                                                <category>Eventos</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>PHP: el lío de nombres de funciones y la falta de agrupación en clases de strings y arrays</title>
                <description><![CDATA[PHP tiene ya 18 años de antigüedad. La primera implementación orientada a objetos llegó con la versión 4 -año 2000-, y corría bajo el motor Zend Engine 1.0, para más señas. Tras todo este tiempo, hoy en día sigue manteniendo una convención de nombres confusa y una falta de organización en clases de funciones como las de <a title="Funciones para manipular strings en PHP" href="http://php.net/manual/en/ref.strings.php" target="_blank"><em>strings</em></a> o las que manipulan <a title="Funciones para manipular arrays en PHP" href="http://php.net/manual/en/ref.array.php" target="_blank"><em>arrays</em></a>.
<pre class="prettyprint">// Algunos ejemplos de string:
str_pad() // prefijo str_
stripos() // prefijo str
trim() // sin prefijo</pre>
Con la gestión de arrays ocurre algo similar, aunque es menos llamativo porque el prefijo mayoritario es "array_". Existe un amplio conjunto de funciones que nos permiten hacer casi de todo pero de nuevo existen algunas funciones que no usan prefijo como el caso de las que ordenan: <a href="http://www.php.net/manual/en/function.sort.php" target="_blank">sort()</a>, <a href="http://www.php.net/manual/en/function.uasort.php" target="_blank">uasort()</a>.

String y arrays son tipos de dato primitivo que debería evolucionar a una verdadera implementación orientada a objetos en el que el propio tipo de dato tenga métodos asociados. Además, sería muy aconsejable seguir una convención de nombres porque facilitaría el aprendizaje del lenguaje. Las convenciones lo haría más previsible y por tanto más fácil.
]]></description>
                <link>/php-el-lio-de-nombres-de-funciones-y-la-falta-de-agrupacion-en-clases-de-strings-y-arrays</link>
                <pubDate>Wed, 13 Nov 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-el-lio-de-nombres-de-funciones-y-la-falta-de-agrupacion-en-clases-de-strings-y-arrays</guid>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>DrupalCamp Spain 2013 </title>
                <description><![CDATA[<p>Drupal tiene un comunidad muy activa a lo largo de todo el mundo y cada poco
tiempo hay algún evento masivo que reúne a los entusiastas de este CMS. A esta
comunidad se le une parte de la que se encuentra tras
Symfony framework gracias a la
<a href="http://symfony.es/noticias/2012/03/26/el-futuro-de-drupal-se-llama-symfony/">estrecha relación que han adquirido en la versión 8</a>
que está por salir. Si te gustó la <a href="https://prague2013.drupal.org/">DrupalCon de Praga</a>,
celebrada el pasado mes de septiembre, o simplemente no pudiste asistir, ahora
tienes una nueva oportunidad en la
<a href="http://2013.drupalcamp.es/information">DrupalCamp Spain que se celebrará en Cáceres</a>
el 26 y 25 de Octubre. El evento se organiza con
<a href="http://2013.drupalcamp.es/calendario">40 sesiones divididas en 4 tracks</a> más un
workshop.</p>

<ul>
<li><a href="https://play.google.com/store/apps/details?id=com.liflist.asociacionespanoladedrupal.drupalcampspain2013&amp;hl=es_419"><strong>App oficial</strong></a> (Android).</li>
</ul>
]]></description>
                <link>/drupalcamp-spain-2013</link>
                <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/drupalcamp-spain-2013</guid>
                                <category>drupal</category>
                                                <category>Eventos</category>
                            </item>
                    <item>
                <title>PHP: Patrones de diseño</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Los patrones de diseño son una parte esencial de cualquier desarrollador software. Concentran la experiencia de otros a la hora de resolver un problema por lo que estar familiarizados con ellos nos ayudará a crear soluciones de calidad. En Github he encontrado un <a title="DesignPatternsPHP - GitHub" href="https://github.com/domnikl/DesignPatternsPHP" target="_blank"><strong>proyecto que explica e implementa ejemplos de patrones en PHP</strong></a>. El repositorio es mantenido por <a title="Blog de Dominik Liebler" href="http://thewebdev.de/" target="_blank">Dominik Liebler</a> y las implementaciones se han inspirado en las encontradas en proyectos como Zend Framework, Symfony2  o Doctrine2.

Github: <strong><a title="Repositorio en GitHub" href="https://github.com/domnikl/DesignPatternsPHP" target="_blank">DesignPatternsPHP</a>.</strong>
]]></description>
                <link>/php-patrones-de-diseno</link>
                <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-patrones-de-diseno</guid>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Vulnerabilidad DOS en el formulario de login de FOSUserBundle</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Hoy ha saltado la <a title="Vulnerabilidad CVE-2013-5750 " href="http://symfony.com/blog/cve-2013-5750-security-issue-in-fosuserbundle-login-form" target="_blank">alarma</a> acerca de una vulnerabilidad de seguridad en <a title="Repositorio en Github" href="https://github.com/FriendsOfSymfony/FOSUserBundle" target="_blank"><strong>FOSUserBundle</strong></a>  que permite realizar ataques DOS en formularios de login que no limiten en número máximo de caracteres que puede contener un password. Las <strong>versiones afectadas: [&gt;=1.2.0, &lt;1.2.5] [&gt;=1.3.0, &lt;1.3.3]</strong>. Es necesario actualizar a la<a title="Versión sin la vulnerabilidad CVE-2013-5750" href="https://github.com/FriendsOfSymfony/FOSUserBundle/compare/v1.3.2...v1.3.3" target="_blank"><strong> nueva 1.3.3</strong></a>.

Por lo general, en base de datos no se suelen almacenar los password en texto plano (es una mala práctica y si la estas llevando a cabo te aconsejo que lo cambies lo antes posible) sino que se almacena el resultado de aplicar <em>n</em> veces una función hash, como SHA-1 al password del usuario. La codificación en Symfony está delegada a los <a href="http://symfony.com/doc/current/book/security.html#encoding-the-user-s-password" target="_blank">encoders</a>, clases encargadas de aplicar un algoritmo y devolver el password del usuario, de forma que no sea legible, junto con el número de veces que se ha aplicado el algoritmo. Realizar todo esto tiene un coste computacional que está relacionado con el tamaño del password.<strong> El ataque DOS se produce cuando no se pone límite al número de caracteres que puede tener un password</strong>. Por ejemplo, según las pruebas de Fabien Potencier, usar <a title="Wikipedia" href="http://en.wikipedia.org/wiki/PBKDF2" target="_blank">Pbkdf2</a> con un password de un millón de caracteres repetido 10.000 veces requiere casi un minuto (todo esto depende del hardware sobre el que se implemente).

Si quieres saber más acerca del <em>password hashing</em> y de como funcionan este y otros tipos de ataques para resolver de forma inversa el password a partir de un hash, te recomiendo <a title="hashing security" href="https://crackstation.net/hashing-security.htm" target="_blank"><em><strong>"Salted Password Hashing - Doing it Right" de crackstation</strong></em></a>.]]></description>
                <link>/vulnerabilidad-dos-en-el-formulario-de-login-de-fosuserbundle</link>
                <pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/vulnerabilidad-dos-en-el-formulario-de-login-de-fosuserbundle</guid>
                                <category>seguridad</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Gist: Twig factory</title>
                <description><![CDATA[Para crear instancias de Twig de forma intuitiva (patrón <a title="Wikipedia" href="http://en.wikipedia.org/wiki/Fluent_interface" target="_blank">Fluent interface</a>), he creado un <a title="Github" href="https://gist.github.com/yosymfony/6511456" target="_blank"><strong>snippet</strong></a>:
<!--more-->
<script type="text/javascript" src="https://gist.github.com/yosymfony/6511456.js"></script>]]></description>
                <link>/gist-twig-factory</link>
                <pubDate>Tue, 10 Sep 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/gist-twig-factory</guid>
                                <category>twig</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>¿Micro-framework significa pequeño?</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-85" alt="silex-logo" src="/assets/wp-content/uploads/2013/01/silex-logo.png" width="92" height="88" />Me llama poderosamente la atención un artículo de <a title="Blog de Igor Wiedler" href="https://igor.io/2013/09/02/how-heavy-is-silex.html" target="_blank"><em>Igor Wiedler</em> titulado "<strong>How heavy is Silex?</strong>"</a> en el que habla acerca de la filosofía de Silex y de como el término <em>micro-framework</em> no significa para todos lo mismo. El término es ambiguo porque no está claro que micro se refiera a pocas líneas de código, número bajo de clases cargadas o pocas restricciones en cuanto a la forma de trabajar. Para mí, el término <em>micro-framework</em> significa un poco de todo lo anterior. Las partes básicas de un framework como es el <a title="Inyección de dependencias" href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank"><em>DI</em></a>, <em>router</em>, la gestión de errores, la seguridad, el <em>logger</em> y la renderización de templates se deben hacer con el menor número de clases y dependencias posible.

<!--more-->

<strong>Silex es un micro framework escrito sobre 7 dependencias de las cuales 5 son componentes Symfony</strong>. Probablemente, escribir todo esto desde cero se traduce en menor número de líneas de código y clases pero estaríamos perdiendo la capacidad de reutilizar componentes e interoperabilidad. A decir verdad, Silex usa un número bajo de componentes si lo comparamos con otros framework: Symfony2 usa alrededor de 40, Laravel 58 y Zend Framework 2 unos 49. El caso de <strong><a title="Slim micro framework en GitHub" href="https://github.com/codeguy/Slim" target="_blank">Slim</a>,</strong> uno de los micro framework más conocidos, es especial porque se ha concebido desde cero, sin reutilizar componentes de otros framework y con un objetivo claro: ser pequeño en todo. Si nos fijamos en su <code class="prettyprint"><a href="https://github.com/codeguy/Slim/blob/master/composer.json" target="_blank">composer.json</a></code> no requiere más que un componente. En Silex, durante una ejecución típica intervienen 50 clases que hacen un total de <strong>4018 NCLOC </strong>-<em>Non-Comment Line of Code</em>- que es de 2 a 4 veces más que lo empleado por Slim.

Lo interesante de Silex y otros framework (Laravel) es que para la gestión de las peticiones usa componentes que tiene un gran apoyo de la comunidad y que reciben actualizaciones a diario. Componentes que se han convertido en un <a href="/symfony2-en-el-corazon-de-otros-framework" target="_blank">estándar <em>de facto</em> para desarrollar framework</a> como es el caso de Drupal o Magento.]]></description>
                <link>/micro-framerwork-significa-pequeno</link>
                <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/micro-framerwork-significa-pequeno</guid>
                                <category>micro-framework</category>
                                <category>silex</category>
                                <category>slim</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Symfony2: Propuesta para mover el contenido de /app a /</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />A principios de semana <a title="Cuenta en GitHub" href="https://github.com/bschussek" target="_blank">Bernhard Schussek</a>, desarrollador muy activo de la comunidad Symfony, propuso la idea de mover el fichero de configuración de PHPUnit -<em>phpunit.xml.dist</em>- al directorio raíz del proyecto para evitar tener que incluir la opción <code class="prettyprint">-c app</code> cada vez que se lanzan las pruebas. Aunque implicitamente no estaba en la petición original, la idea no es solo mover este fichero sino que es necesario analizar si realmente el contenido de <code class="prettyprint">/app</code> debería estar en el directorio raiz. <a title="Comentario en GitHub" href="https://github.com/symfony/symfony-standard/issues/584#issuecomment-23121825" target="_blank"><strong>Fabien Potencier propuso la siguiente estructura</strong></a> para la versión estándar de Symfony2:

<!--more-->
<pre class="prettyprint">├── cache
├── composer.json
├── composer.lock
├── console
├── logs
├── phpunit.xml.dist
├── src
│   ├── Acme
│   ├── AppCache.php
│   ├── AppKernel.php
│   ├── Resources
│       ├── config
│       └── views
│   ├── SymfonyRequirements.php
│   ├── autoload.php
│   ├── bootstrap.php.cache
│   └── check.php
├── vendor
└── web</pre>
<strong>La estructura no es definitiva</strong> y se están planteando muchas opciones. Pensando en los administradores de sistemas, me parece correcto llevar al raiz los directorios de <code class="prettyprint">logs</code> y <code class="prettyprint">cache</code>.

Ahora que la primera LTS está lanzada, creo que es un buen momento para plantearse la estructura de proyectos en futuras versiones del framework. Si quieres estar al día sobre este tema, lo mejor es que te pases por <a title="Issue en GitHub" href="https://github.com/symfony/symfony-standard/issues/584" target="_blank"><strong>GitHub</strong></a>.]]></description>
                <link>/symfony2-propuesta-para-mover-el-contenido-de-app-a</link>
                <pubDate>Sat, 24 Aug 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony2-propuesta-para-mover-el-contenido-de-app-a</guid>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Ficheros de configuración en Silex</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-85" alt="silex-logo" src="/assets/wp-content/uploads/2013/01/silex-logo.png" width="92" height="88" /><a href="http://silex.sensiolabs.org" target="_blank"><strong>Silex</strong></a> no incorpora de serie ningún mecanismo para cargar ficheros de configuración. Existen varios <a href="https://github.com/fabpot/Silex/wiki/Third-Party-ServiceProviders#config" target="_blank">ServiceProviders</a> pero ninguno se adaptaba a mis necesidades por lo que <a title="Silex Config ServiceProvider" href="https://github.com/yosymfony/ConfigServiceProvider" target="_blank"><strong>he escrito un proveedor de servicio</strong></a> basado en <a href="https://github.com/symfony/Config" target="_blank">Symfony Config component</a> que aprovecha la mayoría de sus características a excepción de la caché que, por el momento, no tengo nada pensado.
<h3>ConfigServiceProvider</h3>
ConfigServiceProvider permite cargar de serie configuraciones con formato Yaml y Toml, y es posible escribir cargadores para otros formatos, como Json, fácilmente. El resultado de interpretar cada fichero de configuración es almacenado en un repositorio y los repositorios se pueden mezclar, para dar como resultado otro repositorio, y validar su esquema para asegurarnos que las claves cumplen con la estructura y el dominio establecido.

<!--more-->

Usar el ConfigServiceProvider es sencillo. Como siempre, todo comienza con escribir la dependencia en <strong>composer.json</strong> de nuestro proyecto:
<pre class="prettyprint">"require": {
    "yosymfony/config-serviceprovider": "1.0.*@dev"
}</pre>
Tras actualizar las dependencias con <code class="prettyprint">composer update</code> hay que registrar el ServiceProvider:
<pre class="prettyprint">$app-&gt;register(new ConfigServiceProvider());</pre>
El registro crea un nueva entrada en el DIC  -<em>Contenedor de Servicios</em>- en la que está disponible el componente. Para cargar un fichero de configuración se emplea el método <code class="prettyprint">load</code>:
<pre class="prettyprint">$repository = $app['configuration']-&gt;load('/var/www/config/user.yml');</pre>
Si tienes localizados los directorios donde se van a encontrar todas las configuraciones, puedes pasarlos en el constructor del ServiceProvider y la referencia a los ficheros de configuración será más sencilla:
<pre class="prettyprint">$app-&gt;register(new ConfigServiceProvider(array(
    __dir__.'/config2',
    '/var/www/config'
)));

$repository = $app['configuration']-&gt;load('user.yml');</pre>
Hay que tener en cuenta que si existe más de un fichero user.yml, solo devolverá el primero.

El acceso/modificación de los datos en el repositorio se puede realizar usando la interfaz típica de arrays o mediante los métodos set y get:

<pre class="prettyprint">$repository->get('name', 'noname'); // Si 'name' no existe devuelve 'noname'
$repository['name']; // Obtiene el valor asociado a la clave 'name'

$repository->set('user, 'username'); // Equivale a 
$repository['user'] = 'username';
</pre>
<h3>Validar el esquema de un fichero de configuración</h3>
Para validar que la estructura del fichero de configuración y el dominio de sus valores es el adecuado, debemos <a href="http://symfony.com/doc/current/components/config/definition.html" target="_blank">escribir una clase que usa TreeBuilder de Symfony Config component</a>:
<pre class="prettyprint">use Symfony\Component\Config\Definition\ConfigurationInterface;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;

class MyConfigDefinitions implements ConfigurationInterface
{
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder();
        $rootNode = $treeBuilder-&gt;root(0);

        $rootNode-&gt;children()
            -&gt;integerNode('port')
                -&gt;end()
            -&gt;scalarNode('server')
                -&gt;end()
        -&gt;end();

        return $treeBuilder;
    }
}</pre>
La clase anterior, permite validar la siguiente configuración:
<pre class="prettyprint"># Yaml file
port: 25
server: "mail.yourname.com"</pre>
o esta otra:
<pre class="prettyprint"># Toml file
port = 25
server = "mail.yourname.com"</pre>
La validación se realiza desde el repositorio <code class="prettyprint">$repository-&gt;validateWith(new MyConfigDefinitions());</code>
<h3>Mezclar repositorios</h3>
Mezclar configuraciones es una tarea habitual cuando existe una jerarquía de las mismas. Dos repositorios, A y B se pueden mezclar y conseguir otro C en el que las claves de A tienen preferencia, en caso de conflicto, sobre las de B y las claves de B que no estén en A estarán añadidas en C:
<pre class="prettyprint">$resultC = $repositoryA-&gt;mergeWith($repositoryB);</pre>
&nbsp;

Silex: <strong><a href="https://github.com/fabpot/Silex/wiki/Third-Party-ServiceProviders" target="_blank">Third Party ServiceProviders</a></strong>

Packagist: <a href="https://packagist.org/packages/yosymfony/config-serviceprovider" target="_blank"><strong>config-serviceprovider</strong></a>

Gist: <a href="https://gist.github.com/yosymfony/5936108" target="_blank"><strong>Simple skeleton for Silex application</strong></a>]]></description>
                <link>/ficheros-de-configuracion-en-silex</link>
                <pubDate>Sat, 10 Aug 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/ficheros-de-configuracion-en-silex</guid>
                                <category>silex</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Bibliografía TDD</title>
                <description><![CDATA[<p style="text-align: center;"><img class="aligncenter" alt="Portada de los libros" src="http://lennyvpg.files.wordpress.com/2013/08/bibliografia-tdd.png?w=434" width="434" height="325" /></p>
TDD -<em>Test Driven Development</em>- es una metodología de desarrollo perteneciente al grupo de <a title="Metodologías ágiles de programación" href="http://es.wikipedia.org/wiki/Proceso_%C3%A1gil" target="_blank">metodologías ágiles</a> que hace especial hincapié en disponer de un mecanismo que permita comprobar, de manera automática, que se están cumpliendo los requisitos funcionales de la aplicación que estamos desarrollando. Ello requiere comprender correctamente el funcionamiento del proyecto y establecer un conjunto de métricas que permitan indicar que un requisito se ha cumplido. Por lo general, las herramientas más habituales para escribir y automatizar estas pruebas son los test de unidad y los sistemas de <a href="http://es.wikipedia.org/wiki/Integraci%C3%B3n_continua" target="_blank">integración continua</a>.

<!--more-->

Para adentrarse en el conocimiento de esta metodología, he encontrado dos libros en español y gratuitos (si lo deseas puedes enviarles a los autores una donación) muy completos con parte teórica y práctica. Por supuesto, el libro de referencia para estos temas es el <a title="Libro en Amazon" href="http://www.amazon.com/Test-Driven-Development-By-Example/dp/0321146530" target="_blank">"<em>Test Driven Development: By Example</em>" de Kent Beck</a> (<a title="Twitter de Kent Beck, creador de TDD" href="https://twitter.com/KentBeck" target="_blank">@KentBeck</a>), autor de esta metodología.
<ol>
	<li><span style="line-height: 13px;"><strong><a href="http://www.dirigidoportests.com/el-libro" target="_blank">Diseño Ágil con TDD</a> </strong>de Carlos Blé Jurado, Juan Gutiérrez Plaza,  Fran Reyes Perdomo y Gregorio Mena.
</span></li>
	<li><a href="http://www.proyectalis.com/wp-content/uploads/2008/02/scrum-y-xp-desde-las-trincheras.pdf" target="_blank"><strong>Scrum y XP desde las Trincheras</strong></a> escrito por Henrik Kniberg y traducido al español por Angel Medinilla.</li>
</ol>
&nbsp;

CI: <strong><a href="http://jenkins-ci.org/">Jenkins</a></strong>.

CI: <strong><a href="https://travis-ci.org/">Travis</a>.</strong> Hosting de integración continua para proyectos open source.]]></description>
                <link>/bibliografia-tdd</link>
                <pubDate>Thu, 01 Aug 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/bibliografia-tdd</guid>
                                <category>tdd</category>
                                                <category>Libros</category>
                            </item>
                    <item>
                <title>PHP-RFC: Importar namespaces de funciones</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />El pasado Junio, <a href="https://igor.io/" target="_blank">Igor Wiedler</a>, desarrollador muy activo del proyecto Silex, propuso un interesante <a title="PHP RFC" href="https://wiki.php.net/rfc/use_function" target="_blank">RFC -<em>Importing namespaced functions</em>- </a>para mejorar la forma en la que se trabaja con funciones envueltas en namespaces y equipararla a las facilidades que existen para importar namespaces de clases, interfaces y traits.

Desde que en <a title="Namespaces en PHP" href="http://www.php.net/manual/es/language.namespaces.rationale.php" target="_blank">PHP &gt;=5.3 aparecieran los namespaces</a>, el operador <em><strong>use</strong></em> se ha utilizado para importar namespaces y hacer más cortas las referencias a las clases. Además de las clases, las funciones pueden organizarse en namespaces de la siguiente manera:
<pre class="prettyprint">namespace Yosymfony\funciones {
    function nop() {
        return 'nop';
    }

    function refNop() {
        /**
         * Solo las funciones dentro de un mismo namespace se
         * pueden llamar sin el nombre cualificado
         */
        return nop();
    }
}</pre>
<!--more-->
El problema surge cuando se intenta invocar las funciones desde otro namespace, por ejemplo, el global:
<pre class="prettyprint">use Yosymfony\Funciones as Helper; // Importamos el namespace

namespace {
    Helper\nop();  // ...pero no es igual que con clases
}</pre>
Aunque importemos el namespace, siempre está presente al hacer referencia a la función mediante el alias 'Helper'. Lo ideal sería importar el espacio de nombre y usar la función sin ningún tipo de alias. Para ello, el RFC propone crear un nuevo operador denominado <em><strong>use function</strong></em> que permitirá importar namespaces de funciones sin realizar un sobrecarga sobre el actual <strong>use</strong>. Además, la inclusión de este nuevo operador evitaría el <a title="PHP fallback" href="http://www.php.net/manual/es/language.namespaces.fallback.php" target="_blank"><strong>fallback de funciones</strong></a>, de manera que si una función no se puede resolver en el namespace actual, no intente buscarla en el global.

Sin duda, de aprobarse este RFC, hay que tener paciencia pues se encuentra en estado de draft y estos procesos pueden ser muy lentos, muchas librerías y pequeños proyectos se beneficiarían de esta nueva característica del lenguaje.]]></description>
                <link>/php-rfc-importar-namespaces-de-funciones</link>
                <pubDate>Sun, 21 Jul 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-rfc-importar-namespaces-de-funciones</guid>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>PHP gana terreno en el primer semestre de 2013</title>
                <description><![CDATA[<img class="alignnone" alt="Tiobe Programming Community Index" src="http://lennyvpg.files.wordpress.com/2013/07/tiobe_trends.png" width="640" height="480" />

Según los cálculos del <strong><a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html" target="_blank">índice de lenguajes de programación elaborado por TIOBE</a></strong>, PHP ha experimentado un crecimiento de un 1.64% y <strong>ha sido el lenguaje que mayor cambio ha registrado en el primer semestre de 2013</strong>. A este crecimiento han contribuido muchos factores, entre ellos el lanzamiento de la versión <a title="Changelog PHP 5.4.0" href="http://php.net/releases/5_4_0.php" target="_blank">5.4.x</a>, con características muy interesante, la existencia de <a title="Gestor de dependencias" href="http://getcomposer.org/" target="_blank">Composer</a>  y la popularidad  de algunos framework como Symfony2, Laravel o Zend Framework 2 que promocionan buenas prácticas de desarrollo y facilitan enormemente las tareas de desarrollo.

<!--more-->
<h3>La herencia del pasado</h3>
Todavía quedan muchos programadores que al oir hablar de PHP te preguntan si ya está orientado a objetos, gente anclada en el pasado que abandonó su uso y decidió no interesarse más por un lenguaje que evoluciona constantemente y que por supuesto, es orientado a objetos desde PHP 4 (el soporte a OOP fue reescrito completamente en la versión 5). Existen muchos prejuicios como el de aquellos que piensan que en PHP cada uno trabaja por libre y no existe ningún tipo de estándar. Quizá tendrían que echar un vistazo a <a href="http://www.php-fig.org/" target="_blank">PHP-Fig -<em>PHP Framework Interop Group</em>-</a>. Para aquellos que dicen eso de "PHP no es escalabe" simplemente decir que la escalabilidad es un rasgo dependiente de tu arquitectura y no del lenguaje.
TIOBE: <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/tpci_definition.htm" target="_blank"><strong>Programming Community Index Definition</strong></a>.]]></description>
                <link>/php-gana-terreno-en-el-primer-semestre-de-2013</link>
                <pubDate>Sat, 13 Jul 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-gana-terreno-en-el-primer-semestre-de-2013</guid>
                                <category>php 5.4</category>
                                <category>php 5.5</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>El mapa de los grupos de usuarios de PHP</title>
                <description><![CDATA[<img class="alignnone" alt="Mapa de los grupos de usuarios de PHP" src="http://lennyvpg.files.wordpress.com/2013/07/php-group-over-the-world.png" width="570" height="434" />

Me gusta la idea de <a title="Perfil en Twitter" href="https://twitter.com/heiglandreas" target="_blank"><strong>Andreas Heigl</strong> </a>y <a title="Perfil en Twitter" href="https://twitter.com/ravetracer" target="_blank"><strong>Christian Nielebock</strong> </a>de situar en el mapa a <a title="Mapa de los grupos de usuarios de PHP en todo el mundo" href="http://php.ug/" target="_blank">todos los grupos de usuarios de PHP a lo largo de todo el mundo</a>. Hay muchas zonas en las que esperaba ver mayor cantidad: España o México. Lo más probable es que existan más de manera que si conoces algún otro grupo, puedes registrarlo enviando un <a title="GitHub" href="https://github.com/php-ug/php.ug" target="_blank">pull-request </a>o rellenando este <a href="http://php.ug/contact" target="_blank">formulario</a>.]]></description>
                <link>/el-mapa-de-los-grupos-de-usuarios-de-php</link>
                <pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/el-mapa-de-los-grupos-de-usuarios-de-php</guid>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Actualizar PHP en Ubuntu 12.04</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />La versión 12.04 es una de las más utilizadas gracias a que es una LTS -versión de largo mantenimiento-. Los repositorios configurados por defecto siguen usando la rama de  <a href="/fin-de-php-5-3-x">5.3.x  de PHP que ha quedado obsoleta</a>. Lo recomendado en este momento es usar, como mínimo, la rama 5.4 lo que significa que o bien compilamos la versión o actualizamos la lista de repositorios con nuevos orígenes que contienen los paquetes actualizados. Esta última opción es la que tomé ayer para actualizar el servidor de desarrollo. Como origen tomé el repositorio de <a href="https://launchpad.net/~ondrej/+archive/php5" target="_blank"><strong>Ondřej Surý</strong></a>, uno de los más recomendados:

<!--more-->

Añadimos el nuevo origen:
<code class="prettyprint">sudo add-apt-repository ppa:ondrej/php5</code>

Instalamos PHP 5.4:
<code class="prettyprint">sudo apt-get install php5</code>

Pude que tras la instalación obtentas algún mensaje del tipo "... Unable to load dynamic library ...". Los mensajes se deben a que intenta cargar algún módulo que no se encuentra en la ruta indicada por el php.ini. Lo recomendado es revisarlo y ver que otros ficheros .ini carga mediante <em>phpinfo()</em>. En mi caso, tuve que cambiar la ruta de <em>xdebug.so</em>.
<h3>Actualizar a PHP 5.5</h3>
La versión más reciente (es del 20 de Junio) es la 5.5.0. Para actualizar podemos seguir el tutorial de <a href="http://www.brandonsavage.net/compiling-php-5-5-from-scratch/" target="_blank">Brandon Savage: "Compiling PHP 5.5 from the scratch"</a> si queremos compilarla o añadir un nuevo origen de <a href="https://launchpad.net/~ondrej/+archive/php5-experimental/+packages" target="_blank">Ondřej Surý</a> para la esta versión:

Añadimos el nuevo origen:
<code class="prettyprint">sudo add-apt-repository ppa:ondrej/php5-experimental</code>

Instalamos:
<code class="prettyprint">sudo apt-get install php5</code>]]></description>
                <link>/actualizar-php-en-ubuntu-12-04</link>
                <pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/actualizar-php-en-ubuntu-12-04</guid>
                                <category>php 5.4</category>
                                <category>php 5.5</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>PHP 5.5: la constante CLASS</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" /><a href="http://php.net/ChangeLog-5.php#5.5.0" target="_blank"><strong>CLASS</strong></a> es una nueva constante disponible a nivel de clase en PHP &gt;= 5.5.0. Se trata de una constante que posee el nombre cualificado (namespace+nombre de clase) de ella y que, <em>a priori</em>, representa una mejora en los <em>test doubles</em> -aquellos en los que usamos mocking y stub para simular el comportamiento de una clase en los unit tests-.
<pre class="prettyprint">namespace Yosymfony;

class Clase1 {
}

echo Clase1::class;  //resultado: Yosymfony\Clase1</pre>
<!--more-->

El resultado anterior podríamos haberlo obtenido mediante <code class="prettyprint">__NAMESPACE__ . '/ClassName'</code>, pero tiene el inconveniente de que <a title="PHP __NAMESPACE__" href="http://www.php.net/manual/es/language.namespaces.nsconstants.php" target="_blank"><strong>__NAMESPACE__ contiene el espacio de nombre actual</strong></a>. Uno de los principales usos vendrá cuando necesitemos crear mocks en los test unitarios:
<pre class="prettyprint">//Sin CLASS:
use Yosymfony\Clase1;

class Clase1Test extends PHPUnit_Framework_TestCase
{
    public function testClase1ConClase2()
    {
        $c2 = $this-&gt;getMock('Yosymfony\Clase2'); // nombre cualificado

        $c1 = new Clase1;
        $c1-&gt;setClase2($c2);

        // ...
    }
}</pre>
Con la nueva constante es mucho más cómodo:
<pre class="prettyprint">//Con CLASS:
use Yosymfony\Clase1;
use Yosymfony\Clase2;

class Clase1Test extends PHPUnit_Framework_TestCase
{
    public function testClase1ConClase2()
    {
        $c2 = $this-&gt;getMock(Clase2::ClASS);

        $c1 = new Clase1;
        $c1-&gt;setClase2($c2);

        // ...
    }
}</pre>
&nbsp;

PHP: <a href="http://www.php.net/manual/es/language.namespaces.nsconstants.php" target="_blank"><strong>La constante __NAMESPACE__</strong></a>.

PHP: <a href="http://php.net/ChangeLog-5.php#5.5.0" target="_blank"><strong>5.5.0 changelog</strong></a>.

PHP: <a href="http://php.net/manual/en/reserved.constants.php" target="_blank"><strong>Constantes predefinidas del lenguaje</strong></a>.]]></description>
                <link>/php-5-5-la-constante-class</link>
                <pubDate>Sun, 30 Jun 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-5-5-la-constante-class</guid>
                                <category>php 5.5</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Las presentaciones de DeSymfony 2013</title>
                <description><![CDATA[Recopilo algunas de las presentaciones de la edición 2013 (21-22 Junio) de DeSymfony y de paso me empapo de ellas. Las que me falten, me dais un toque por <a href="http://twitter.com/yosymfony" target="_blank"><strong>@yosymfony</strong></a>. <del>Espero que pronto estén los vídeos</del> Vídeos disponibles en el canal de <a title="Desymfony en Youtube" href="http://www.youtube.com/user/desymfony" target="_blank">Desymfony de Youtube</a>.
<h3>Symfony y Drupal</h3>
<h4>Juan Pablo Novillo - <a href="https://twitter.com/juampy" target="_blank">@juampy</a></h4>
Resumen de lo que se ha hecho hasta ahora sobre a integración de partes de Symfony en Drupal: HTTP Foundation, HttpKernel, Routing y gestión de eventos.

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23344129" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Symfony y Drupal" href="http://es.slideshare.net/juampy72/symfony-y-drupal" target="_blank">Symfony y Drupal</a> </strong> from <strong><a href="http://es.slideshare.net/juampy72" target="_blank">Juan Pablo Novillo Requena</a></strong></div>
<div style="margin-bottom: 5px;"><!--more--></div>
<h3 style="margin-bottom: 5px;">¿Porqué Symfony2 es tan rápido?</h3>
<h4>Carlos Granados - <a href="https://twitter.com/carlos_granados" target="_blank">@carlos_granados</a></h4>
Creo que esta es una de las presentaciones más interesantes porque profundiza en el funcionamiento interno de Symfony2: contenedor de dependencias, caché de plantillas, el cargador de clases, router etc...

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23334578" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Por qué Symfony2 es tan rápido" href="http://es.slideshare.net/carlosgranados/por-que-symfony2-es-tan-rpido" target="_blank">Por qué Symfony2 es tan rápido</a> </strong> from <strong><a href="http://es.slideshare.net/carlosgranados" target="_blank">Carlos Granados</a></strong></div>
<h3 style="margin-bottom: 5px;">Anotaciones...</h3>
<h4>Ariel Ferrandini - <a href="https://twitter.com/aferrandini" target="_blank">@aferrandini</a></h4>
Las anotaciones son comentarios que no forma parte de la sintaxis del código pero que determinan la forma en que el código es tratado por otros componentes como librerías o herramientas. En esta presentación Ariel nos enseña el motor de anotaciones de Symfony2 -<em>incluido en el FrameworkExtraBundle</em>- y las anotaciones disponibles de los principales componentes y bundles.

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23325255" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="deSymfony 2013: Anotaciones, no es parte de mi aplicación, pero es mi aplicación" href="http://es.slideshare.net/aferrandini/annotations-23325255" target="_blank">deSymfony 2013: Anotaciones, no es parte de mi aplicación, pero es mi aplicación</a> </strong> from <strong><a href="http://es.slideshare.net/aferrandini" target="_blank">aferrandini</a></strong></div>
<h3 style="margin-bottom: 5px;">Command-line tools en PHP</h3>
<h4>Adán Lobato - <a href="https://twitter.com/adanlobato" target="_blank">@adanlobato</a></h4>
Ejemplo de aplicaciones en consola para realizar el <em>deploy</em> de una aplicación:

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23320174" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Command-line tools en PHP - deSymfony 2013" href="http://es.slideshare.net/adanlobato/command-linetoolsphpsmallpdfcom" target="_blank">Command-line tools en PHP - deSymfony 2013</a> </strong> from <strong><a href="http://es.slideshare.net/adanlobato" target="_blank">Adán Lobato Lorenzo</a></strong></div>
<h3 style="margin-bottom: 5px;">Escalabilidad y alto rendimiento con Symfony2</h3>
<h4 style="text-align: left;">Ricard Clau - <a href="https://twitter.com/ricardclau" target="_blank">@ricardclau</a></h4>
Presentación <strong>muy interesante</strong> sobre rendimiento y escalabilidad

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23319916" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Escalabilidad y alto rendimiento con Symfony2" href="http://es.slideshare.net/ricardclau/escalabilidad-alto-rendimiento" target="_blank">Escalabilidad y alto rendimiento con Symfony2</a> </strong> from <strong><a href="http://es.slideshare.net/ricardclau" target="_blank">ricardclau</a></strong></div>
<h3 style="margin-bottom: 5px;">Refactoring PHP/Symfony2 apps</h3>
<h4 style="margin-bottom: 5px;">Raúl Fraile - <a href="https://twitter.com/raulfraile" target="_blank">@raulfraile</a></h4>
<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23315577" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Refactoring PHP/Symfony2 apps" href="http://es.slideshare.net/raulfraile/refactoring-desymfony-english" target="_blank">Refactoring PHP/Symfony2 apps</a> </strong> from <strong><a href="http://es.slideshare.net/raulfraile" target="_blank">Raúl Fraile Beneyto</a></strong></div>
<h3 style="margin-bottom: 5px;">Creando aplicaciones web desde otro ángulo con Symfony y AngularJS</h3>
<h4 style="margin-bottom: 5px;">Pablo Godel - <a href="https://twitter.com/pgodel" target="_blank">@pgodel</a></h4>
Pablo Godel, fundador del servicio <a href="http://servergrove.com/" target="_blank"><strong>ServerGrove</strong></a>, nos muestra la integración Symfony - AngularJS de Google:

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23278810" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="deSymfony 2013 - Creando aplicaciones web desde otro ángulo con Symfony y AngularJS" href="http://es.slideshare.net/pgodel/desymfony-2013-creacion-de-aplicaciones-web-desde-otro-angulo-con-symfony2-y-angularjs" target="_blank">deSymfony 2013 - Creando aplicaciones web desde otro ángulo con Symfony y AngularJS</a> </strong> from <strong><a href="http://es.slideshare.net/pgodel" target="_blank">Pablo Godel</a></strong></div>
<h3 style="margin-bottom: 5px;">Silex al límite</h3>
<h4>Javier Eguiluz - <a href="https://twitter.com/javiereguiluz" target="_blank">@javiereguiluz</a></h4>
Sácale todo el partido a Silex microframework para obtener el máximo rendimiento.
<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://es.slideshare.net/slideshow/embed_code/23449158" height="421" width="512" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Silex al límite" href="http://es.slideshare.net/javier.eguiluz/silex-al-lmite" target="_blank">Silex al límite</a> </strong> from <strong><a href="http://es.slideshare.net/javier.eguiluz" target="_blank">Javier Eguiluz</a></strong></div>]]></description>
                <link>/las-presentaciones-de-desymfony-2013</link>
                <pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/las-presentaciones-de-desymfony-2013</guid>
                                <category>desymfony</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Fin de PHP 5.3.x</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Hoy <strong>Johannes Schlüter </strong>ha anunciado, en la lista de <strong><a title="PHP internals" href="http://news.php.net/php.internals" target="_blank">internals de PHP</a>,</strong> el <strong>final del mantenimiento la rama 5.3.x</strong> tal y como indicaba el resultado de la votación del <a title="RFC: End Of Life de PHP 5.3.x" href="https://wiki.php.net/rfc/php53eol" target="_blank"><strong>RFC</strong></a> relacionado con el fin de vida de esta versión. El resultado de la votación establece que tras lanzar PHP 5.5 habrá un año de actualizaciones de seguridad y tras este PHP 5.3 habrá muerto definitivamente. Por el momento y salvo raras excepciones solo está programada la versión 5.3.27 cuya <em>release-candidate-1</em> saldrá mañana y la versión definitiva estará en dos semanas, aproximadamente.
<p style="text-align: left;"><a title="Estadísticas de uso de PHP 5" href="http://w3techs.com/technologies/details/pl-php/5/all" target="_blank">PHP 5.3.x es la rama más extendida</a>, pero estando la versión 5.5.0 programada para este mes y la versión 5.4 probada holgadamente  no tiene sentido mantener durante más tiempo una rama que comenzó el <a title="Anuncio de PHP 5.3.0" href="http://www.php.net/releases/5_3_0.php" target="_blank">30 de Junio de 2009</a>.</p>
<p style="text-align: left;">PHP: <a href="http://www.php.net/releases/5_3_0.php" target="_blank"><strong>Novedades de PHP 5.3</strong></a>.</p>
<p style="text-align: left;">PHP: <a title="Sistema de lanzamiento de versiones de PHP" href="https://wiki.php.net/rfc/releaseprocess" target="_blank"><strong>Release Process</strong></a>.</p>]]></description>
                <link>/fin-de-php-5-3-x</link>
                <pubDate>Wed, 19 Jun 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/fin-de-php-5-3-x</guid>
                                <category>php 5.3</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>¿Actualizo a Symfony 2.3?</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Recientemente se ha lanzado Symfony 2.3 y la pregunta que cualquier desarrollador se suele hacer es <strong>¿Debo actualizar la versión?</strong>. La respuesta, en general, es <strong>SI</strong>, aunque cada uno conoce las peculiaridades de sus proyectos. Es muy recomendable actualizar a Symfony 2.3 porque se trata de una versión LTS y ello te garantiza actualizaciones durante los próximos 3 años. Las <strong>versiones LTS son ideales para proyectos de empresas donde las versiones con largos periodos de vida son muy bien acogidas</strong> porque permiten a los desarrolladores centrarse en su proyecto tomando como base un framework estable en el que no llegarán grandes novedades pero si que se mantendrá actualizado en cuanto a temas de seguridad. Un buen ejemplo de ello son las versiones <a href="https://wiki.ubuntu.com/LTS" target="_blank"><strong>LTS de Ubuntu</strong></a> que permiten a empresas montar servidores sin preocuparse, al menos por un tiempo, de si las novedades de versiones estándar se acomodarán bien a la situación de su negocio.

<!--more-->

Por supuesto, <strong>si creas nuevos proyecto, lo esperado es que partas de la versión 2.3</strong> porque la anterior 2.2 tiene fecha de caducidad en Noviembre de este año. Versiones anteriores a la 2.2 han dejado de mantenerse y seguir utilizándolas implica que no estaremos protegidos frente a nuevos bug de seguridad.

Para facilitar la información acerca del tiempo de vigencia de las versiones de Symfony, se ha creado una <a href="http://symfony.com/roadmap" target="_blank">pequeña utilidad</a> en la que se introduce la versión y se obtiene datos como la fecha de lanzamiento y la duración del mantenimiento.
<h3>Tipos de versiones Symfony</h3>
A modo de resumen, dejo las características de los distintos tipos de versión del framework:
<ul>
	<li><span style="line-height: 13px;"><strong>Estándar</strong>: Una versión cada 6 meses con <strong>8 meses de mantenimiento en bug normales</strong> y <strong>14 meses de mantenimiento para bug de seguridad</strong>.</span></li>
	<li><strong>LTS</strong>: Una versión cada 24 meses con<strong> 36 meses de mantenimiento en bug normales</strong> y <strong>48 meses de mantenimiento para bug de seguridad</strong>.</li>
</ul>
&nbsp;

Symfony: <a href="https://github.com/symfony/symfony-standard/blob/2.3/UPGRADE-2.3.md" target="_blank"><strong>Actualizar 2.2 a 2.3</strong></a>.

Symfony: <a href="http://symfony.com/blog/which-version-of-symfony-should-you-use" target="_blank"><strong>Which version of Symfony should you use?</strong></a>]]></description>
                <link>/actualizo-a-symfony-2-3</link>
                <pubDate>Fri, 14 Jun 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/actualizo-a-symfony-2-3</guid>
                                <category>symfony 2.3</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>StackPHP: Ejecución de una pila de HttpKernelInterface</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Hace unas semanas leía un artículo muy interesante titulado <strong>"<a href="https://igor.io/2013/02/02/http-kernel-middlewares.html" target="_blank"><em>HttpKernel middlewares</em></a>"</strong> de  <a title="Twitter de Igor Wiedler" href="http://twitter.com/igorwesome" target="_blank">Igor Wiedler</a> acerca de la importancia de <a title="HttpKernelInterface de Symfony2" href="https://github.com/symfony/HttpKernel/blob/master/HttpKernelInterface.php" target="_blank">HttpKernelInterface</a> y de como se puede crear una pila de HttpKernel que se ejecuten en cadena. Por si esta interfaz no te suena, pertenece al componente <a href="https://github.com/symfony/HttpKernel" target="_blank">HttpKernel de Symfony2</a> y es la parte central del framework. Digamos que es la interfaz que cumplen las clases que desean gestionar peticiones y que usan componentes de Symfony2.

Para entender la importancia de esta interfaz, hay que remontarse a la especificación <a href="http://rack.rubyforge.org/doc/SPEC.html" target="_blank"><strong>Rack</strong></a> de Ruby que define la forma en la que un servidor web puede interactuar con una aplicación Ruby. Mediante Rack, cualquier aplicación que cumpla la interfaz puede interactuar con un servidor web. En PHP, la interfaz se llama SAPI -<em>Server Application Programming Interface</em>- y dispone de varias en función del entorno y del servidor web: CLI, CGI-FCGI, ISAPI (IIS de Microsoft) etc... Puedes obtener el nombre de la interfaz SAPI con <a href="http://php.net/manual/es/function.php-sapi-name.php" target="_blank"><em>php_sapi_name()</em></a>.

<!--more-->

A diferencia de Rack, la interfaz de PHP es demasiado plana: $_GET, $_POST y $_SERVER. Sería más fácil e intuitivo trabajar con objetos y de eso se encarga HttpKernelInterface. Esta interfaz entrega un objeto de tipo <a title="Request de HttpFoundation - Symfony2" href="https://github.com/symfony/HttpFoundation/blob/master/Request.php" target="_blank">Request</a>, que es una representación de los datos más adecuada para trabajar y con muchas facilidades. Como salida, espera un objeto tipo <a title="Response HttpFoundation - Symfony2" href="https://github.com/symfony/HttpFoundation/blob/master/Response.php" target="_blank">Response</a> que representaría la respuesta HTTP.

La desventaja HttpKernelInterface con respecto a Rack es que no existe una especificación. HttpKernelInterface pertenece a Symfony2 y no forma parte del core de PHP, pero los principales componentes de este framework se están convirtiendo en un estádar <em>de facto</em> para construir otros framework como Laravel, Drupal o Magento.
<h3>StackPHP</h3>
La idea que propone Igor Wiedler es la ejecución en cadena de componentes que cumplen esta interfaz, al estilo de como funcionaban los <a href="http://symfony.com/legacy/doc/more-with-symfony/1_4/en/10-Symfony-Internals#chapter_10_the_filter_chain" target="_blank">filtros de Symfony 1.x</a>. Se trata de que en cada etapa, se pueden realizar acciones durante la ida y la vuelta de la ejecución. Acciones como logger, debug, autenticación, uso de https etc... La ejecución de este tipo de stack en framework como Silex o Laravel es de gran utilidad y para facilitar la construcción de estas pilas existe un proyecto llamado <strong><a href="http://stackphp.com/" target="_blank">stackphp</a> que simplifica enormemente la creación de estas pilas:</strong>
<pre class="prettyprint">// Ejemplo con Silex:
$app = new Silex\Application();

$stack = (new Stack\Builder()) -&gt;push('Stack\Session') -&gt;push('Symfony\Component\HttpKernel\HttpCache\HttpCache', new Store(__DIR__.'/cache')); $app = $stack-&gt;resolve($app);</pre>
Además del builder, en Stackphp han desarrollado varios componentes <a href="https://github.com/stackphp/session" target="_blank">Stack/Session</a>, <a href="https://github.com/stackphp/url-map" target="_blank">Stack/UrlMap</a> y <a href="https://github.com/stackphp/oauth" target="_blank">Stack/OAuth</a>.
<h3>Un ejemplo</h3>
En Github <a href="http://twitter.com/acleon" target="_blank">@acleon</a> ha publicado un<a href="https://github.com/herebeducks/StackGeoIp" target="_blank"> ejemplo que permite añadir al stack <strong>datos de geolocalización de la IP</strong></a>. Los datos son insertados en las cabeceras de peticiones. Usarlo es sencillo y solo requiere incluirlo en el StackPHP:
<pre class="prettyprint">use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\RedirectResponse;

require __DIR__ . '/vendor/autoload.php';

$app = new Silex\Application();

...
$stack = (new Stack\Builder())
    -&gt;push('Ducks\Stack\GeoIp');

...</pre>
&nbsp;

Ruby: <a href="http://rack.rubyforge.org/doc/Rack/Builder.html" target="_blank"><strong>Rack Builder</strong></a>.]]></description>
                <link>/stackphp-ejecucion-de-una-pila-de-httpkernelinterface</link>
                <pubDate>Sun, 09 Jun 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/stackphp-ejecucion-de-una-pila-de-httpkernelinterface</guid>
                                <category>httpKernelInterface</category>
                                <category>silex</category>
                                <category>stackphp</category>
                                <category>symfony2</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Symfony 2.3: la primera versión LTS</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Hoy se ha presentado la <a title="Symfony 2.3" href="http://symfony.com/blog/symfony-2-3-0-the-first-lts-is-now-available" target="_blank"><strong>versión 2.3</strong> </a>del framework más usado en PHP para crear aplicaciones web. Se trata de una versión importante por ser la primera que tendrá un periodo de mantenimiento de 3 años, muy superior al habitual de 8 meses y porque ya no cabe esperar otra versión de este tipo hasta pasados 2 años, que según el <em>roadmap</em> será Symfony 2.7.

El esfuerzo de la comunidad ha sido importante y se demuestra con los <strong>437 pull-request que contenía 1260 commits enviados por 50 desarrolladores</strong>.<strong> La documentación ha recibido 839 commits de 44 colaboradores</strong>. Sin duda se trata de un esfuerzo de gran envergadura que se ha realizado en 3 meses en lugar de los típicos 6. A todos ellos GRACIAS.

<!--more-->
<h3>Actualizar de 2.2 a 2.3</h3>
Como se han eliminado algunos bundles de la edición estándar por motivos de <a href="/symfony-y-el-cambio-de-licencia-de-swift-mailer" target="_blank"><strong>cambio de licencia a MIT</strong></a>, es importante leer el <a title="Symfony 2.3.0 update" href="https://github.com/symfony/symfony/blob/2.3/UPGRADE-2.3.md" target="_blank"><strong>fichero de actualización de la versión</strong></a>.
<h3>El sistema de versiones de Symfony</h3>
El actual sistema de versiones de Symfony (versiones estándar cada 6 meses y LTS cada 2 años) responde a motivos de transparencia y previsibilidad. Con las versiones estándar, los desarrolladores se benefician de las nuevas características mientras que las LTS se orientan a las grandes empresas y proyectos que buscan mayores periodos de estabilidad debido a que la actualización semestral puede causar un gran impacto en el mantenimiento.

&nbsp;

Symfony blog: <a href="http://symfony.com/blog/symfony-2-3-0-the-first-lts-is-now-available" target="_blank"><strong>Symfony 2.3.0, the first LTS, is now available.</strong></a>

Symfony: <a href="http://symfony.com/doc/2.2/contributing/community/releases.html" target="_blank"><strong>Documento de versiones</strong></a>.]]></description>
                <link>/symfony-2-3-la-primera-version-lts</link>
                <pubDate>Mon, 03 Jun 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-2-3-la-primera-version-lts</guid>
                                <category>symfony 2.3</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Vulnerabilidad en Drupal.org que expone información de cuentas de usuario</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-327" alt="drupal-logo" src="/assets/wp-content/uploads/2013/05/drupal-logo.png" width="71" height="80" />Hace unos minutos la <strong><a title="Web del proyecto Drupal" href="https://drupal.org" target="_blank">drupal.org</a></strong> ha estado offline debido a una <a href="https://drupal.org/news/130529SecurityUpdate" target="_blank"><strong>actualización de seguridad</strong></a> para corregir una vulnerabilidad que compromete la información de los usuarios registrados en el sitio. La información afectada incluye direcciones emails, nombres de usuario y el hash de los password. Es <strong>importante destacar que la vulnerabilidad ha estado producida por software de terceros instalados en los servidores de drupal.org y no en la aplicación Drupal</strong>. La vulnerabilidad <strong>también ha afectado a <a href="https://groups.drupal.org" target="_blank">groups.drupal.org</a></strong>.
<h3>Las recomendaciones:</h3>
Cambiar la clave de usuario:
<ul>
	<li><span style="line-height: 13px;">Ir a <a title="https://drupal.org/user/password" href="https://drupal.org/user/password" rel="nofollow">https://drupal.org/user/password</a>.</span></li>
	<li>Insertar el nombre de usuario o email.</li>
	<li>Acceder al email recibido y pulsar sobre el enlace para cambiar el password.</li>
</ul>]]></description>
                <link>/vulnerabilidad-en-drupal-org-que-expone-informacion-de-cuentas-de-usuario</link>
                <pubDate>Wed, 29 May 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/vulnerabilidad-en-drupal-org-que-expone-informacion-de-cuentas-de-usuario</guid>
                                <category>drupal</category>
                                <category>seguridad</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Publicar un componente PHP con Composer</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-322" alt="composer-logo" src="/assets/wp-content/uploads/2013/05/composer-logo.png" width="91" height="110" />Cuando terminamos un componente/librería PHP pasamos a la fase de publicación y publicar es algo más que exponer el código bajo una licencia (libre o no); Consiste, además, en proveer el todas las facilidades posibles para que los desarrolladores la adopten y en los tiempos actuales y en el mundo PHP todo funciona con <a href="http://getcomposer.org/" target="_blank"><strong>Composer</strong></a>. <strong>Composer es un gestor de dependencias</strong>, es decir, una aplicación que se encarga de obtener las librerías de las que depende un proyecto. Todas estas dependencias quedan descritas en un sencillo fichero llamado <code class="prettyprint">composer.json</code>. Para nuestro caso, escribiremos un composer.json que describirá a nuestro componente (nombre, autor, descripción etc...) e indicaremos la las dependencias (si las tiene) y la versión de PHP que necesita.

<!--more-->
<h3>Estructura básica de composer.json</h3>
Como ejemplo, el composer.json del componente <a href="https://github.com/yosymfony/Toml" target="_blank"><strong>Yosymfony/TOML</strong></a>:
<pre class="prettyprint">{
    "name": "yosymfony/toml",
    "description": "A PHP parser for TOML compatible with TOML v0.1.0",
    "type": "library",
    "keywords": ["toml","parser"],
    "homepage": "http://github.com/yosymfony/toml",
    "license": "MIT",
    "authors": [
	{
		"name": "Victor Puertas",
		"email": "vpgugr@gmail.com",
		"homepage": "http://yosymfony.com"
	}
    ],
    "require": {
	"php": "&gt;=5.3.0"
    },
    "autoload": {
	"psr-0": {
		"Yosymfony\\Toml": "src/"
	}
    }
}</pre>
<a href="http://getcomposer.org/doc/04-schema.md#name" target="_blank"><strong>name</strong></a>: Nombre del componente. Se usa el siguiente patrón "vendor/nombre proyecto". Vendor podría ser la entidad/organización o usuario que crea el componente.

<a href="http://getcomposer.org/doc/04-schema.md#description" target="_blank"><strong>description</strong></a>: Breve descripción del componente (no más de una línea).

<a href="http://getcomposer.org/doc/04-schema.md#type" target="_blank"><strong>type</strong></a>: Información del tipo de componente. El valor por defecto es <em>library</em>. Otros valores muy usados son los siguientes:
<ul>
	<li><span><strong style="line-height: 13px;">project: </strong><span style="line-height: 13px;">Indica que se trata de un proyecto y no de una librería. Este tipo puede ser útil para que los IDEs carguen el entorno en función del tipo de proyecto: Symfony, Drupal etc...</span> </span></li>
	<li><strong>metapackage: </strong>Es un paquete especial que hace referencia a otros paquetes, es decir, permite agrupar un conjunto de librerías bajo un mismo nombre.</li>
	<li><strong>composer-installer</strong>: Este es un tipo que se suele emplear cuando requerimos de instalaciones especiales.</li>
</ul>
En realidad, en el campo <em>type</em> se puede emplear cualquier cadena de  texto como symfony-bundle, wordpress-plugin o cualquier otro nombre identificativo ya que su principal utilidad se produce cuando nuestro componente/librería requiere de un instalador especial que podemos crear para personalizar las acciones que se llevan a cabo durante este proceso.

<a href="http://getcomposer.org/doc/04-schema.md#keywords" target="_blank"><strong>keywords</strong></a>: (opcional) Array de palabras clave que definen al componente. Se emplea en búsquedas y filtrados de contenido.

<a href="http://getcomposer.org/doc/04-schema.md#homepage" target="_blank"><strong>homepage</strong></a>: (opcional) URL de la página web del componente o proyecto.

<a href="http://getcomposer.org/doc/04-schema.md#license" target="_blank"><strong>license</strong></a>: (opcional) Nombre de la licencia bajo la que se publica el componente. Puede ser una cadena de texto o un array de las mismas. <strong>Aunque esta propiedad es opcional, es muy recomendable usarla ya que la licencia no es un tema de menor importancia</strong>. La notación recomendada para las principales licencias es la siguiente: Apache-2.0, BSD-2-Clause, BSD-3-Clause, BSD-4-Clause, LGPL-3.0, LGPL-3.0+, MIT. Puedes encontrar el identificador de todas las licencias libres <a title="Identificadores de licencias open source" href="http://spdx.org/licenses/" target="_blank"><strong>spdx.org</strong></a>.

En caso de desarrollar software propietario, puedes usar el identificador <strong>proprietary</strong>.

En ocasiones, el código lo publicamos bajo los términos de más de una licencia como LGPL y GPL. En este caso, detallamos las licencias como array:
<pre class="prettyprint">{
    "license": [
       "LGPL-2.1",
       "GPL-3.0+"
    ]
}</pre>
También puedes usar esta notación alternativa para definirlas en un solo string:
<pre class="prettyprint">{
    "license": "(LGPL-2.1 or GPL-3.0+)" // Más humano. También se puede emplear "and"
}</pre>
<a href="http://getcomposer.org/doc/04-schema.md#authors" target="_blank"><strong>authors</strong></a>: Información acerca de los autores del componente. Es un array de objetos en el que cada uno puede contener las siguientes propiedades:
<ul>
	<li><span style="line-height: 13px;"><strong>name</strong>: nombre del autor.</span></li>
	<li><strong>email</strong>: dirección email del autor.</li>
	<li><strong>homepage</strong>: página web del autor: blog, github etc...</li>
	<li><strong>role</strong>: rol desempeñado en el proyecto: developer, translator etc...</li>
</ul>
<a href="http://getcomposer.org/doc/04-schema.md#package-links" target="_blank"><strong>require</strong></a>: Esta es una de las propiedades más importantes ya que indica el nombre y la versión de componentes que necesita nuestra librería para funcionar. <strong>Si no se cumplen todas los requisitos, no se instalará nuestro componente</strong>:
<pre class="prettyprint">{
    "require": {
        "php": "&gt;=5.3.0",
        "monolog/monolog": "1.0.*" // Nuestro componente requiere de Monolog 1.0.x
    }
}</pre>
Existe otra propiedad llamada<a href="http://getcomposer.org/doc/04-schema.md#require-dev" target="_blank"><strong> require-dev</strong> </a>que describe dependencias para el entorno de desarrollo. Muy útil para realizar unit-tests.

Require tiene varias formas de expresar la versión necesaria de un componente así como el nivel mínimo de estabilidad. Lo mejor es <a href="http://getcomposer.org/doc/04-schema.md#package-links" target="_blank">visitar la documentación</a> en Composer.

<a href="http://getcomposer.org/doc/04-schema.md#autoload" target="_blank"><strong>autoload</strong></a>: Establece información sobre la carga automática de clases. Lo más aconsejable es desarrollar nuestra librería siguiendo el estándar<a title="PHP PSR-0" href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md" target="_blank"><strong> PSR-0</strong> </a>que establece una relación entre la estructura de directorios y los <em>namespaces</em> de nuestras clases.
<pre class="prettyprint">{
    "autoload": {
        "psr-0": {
            "Yosymfony\\Toml": "src/",
            "Vendor\\Namespace\\": "src/",
            "Vendor_Namespace_": "src/"
        }
    }
}</pre>
El primer elemento de psr-0 indica que el namespace <code class="prettyprint">Yosymfony\Toml</code> debe comenzar a resolverse a partir del directorio <code class="prettyprint">src</code>.

Si no quieres usar PSR-0, Composer admite otros métodos como <a href="http://getcomposer.org/doc/04-schema.md#classmap" target="_blank"><strong>Classmap</strong></a> o <a href="http://getcomposer.org/doc/04-schema.md#files" target="_blank"><strong>files</strong></a> aunque no es lo más recomendado.
<h3>Usar el componente en un proyecto o librería</h3>
Para usarlo, simplemente debemos incluirlo como dependencia:
<pre class="prettyprint">"require": {
    "yosymfony/toml": "dev-master"
}</pre>
Esta es la forma más sencilla de incluir una dependencia y para usarla debemos registrar nuestro componente en <a href="http://packagist.org" target="_blank"><strong>packagist.org</strong></a>. Packagist es un servicio creado por los autores de Composer que establece la relación entre el nombre del componente, en este caso yosymfony/toml, y el código fuente alojado en un repositorio tipo Git, SVN o Hg que sea accedido mediante URL (con Github lo tienes muy fácil). Si no quieres usar packagist como repositorio, podes crear los <a href="http://getcomposer.org/doc/04-schema.md#repositories" target="_blank">tuyos</a>.]]></description>
                <link>/publicar-un-componente-php-con-composer</link>
                <pubDate>Sun, 26 May 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/publicar-un-componente-php-con-composer</guid>
                                <category>composer</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Symfony Case studies: Youporn</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Hoy <a title="Twitter de Fernando Siles" href="https://twitter.com/kalimero" target="_blank"><em>Fernando Siles</em></a> ha publicado un artículo en <a href="http://www.genbetadev.com/desarrollo-web/las-tripas-tecnologicas-de-un-gigante-del-porno" target="_blank">Genbetadev</a> en describiendo la arquitectura de de uno de los gigandes del streaming de vídeo de Internet: Youporn (la temática queda clara). El artículo de basa en una <a href="http://highscalability.com/blog/2012/4/2/youporn-targeting-200-million-views-a-day-and-beyond.html" target="_blank">publicación de <strong>High Scalability</strong></a> realizada con motivo de la charla dada por <a title="Perfil en Linkedin" href="http://www.linkedin.com/in/pickup22" target="_blank"><strong>Eric Pickup</strong>, CEO de Youporn</a> en la edición 2012 de la Confoo Conference.

Como comprenderás, la temática de este sitio implica grandes cantidades en cualquier variable que se quiera medir (número de consultas, datos de transmisión, cantidad de log etc...) y lo interesante de todo esto es que está <strong>implementada en Symfony2</strong>.

Las cifras son impresionantes:
<ul>
	<li><span style="line-height: 13px;">&gt; 300.000 consultas por segundo.</span></li>
	<li>Transmite 100 Gb, lo que equivale a transmitir 3 DVDs completos por segundo.</li>
	<li>Genera de 8GB-15GB en datos de logs por hora.</li>
</ul>
<!--more-->

<strong>Esto no hace más que consolidar a Symfony2 como un framework apto para emplearse en situaciones extremas</strong> en donde se requieren respuestas rápidas para miles de usuarios de todo el mundo. Por supuesto, el éxito en la parte técnica de un servicio de estas dimensiones no solo está en el framework. La arquitectura del site incluye <strong><a href="http://redis.io/" target="_blank">Redis</a></strong> (NoSQL) en lugar del tradicional MySQL. <a href="http://haproxy.1wt.eu/" target="_blank"><strong>HAProxy</strong></a> como balanceador de carga. <strong><a href="https://www.varnish-cache.org/" target="_blank">Varnish</a> </strong>como proxy inverso para suavizar la carga en servidores web. <a href="http://www.balabit.com/network-security/syslog-ng/" target="_blank"><strong>Syslog-ng</strong></a> es el encargado de procesar los 15 GB/hora que puede llegar a generar.

Originalmente, Youporn comenzó en 2006 escrito en <strong><a href="http://www.perl.org/" target="_blank">Perl</a> </strong>y usando MySQL. En 2011 se reescribió el código por completo y se paso a usar PHP + Symfony obteniendo una mejoría del 10% y un código más legible.]]></description>
                <link>/symfony-case-studies-youporn</link>
                <pubDate>Sun, 19 May 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-case-studies-youporn</guid>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>yosymfony/toml: Parser PHP para el formato TOML de ficheros de configuración</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Tras varias semanas de desarrollo he publicado el <a href="https://github.com/yosymfony/Toml" target="_blank">primer componente</a> para PHP bajo el nombre de <a href="https://github.com/yosymfony" target="_blank">YoSymfony en Github</a>. Y es que la idea de este blog no es solo publicar noticias sino también aportar código a la comunidad PHP.

<a href="https://github.com/yosymfony/Toml" target="_blank"><strong>yomsymfony/toml</strong></a> es un parser del formato de ficheros de configuración <a href="https://github.com/mojombo/toml" target="_blank"><strong>TOML creado por Tom Preston-Werner</strong></a>, cofundador de Github. La idea que subyace en este formato es la sencillez. Permitir crear ficheros de configuración intuitivos gracias a una semántica sencilla. En esencia, el fichero se forma por conjuntos de datos clave-valor que se pueden organizar en "namespaces". Un ejemplo:
<pre class="prettyprint">[database] # namespace
server = "192.168.1.1"
ports = [ 8001, 8001, 8002 ]
connection_max = 5000
enabled = true

[database.querys] # Namespace. Se usa el '.' para separar
max_size_cache: 10 # expresado en MB</pre>
<!--more-->

TOML soporta un conjunto de datos simples como string, booleanos, enteros, flotantes, arrays y fechas con formato <a title="Wikipedia" href="http://es.wikipedia.org/wiki/ISO_8601" target="_blank">ISO8601</a>. Para facilitar la comprensión, en los arrays no se permiten mezclar varios tipos de datos.

En cuanto a las claves, existe gran libertad para definirlas puesto que una clave comienza con el primer caracter distinto del espacio y finaliza con el último caracter distinto de espacio antes del igual:
<pre class="prettyprint">~!@#$^&amp;*()_+-`1234567890[]\|/?&gt;&lt;.,;:' = 1 # esto es correcto</pre>
<h3>Implementación</h3>
El parser lo he implementado con la típica estructura de analizador léxico (<em>lexer.php</em>) - analizador sintáctico (<em>parser.php</em>). El primero se encarga de obtener tokens mientras que el segundo comprueba que estén en el orden correcto.

La forma de usarlo es sencilla:
<pre class="prettyprint">use Yosymfony\Toml\Toml;

$array = Toml::Parse('example.toml'); // fichero

print_r($array);

$array = Toml::Parse('key = [1,2,3]'); // en línea

print_r($array);</pre>
Para incorporar <strong>yosymfony/toml</strong> a cualquier proyecto basta con incluir la dependencia en <code class="prettyprint">composer.json</code> y ejecutar <code class="prettyprint">composer update</code>:
<pre class="prettyprint">"require": {
    "yosymfony/toml": "dev-master"
}</pre>
&nbsp;

Github: <strong><a href="https://github.com/yosymfony/Toml" target="_blank">yosymfony/toml</a>. </strong>Licencia: MIT.

Packagist: <a title="Yosymfony TOML - Packagist" href="https://packagist.org/packages/yosymfony/toml" target="_blank"><strong>Información del paquete</strong></a>.

TOML:  <a title="TOML 0.1.0" href="https://github.com/mojombo/toml/blob/master/versions/toml-v0.1.0.md" target="_blank"><strong>especificación v0.1.0</strong></a>.]]></description>
                <link>/yosymfonytoml-parser-php-para-el-formato-toml-de-ficheros-de-configuracion</link>
                <pubDate>Tue, 14 May 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/yosymfonytoml-parser-php-para-el-formato-toml-de-ficheros-de-configuracion</guid>
                                <category>open source</category>
                                <category>packagist</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>PHP 5.5 RC1 y actualizaciones en las ramas 5.3.x y 5.4.x</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />La primera <em>Release Candidate</em> de PHP 5.5 ya está disponible, tal y como publicaba <a href="http://permalink.gmane.org/gmane.comp.php.devel/80269" target="_blank"><strong>Julien Pauli en la lista de internals de PHP</strong></a>. Las correcciones que se han realizado desde la última Beta4 se han centrado en cuatro aspectos:
<ul>
	<li><span style="line-height: 13px;"><strong>Gestor de procesos FastCGI</strong> (FPM): Mejoras de rendimiento y más información en los log cuando se produce un error durante la invocación de una <em>Syscall</em>.</span></li>
	<li>Correcciones en el soporte IPV6 en la extensión SNMP.</li>
	<li>La extensión <strong>GD ahora requiere libGD &gt;= 2.1</strong>.</li>
	<li>Correcciones en la <em>stream_select()</em> de de las funciones stream, la capa de abstracción para tratar datos de igual forma con orígenes distintos: ficheros, datos comprimidos o URLs (<a title="PHP funciones stream - Ejemplos" href="php.net/manual/en/stream.examples.php" target="_blank">algunos ejemplos</a>).</li>
</ul>
<!--more-->

Además, hoy han recibido actualizaciones las ramas 5.3.x y 5.4.x con las versiones 5.3.25 y 5.4.15 que incorporan la corrección de 10 bugs y la actualización de la <em>libMagic </em>asociada a <a href="http://php.net/manual/es/book.fileinfo.php" target="_blank"><em>FileInfo</em></a> al la versión 5.14 para el caso de PHP 5.4.15. Esta actualización se debe a que la versión que existía era demasiado antigua tal como reflejaba el bug <a href="https://bugs.php.net/bug.php?id=64462" target="_blank">#64462</a>.

Como siempre, en el caso de versiones no estables se recomienda probarlas en entornos fuera de producción y reportar los errores encontrados a la <a href="https://bugs.php.net/">PHP bug tracker</a>.

&nbsp;

Github: <a href="https://github.com/php/php-src/blob/php-5.5.0RC1/NEWS" target="_blank"><strong>PHP 5.5.0 RC1 changelog</strong></a>.

PHP: <a href="http://downloads.php.net/dsp/" target="_blank"><strong>Descargar PHP 5.5 RC1</strong></a>.

PHP: <a title="PHP 5.x changelog" href="http://www.php.net/ChangeLog-5.php" target="_blank"><strong>PHP 5 Changelog</strong></a>.]]></description>
                <link>/php-5-5-rc1-y-actualizaciones-en-las-ramas-5-3-x-y-5-4-x</link>
                <pubDate>Thu, 09 May 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-5-5-rc1-y-actualizaciones-en-las-ramas-5-3-x-y-5-4-x</guid>
                                <category>php 5.3</category>
                                <category>php 5.4</category>
                                <category>php 5.5</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Symfony y el cambio de licencia de SwiftMailer</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-308" title="Logo by Open Icon Library" alt="mit-license-logo" src="/assets/wp-content/uploads/2013/05/mit-license-logo.png" width="107" height="108" /><strong>Aplaudo el reciente cambio de licencia</strong> en <a href="http://swiftmailer.org/" target="_blank"><strong>SwiftMailier</strong></a>, el componente para la gestión de envío de correos de Symfony2, que se ha realizado recientemente  de <a title="Licencia LGPL - Wikipedia" href="https://es.wikipedia.org/wiki/GNU_Lesser_General_Public_License" target="_blank"><strong>LGPL</strong></a> a <a title="Licencia MIT - Wikipedia" href="https://es.wikipedia.org/wiki/Licencia_MIT" target="_blank"><strong>MIT</strong></a>. El cambio no es nada descabellado y no significa que se esté menos a favor del software libre, que es lo que es Symfony framework. Se trata de consolidar la idea de llegar al máximo número de usuarios posibles sin importar el destino del código derivado. No importa si Symfony termina como <em>core</em> de una aplicación que no saldrá de los dominios de una compañía. Lo que importa es que esa compañía elija Symfony.
<blockquote class="twitter-tweet" lang="es">I've just released <a href="https://twitter.com/search/%23Swiftmailer">#Swiftmailer</a> 5.0, the first version to be released under the MIT license.

— Fabien Potencier (@fabpot) <a href="https://twitter.com/fabpot/status/329296173687005184">30 de abril de 2013</a></blockquote>
<!--more-->

El uso de esta licencia transmite el mensaje de<strong> <em>eres libre de hacer lo que quieras con el código</em> </strong>y por ello la versión estándar del próximo <strong>Symfony 2.3 solo incluye componentes con licencia MIT o BSD</strong> (no la BSD original). Ambas licencias están reconocidas como libres por la OSL -<em>Open Source Iniciative</em>-. En el caso de BSD, la original no es compatible con GPL e imponen cargas referentes a publicidad por lo que no se usa actualmente. En su lugar se suele emplear la conocida como <a title="BSD-3-Clause" href="http://opensource.org/licenses/BSD-3-Clause" target="_blank"><strong>BSD-3</strong></a>.

Las licencias tipo MIT son simples. Se entienden perfectamente y su lectura es corta. Por el contrario,  GPL o LGPL son más complejas de interpretar. LGPL -<em>Lesser GPL</em>- es un hermano de la archiconocida GPL -<em>General Public License</em>- donde la principal diferencia es que el código licenciado bajo la primera permite ser incluido en software privado por lo que es interesante para el desarrollo de componentes/librerías.

El cambio de licencia encaja perfectamente con los objetivos del proyecto Symfony y pone a Shift Mailer en sintonía con el resto de componentes que forman el núcleo del framework. <strong>La elección de una licencia es un tema importante que se relaciona directamente con los objetivos que tengamos para aquello que publicamos</strong>. Por muy pro-GPL que seas, no tiene sentido publicar un componente bajo esta licencia si tus objetivos son que se extienda su uso lo máximo posible. En este caso, se podría usar la LGPL, pero para mi gusto, prefiero MIT.

<strong>Actualización 31/07/2013:</strong> <a title="Caso Fantec" href="http://opensource.com/law/13/7/fantec-german-foss-compliance" target="_blank">Un tribunal alemán hace responsable a la empresa Fantec de las violaciones de licencia</a> producidas por una compañía ajena a esta que le suministra algunos de los componentes.

Licencia: <strong><a title="Licencia MIT" href="http://opensource.org/licenses/MIT" target="_blank">MIT</a></strong>
Licencia: <strong><a title="Licencia BSD-3" href="http://opensource.org/licenses/BSD-3-Clause" target="_blank">BSD-3</a></strong>, <a title="Licencia BSD-2" href="http://opensource.org/licenses/BSD-2-Clause" target="_blank">BSD-2</a>.
GNU: <a title="Licencia LGPL v3" href="http://opensource.org/licenses/LGPL-3.0" target="_blank"><strong>LGPL-3</strong></a>, <strong><a href="http://www.gnu.org/licenses/gpl-faq.html" target="_blank">FAQ sobre GPL</a></strong>.]]></description>
                <link>/symfony-y-el-cambio-de-licencia-de-swift-mailer</link>
                <pubDate>Tue, 07 May 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-y-el-cambio-de-licencia-de-swift-mailer</guid>
                                <category>software libre</category>
                                <category>symfony2</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Symfony 2.3 muy cerca</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />El mes de mayo es clave para la comunidad Symfony por liberarse la primera versión con un periodo de mantenimiento superior al habitual en cualquier versión del framework. El trabajo ha sido duro y prueba de ello han sido los <a title="Sprints para recopilar las correcciones importantes de Symfony2.3" href="/sprints-para-recopilar-las-correcciones-importantes-de-symfony2-3" target="_blank">sprints</a>, el <a title="Symfony Docs Hack Day de marzo 2013" href="/symfony-docs-hack-day-manana-sabado" target="_blank">Docs Hack Day</a> y los <strong>más de 330 pull request</strong> que se han incorporado al framework desde el lanzamiento de la <a title="Symfony 2.2 lanzada en Marzo de 2013" href="/disponible-symfony-2-2" target="_blank">versión 2.2</a> hace unos meses. Las fechas clave de este mes de mayo quedan como siguen:
<ul>
	<li><span style="line-height: 13px;">Día 1: Symfony 2.3 Beta 1.</span></li>
	<li>Días 10-13: Symfony 2.3 Beta 2.</li>
	<li>Días 17-19: Symfony 2.3 RC.</li>
	<li><strong>Días 29-31: Symfony 2.3</strong>.</li>
</ul>
<!--more-->

No todos los pull request se van a incorporar. Tan solo aquellos de extremada importancia como los relacionados con temas de seguridad o simplificación extrema del uso del framework. Algunos cambios que no estarán en la beta 1 y si en a beta 2 son:
<ul>
	<li><a href="https://github.com/symfony/symfony/pull/7707" target="_blank">Synchronized services</a>;</li>
	<li><a href="https://github.com/symfony/symfony/pull/7527" target="_blank">Lazy services</a>;</li>
	<li><a href="https://github.com/symfony/symfony/pull/6554" target="_blank">Improved CSRF providers</a>;</li>
	<li><a href="https://github.com/symfony/symfony/pull/6388" target="_blank">Session start</a>;</li>
	<li><a href="https://github.com/symfony/symfony/pull/6069" target="_blank">Simpler Security customization options</a>.</li>
</ul>
Symfony blog: <a title="Blog de Symfony framework" href="http://symfony.com/blog/symfony-2-3-schedule-update" target="_blank"><strong>Symfony 2.3 schedule update</strong></a>]]></description>
                <link>/symfony-2-3-muy-cerca</link>
                <pubDate>Tue, 30 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-2-3-muy-cerca</guid>
                                <category>symfony 2.3</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Importante actualización de seguridad en CakePHP 1.2.12, 1.3.16, 2.2.8 y 2.3.4</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-81" alt="CakePHP-logo" src="/assets/wp-content/uploads/2013/01/cakephp-logo.png" width="93" height="87" />Importante actualización de seguridad relacionada con la gestión y ordenación de los resultados usados en el componente <a title="CakePHP PaginatorComponent" href="http://api.cakephp.org/2.3/class-PaginatorComponent.html" target="_blank"><strong><em>PaginatorComponent</em></strong></a>, encargado de paginar los resultados del modelo de datos. El problema se produce cuando se realiza una <a href="http://api.cakephp.org/2.3/class-PaginatorComponent.html#_paginate" target="_blank">paginación</a> sin indicar los campos por los que está permitido ordenar los resultados (opción <em>whitelist</em>). La vulnerabilidad permite la ejecución de código SQL. <strong>Por el momento, el equipo de CakePHP no ha hecho pública la forma de explotar esta vulnerabilidad</strong>. Se pretende dar un tiempo razonable para que los usuarios realicen actualizaciones. Las versiones afectadas son <strong>1.2.12, 1.3.16, 2.2.8 y 2.3.4</strong>. Recuerda que el parámetro <em>whitelist</em> es muy útil para evitar realizar ordenaciones de los resultados por campos que no se encuentren indexados en base de datos. Además, cada versión lleva algunas mejoras, tal y como se detalla en <a href="http://bakery.cakephp.org/articles/markstory/2013/04/28/security_release_-_cakephp_1_2_12_1_3_16_2_2_8_and_2_3_4" target="_blank">The Bakery</a>.

GitHub: <a title="GitHub" href="http://github.com/cakephp/cakephp/tags" target="_blank"><strong>Descargar actualización</strong></a>.

CakePHP: <a title="CakePHP changelogs" href="http://cakephp.org/changelogs" target="_blank"><strong>ChageLogs</strong></a>.]]></description>
                <link>/importante-actualizacion-de-seguridad-en-cakephp-1-2-12-1-3-16-2-2-8-y-2-3-4</link>
                <pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/importante-actualizacion-de-seguridad-en-cakephp-1-2-12-1-3-16-2-2-8-y-2-3-4</guid>
                                <category>cakephp</category>
                                <category>seguridad</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Seguridad: Consejos para evitar el Cross-Site Scripting en PHP</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Dejo algunos consejos que leí el otro día en una entrada publicada en el <a href="http://blog.astrumfutura.com/2013/04/20-point-list-for-preventing-cross-site-scripting-in-php/" target="_blank"><strong>blog de P<em>ádraic Brady</em> titulada "<em>20 Point List For Preventing Cross-Site Scripting In PHP</em>"</strong></a> Consejos que no conviene olvidar por mucho framework que usemos. Algunos de ellos son propios de PHP y otros se pueden aplicar a cualquier otro lenguaje. Como siempre, el sentido común es muy importante.

<!--more-->
<ul>
	<li><span style="line-height: 13px;"><strong>Nunca muestres directamente el contenido obtenido de sitios no seguros</strong> sin realizar previamente un escapado de los datos.</span></li>
	<li>Siempre <strong>validar los datos de entrada</strong>.</li>
	<li>Cualquier dato que no esté de forma explícita en el código, es considerado como dato de origen no seguro.</li>
	<li>La función <strong><a href="http://www.php.net/manual/en/function.htmlentities.php" target="_blank">htmlentities()</a></strong>, que convierte caracteres a su equivalente en <em>entidades HTML</em>, también es válida para datos XML. En caso de serializar XMLs, además usar <a href="http://www.php.net/manual/en/function.htmlspecialchars.php" target="_blank"><strong>htmlspecialchars()</strong></a> que se encarga de escapar caracteres con significado especial como &gt;,&lt;, &amp; o las comillas.</li>
	<li>Siempre usar los flags <em><strong>ENT_QUOTES, ENT_SUBSTITUT</strong> </em>en la función <strong><a href="http://www.php.net/manual/en/function.htmlspecialchars.php" target="_blank">htmlspecialchars()</a></strong>. La primera opción permite convertir comillas simples y dobles. La segunda evita devolver un string vacío en las secuencias inválidas de caracteres. También es muy recomendable validar la codificación de la cadena de entrada. Desde PHP &gt;=5.4 la codificación por defecto es UTF-8.</li>
	<li><strong>No usar <a href="http://www.php.net/manual/en/function.htmlspecialchars.php" target="_blank">htmlspecialchars()</a> como único medio para escapar recursos</strong> como Javascript, CSS o partes de una URL.</li>
	<li>No usar<strong><a href="http://www.php.net/manual/en/function.json-encode.php" target="_blank"> json_encode()</a> </strong>para escapar string con Javascript.</li>
	<li>Usa la función <a href="http://php.net/manual/en/function.rawurlencode.php" target="_blank"><strong>rawurlencode()</strong></a> para escapar los string que se inserten en una URL. Esta función los acomoda para que cumplan con la sintaxis descrita en el <a title="RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax" href="http://www.faqs.org/rfcs/rfc3986.html" target="_blank">RFC 3986</a>. Después, escapa la URL completa con <strong><a href="http://www.php.net/manual/en/function.htmlspecialchars.php" target="_blank">htmlspecialchars()</a></strong>.</li>
	<li>No pasar datos escapados de sitios no seguros, por ejemplo, string que serán interpretados como Javascript, al contexto de ejecución de Javascript: <code class="prettyprint">setAttribute(“onclick”, “no-hagas-esto”).</code></li>
	<li>Valida siempre las URLs construidas en sitios no seguros.</li>
	<li><strong>Nunca validar URLs usando <a href="http://www.php.net/manual/en/function.filter-var.php" target="_blank">filter_var()</a></strong>. No funcionan y permiten pasar el filtro a URLs con código Javascript.</li>
	<li><strong>No mezclar recursos http y https</strong> en una misma página.</li>
	<li>Todo el código HTML que provenga de sitios no seguros se debe limpiar con <a href="http://htmlpurifier.org/" target="_blank"><strong>HTMLPurifier</strong></a> antes de mostrarlo.</li>
	<li>También se puede usar <a href="http://htmlpurifier.org/" target="_blank"><strong>HTMLPurifier</strong></a> para otros lenguajes como <strong>BBCode o Markdown</strong>.</li>
	<li>Intenta evitar el uso de CSS y Javascript en línea.</li>
	<li>Utiliza el <em>Content-Type</em> adecuado al contenido que se transmite.</li>
	<li>Las cookies que solo usa nuestro servidor hay que marcarlas como <a title="HTTP cookie" href="http://en.wikipedia.org/wiki/HTTP_cookie" target="_blank" rel="wikipedia">HttpOnly</a>.</li>
</ul>
<h3>HTMLPurifier</h3>
<a href="http://htmlpurifier.org/" target="_blank"><strong>Esta librería es un gran aliado para la seguridad</strong></a> que nos permite analizar una entrada HTML, BBCode o Markdown y eliminar aquellas partes que contengan código malicioso. Además, nos asegura que el HTML de entrada cumple con el estándar declarado en el <em>doctype</em>. <a href="http://htmlpurifier.org/live/INSTALL" target="_blank">Instalarla</a> es sencillo (Requiere PHP 5 y los test se han realizado para versiones &gt;= 5.0.5) Puedes hacerlo de varias formas
<ul>
	<li><span style="line-height: 13px;"><a href="http://htmlpurifier.org/download" target="_blank"><strong>Descargar</strong></a> la librería.</span></li>
	<li>Usar <strong>Pear</strong>:
<pre class="prettyprint">pear channel-discover htmlpurifier.org
pear install hp/HTMLPurifier</pre>
</li>
	<li>Clon <strong>Git</strong>: <code class="prettyprint">git clone git://repo.or.cz/htmlpurifier.git</code></li>
</ul>
Usarla es igualmente sencillo:
<pre class="prettyprint">require_once '/path/to/HTMLPurifier.auto.php';

$config = HTMLPurifier_Config::createDefault();
$purifier = new HTMLPurifier($config);
$clean_html = $purifier-&gt;purify($codigo_html_no_seguro);</pre>
<strong>Para usuarios de Symfony2</strong> existe un <a title="HTMLPurifierBundle - Symfony2" href="https://github.com/Exercise/HTMLPurifierBundle" target="_blank"><strong>bundle</strong></a> desarrollado por <a href="http://twitter.com/jmikola" target="_blank"><strong>@jmikola</strong> </a>que incluye filtros para Twig:
<pre class="prettyprint">{# Filters text's value through the "default" HTMLPurifier service #}
{{ text|purify }}

{# Filters text's value through the "custom" HTMLPurifier service #}
{{ text|purify('custom') }}</pre>
&nbsp;

Twitter: <strong><a href="http://twitter.com/padraicb" target="_blank">Pádraic Brady</a>.</strong>

Reddit: <a href="http://www.reddit.com/r/PHP/comments/1cvea9/20_point_list_for_preventing_crosssite_scripting/" target="_blank"><strong>Comentarios del artículo</strong></a>.
]]></description>
                <link>/seguridad-consejos-para-evitar-el-cross-site-scripting-en-php</link>
                <pubDate>Thu, 25 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/seguridad-consejos-para-evitar-el-cross-site-scripting-en-php</guid>
                                <category>seguridad</category>
                                <category>xss</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Unit tests: test doubles o database fixtures</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-263" alt="unit-tests" src="/assets/wp-content/uploads/2013/03/unit-tests.png" width="80" height="94" />En numerosas ocasiones, las pruebas unitarias de un proyecto incluyen consultas a base de datos. Estas pruebas se deben realizar en entornos estáticos donde para un mismo conjunto de datos de entrada, se obtiene la misma salida por lo que necesitamos disponer de una base de datos que parte de un mismo estado cada vez que comenzamos la batería de pruebas.

La realización de pruebas en las que interviene información de base de datos es habitual realizarlas mediante <em>test doubles</em> o <em>database fixtures</em>. La primera consiste en crear <em>mock</em>, falsos objetos que simulan ser el original con los datos que se espera sin realizar consulta alguna al servidor. La segunda técnica consiste disponer de un conjunto de datos de prueba con los que inicializar las tablas de base de datos antes de comenzar las pruebas.

<!--more-->

La elección de una u otra puede depender del gusto de cada uno pero sobretodo dependerá de la naturaleza y del entorno en el que se encuentre el proyecto.
<h3>Database fixtures</h3>
<strong><em>Database fixtures</em> requieren de un servidor de datos e incrementan el tiempo empleado en realizar las pruebas</strong>. En grandes proyectos con miles de ellas este parámetro puede ser crucial. <strong>Algunos programadores como <a title="@grmpyprogrammer " href="http://twitter.com/grmpyprogrammer " target="_blank">Chris Hartjes</a>, autor del libro "<a title="Web del libro The grumpy programmer's (PHP)" href="http://www.grumpy-phpunit.com/" target="_blank"><em>The grumpy programmer's</em></a>", prefieren evitar esta técnica</strong> porque la misión es probar el código, no el drivers de conexión al servidor de datos. Además,  la base de datos se va "contaminando" con la propia ejecución de las pruebas pudiendo llegar a crear situaciones no favorables para algunas de ellas.

El uso de <em>data fixtures</em> con PhpUnit requiere de un complemento extra llamado <a title="PhpUnit DbUnit" href="https://github.com/sebastianbergmann/dbunit" target="_blank"><strong>DbUnit</strong></a> que permite inicializar la base de datos a un estado conocido. Este tipo de complementos imponen limitaciones, como el tipo de servidor de datos que soporta: MySQL, PostgreSQL, Oracle y SQLite. Desde luego son motores comunes pero ¿Qué pasa si nuestro proyecto usa otro, como por ejemplo, un motor tipo NO-SQL?.
<h3>Test doubles</h3>
<strong>Los <em>test doubles</em> son rápidos</strong>, y probablemente requieran el mismo tiempo de preparación que los <em>database fixtures</em>. Se crean mediante algún <em>mock framework</em> como <a href="https://github.com/mlively/Phake" target="_blank"><strong>Phake</strong></a> o el proporcionado por <a title="Test doubles en PhpUnit" href="http://www.phpunit.de/manual/current/en/test-doubles.html#test-doubles.mock-objects" target="_blank"><strong>PhpUnit</strong></a>. Quizá el problema en framework actuales, como Symfony, es el fuerte acoplamiento con base de datos en los que realizar <em>test doubles</em> para tareas que implican recuperar entidades puede llegar a ser complejo y tedioso.]]></description>
                <link>/unit-tests-test-doubles-o-database-fixtures</link>
                <pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/unit-tests-test-doubles-o-database-fixtures</guid>
                                <category>unit test</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Symfony: La estabilidad es lo primero</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Para que un framework tenga éxito no basta con incluir nuevas características. Quizá sea más importante ofrecer una imagen de estabilidad, la imagen de un framework con componentes seguros, respaldados por infinidad de pruebas (unitarias y funcionales) de los casos típicos y extremos y con compromiso serio de mantenimiento. Esta es la finalidad que se pretende conseguir con el nuevo <a href="http://symfony.com/doc/current/contributing/community/releases.html" target="_blank">sistema de lanzamiento de versiones de Symfony</a> que comenzará con la próxima versión 2.3 y será tipo LTS, es decir, dispondrá de un periodo mayor de mantenimiento. Este tipo de características son las que buscan los grandes proyectos de Internet y los llamados <em>Corporate Users</em>, empresas que deciden usar Symfony para construir sus propias soliciones.

Hoy, <strong>Fabien Potencier</strong> ha publicado una entrada en su blog personal titulada "<a href="http://fabien.potencier.org/article/68/about-symfony-stability-over-features" target="_blank"><strong><em>About Symfony: Stability over Features</em></strong></a>" en la que confirmaba la idea anterior: las novedades están muy bien pero para que el framework sea más confiable y más aceptado por grandes <em>players</em> es necesario realizar más correcciones de bug, más pruebas y evitar romper la compatibilidad hacia atrás en las versiones principales como es la actual Symfony 2.

A pesar de que a todos nos gusta desarrollar novedades, a la larga esta idea de estabilizar y asegurar lo que ya existe nos beneficiará a todos.]]></description>
                <link>/symfony-la-estabilidad-es-lo-primero</link>
                <pubDate>Mon, 15 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-la-estabilidad-es-lo-primero</guid>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Otro componente desacoplado en Symfony2: el debug</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Ayer, <strong>Fabien Potencier</strong> publicó una entrada en el blog oficial de Symfony en la que anunciaba <a href="http://symfony.com/blog/new-in-symfony-2-3-new-debug-component" target="_blank"><strong>otro componente que se puede utilizar fuera del entorno Symfony</strong></a>. Se trata del <a href="https://github.com/symfony/Debug" target="_blank"><strong>debug</strong></a>, que se ha extraído del <em>HttpKernel</em> para que pueda ser usado en cualquier otro proyecto PHP simplemente incluyendo la dependencia en <code class="prettyprint">composer.json</code>. Sin duda es una buena noticia que sigue la línea de actuación iniciada con Symfony2: <strong>Crear componentes desacoplados y reutilizables que hacen  lo que se espera de ellos de forma correcta</strong>. Se trata de confeccionar un framework que es la suma de todos sus componentes interactuando entre sí en perfecta armonía. Esta nueva línea de pensamiento está consiguiendo que <strong>Symfony se convierta en el framework que permite crear otros framework</strong>. Grandes proyectos de Internet como <a title="Symfony2 en el corazón de otros framework" href="/symfony2-en-el-corazon-de-otros-framework" target="_blank">Laravel, PhpBB o Magento</a> usan en mayor o menor medida componentes de Symfony. Aplaudo que el equipo de Symfony esté realizando este trabajo y los resultados se ven cada día. Muestra de ello es que <a href="http://symfony.es/noticias/2012/12/31/symfony-ya-es-el-framework-php-m%C3%A1s-popular-del-mundo/" target="_blank"><strong>Symfony ya es el framework más popular del mundo</strong></a> tal y como demuestra Google Trends agrupando los términos de búsqueda Symfony y Symfony2.

<!--more-->

<strong>Gran parte del éxito de Symfony2 como corazón de otros framework y proyectos se debe a <a href="http://getcomposer.org/" target="_blank">Composer</a></strong>, una herramienta extraordinaria que hace que incluir dependencias en un proyecto PHP sea sencillo. Con una nomenclatura simple, podemos describir en formato <em>json</em> aquellos componentes que necesita nuestra solución junto con los datos de la versión. Composer se encargará de descargar e instalar, además de permitir actualizar en cualquier momento.

Del fichero de información de dependencias (<em>composer.json</em>) se pueden destilar más usos, como por ejemplo, comprobar que componentes tienen problemas de seguridad registrados. Y para ello, <a title="¿Son seguras las dependencias de tu aplicación Symfony2?" href="/son-seguras-las-dependencias-de-tu-aplicacion-symfony2" target="_blank">Sendio Labs</a> presentó una interesante aplicación para permitir comprobar este tipo de archivos de forma online o con una API REST.

Como nota final, me encantaría ver a <a href="http://wordpress.org/" target="_blank"><strong>Wordpress</strong></a> usando componentes de Symfony2.]]></description>
                <link>/otro-componente-desacoplado-en-symfony2-el-debug</link>
                <pubDate>Fri, 12 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/otro-componente-desacoplado-en-symfony2-el-debug</guid>
                                <category>symfony 2.3</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Symfony2 o Laravel</title>
                <description><![CDATA[Hace unos días, se creó una interesante discusión en Reddit entorno a <a title="Symfony2 vs Laravel" href="http://www.reddit.com/r/PHP/comments/1bdln1/symfony2_vs_laravel/" target="_blank"><strong>si la mejor opción es Symfony2 o Laravel</strong></a>. Como siempre, ante este tipo de preguntas, la respuesta es <strong>depende</strong>. La elección de un framework y otro, incluso hay situaciones en las que es mejor no usar framework alguno, está condicionada por muchos factores como la envergadura del proyecto, experiencia previa, calidad de la documentación o tiempo de entrega del proyecto.

<!--more-->

Los comentarios de la discusión son muy interesantes y es muy recomendable su lectura. Que quede constancia que no soy usuario de Laravel, aunque tengo una tarea mental que me dice que tengo que dedicar unas horas a probarlo. Symfony2 es un framework en el que se puede trabajar a todos los niveles. Podemos decidir trabajar en lo que podríamos llamar la capa RAD en la que creamos prototipos rápidamente mediante bundles como <strong><a href="http://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/index.html" target="_blank">SensioFrameworkExtraBundle</a>, <a href="http://sonata-project.org/bundles/admin/master/doc/index.html" target="_blank">SonataAdminBundle</a></strong> o <a href="http://rad.knplabs.com/" target="_blank"><strong>KnpRadBundle</strong></a> que facilitan enormemente las tareas habituales, esas que podrían cubrir el 80% de los pequeños y medianos proyectos web. Una especial atención merece KnpRadBundle que simplifica acciones relacionadas con las rutas, formularios, inyecciónes de dependencias etc... Symfony2 posee un <a href="http://knpbundles.com/" target="_blank"><strong>enorme ecosistema de bundles</strong></a> que extienden el framework y ayudan al desarrollador a disminuir el tiempo de entrega.

Laravel es más parecido a <a href="http://silex.sensiolabs.org/" target="_blank">Silex, un microframework desarrollado por Sensio Labs</a> inspirado en <a href="http://www.sinatrarb.com/" target="_blank">Sinatra</a> (microframework en Ruby) y basado en los principales componentes de Symfony2, como el <a href="https://github.com/symfony/HttpKernel" target="_blank"><em>HttpKernel</em></a>, en el que se simplifican mucho las cosas. De hecho, Silex y Laravel comparten conceptos como "Service providers" que añaden funcionalidad a la aplicación.

&nbsp;
<div class="row">
<div class="span4">

<strong>Hola mundo en Laravel:</strong>
<pre class="prettyprint">Route::get('/', function()
{
    return "Hello World!";
});</pre>
</div>
<div class="span4">

<strong>Hola mundo en Silex:</strong>
<pre class="prettyprint">$app = new Silex\Application(); 

$app-&gt;get('/', function() use($app) { 
    return 'Hello World!'; 
}); 

$app-&gt;run();</pre>
</div>
</div>
Ambos ejemplos tiene una forma de trabajar parecida, aunque este ejemplo no muestra ni el más mínimo potencial de ambos framework. Una de las partes más interesantes de Laravel que no se encuentra en Silex es el soporte de serie al mapeo de objetos relacionales -ORM- mediante un componente llamado <a href="http://laravel.com/docs/database/eloquent" target="_blank">Eloquent</a>. Silex tiene soporte a Doctrine Dbal mediante <a href="http://librosweb.es/silex/apendice_a/doctrineserviceprovider.html" target="_blank">DoctrineServiceProvider</a> pero esto no es un ORM. Symfony2 usa <a href="http://symfony.com/doc/current/book/doctrine.html" target="_blank">Doctrine</a> como ORM por defecto.

Otras características interesantes de Laravel es la inclusión de una API unificada para procesar colas mensajes con <em>drivers</em> para los algunos de los principales sistemas de gestión como <a href="http://www.iron.io/" target="_blank">IronMQ</a> y <a href="http://aws.amazon.com/es/sqs/" target="_blank">Amazon SQS</a>.

Como comentario final, resaltar que el crecimiento de Laravel es patente, que se trata de un framework que pretende fomentar una forma de desarrollar clara, intentando no complicar las cosas. Symfony2 permite trabajar a cualquier nivel: usando las convenciones y bundles y un poco de configuración podemos tener prototipos rápidos pero Symfony2 permite trabajar a más bajo nivel con componentes reutilizables  totalmente desacoplados.

&nbsp;

Lectura adicional: "<strong><a href="http://pooteeweet.org/blog/2205" target="_blank">Good design is no excuse for wasting time</a></strong>" de <em>Lukas Kahwe Smith</em>.

Reddit: <a href="http://www.reddit.com/r/PHP/comments/1bdln1/symfony2_vs_laravel/" target="_blank"><strong>Symfony2 vs Laravel</strong></a>.]]></description>
                <link>/symfony2-o-laravel</link>
                <pubDate>Wed, 10 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony2-o-laravel</guid>
                                <category>laravel</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Disponible Twig 1.12.3: actualización de seguridad</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-275" alt="twig-logo" src="/assets/wp-content/uploads/2013/04/twig-logo.png" width="69" height="75" />Hoy el equipo de desarrollo de Twig, el motor de plantillas de Symfony2, ha publicado la <a title="Twig 1.12.3" href="http://blog.twig.sensiolabs.org/post/47461911874/security-release-twig-1-12-3-released" target="_blank"><strong>versión 1.12.3 con motivo de una actualización de seguridad</strong></a> para la corrección del bug encontrado por <a href="https://github.com/fabpot/Twig/pull/1026" target="_blank"><strong>Rick Prent</strong></a>. El bug se encuentra en la función <code class="prettyprint"><a href="http://twig.sensiolabs.org/api/master/Twig_Loader_Filesystem.html" target="_blank">Twig_Loader_Filesystem</a>,</code> encargada de cargar plantillas del sistema de ficheros, a la que se le podía forzar a cargar plantillas de un directorio para el que no estaba configurado. <strong>Todas las versiones de Twig están afectadas</strong> por lo que es muy recomendable actualizar.

<strong>Si por algún motivo no puedes actualizar a la última versión, estos son los cambios manuales que hay que realizar</strong>:
<pre class="prettyprint">diff --git a/lib/Twig/Loader/Filesystem.php b/lib/Twig/Loader/Filesystem.php
index faf27e3..84a5e03 100644
--- a/lib/Twig/Loader/Filesystem.php
+++ b/lib/Twig/Loader/Filesystem.php
@@ -203,6 +203,7 @@ protected function validateName($name)
             throw new Twig_Error_Loader('A template name cannot contain NUL bytes.');
         }

+        $name = ltrim($name, '/');
         $parts = explode('/', $name);
         $level = 0;
         foreach ($parts as $part) {
diff --git a/test/Twig/Tests/Loader/FilesystemTest.php b/test/Twig/Tests/Loader/FilesystemTest.php
index 9ea2d0e..798e994 100644
--- a/test/Twig/Tests/Loader/FilesystemTest.php
+++ b/test/Twig/Tests/Loader/FilesystemTest.php
@@ -47,6 +47,7 @@ public function getSecurityTests()
             array('filters\\..\\..\\AutoloaderTest.php'),
             array('filters\\\\..\\\\..\\\\AutoloaderTest.php'),
             array('filters\\//../\\/\\..\\AutoloaderTest.php'),
+            array('/../AutoloaderTest.php'),
         );
     }</pre>
&nbsp;

Twig: <a href=" http://twig.sensiolabs.org/" target="_blank"><strong>Obtener última versión</strong></a>.

Test de vulnerabilidades: <a title="Comprueba las vulnerabilidades de las dependencias de tu proyecto" href="https://security.sensiolabs.org/" target="_blank"><strong>Security Advisories Checker</strong></a>.]]></description>
                <link>/disponible-twig-1-12-3-actualizacion-de-seguridad</link>
                <pubDate>Mon, 08 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/disponible-twig-1-12-3-actualizacion-de-seguridad</guid>
                                <category>seguridad</category>
                                <category>twig</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Sprints para recopilar las correcciones importantes de Symfony2.3</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" /><strong>Symfony 2.3 debe estar disponible en Mayo</strong> y como principal característica destacar que será la primera versión <a title="Symfony LTS" href="http://symfony.com/doc/current/contributing/community/releases.html#long-term-support-releases" target="_blank"><strong>LTS</strong> -<em>Long Term Support Releases</em>-</a>, es decir, tendrá un periodo de soporte de 3 años, valor muy superior al de cualquier versión estándar de Symfony, que se sitúa en los 8 meses. Symfony 2.3 no aportará novedades importantes, pero si aportará gran estabilidad y para ello quedan algunas correcciones pendientes:
<ul>
	<li><span style="line-height: 13px;"><a href="https://github.com/symfony/symfony/pull/6069" target="_blank"><strong>RFC "Add simpler customization options"</strong></a> referente a simplificar la configuración de seguiridad.</span></li>
	<li><a href="https://github.com/symfony/symfony/issues/4475" target="_blank"><strong>Bug "the BrowserKit client from FrameworkBundle and HttpKernel don't respect the expected return type"</strong></a> para que FrameworkBundle y HttpKernel devuelvan el mismo tipo.</li>
</ul>
Viendo el éxito que han tenido eventos como el realizado recientemente para <a title="El Symfony2 Docs Hack Day fue todo un éxito" href="/el-symfony2-docs-hack-day-fue-todo-un-exito">mejorar la documentación del framework</a>, <a href="http://symfony.com/blog/symfony-2-3-what-s-next" target="_blank"><strong>Fabien Potencier</strong></a> ha propuesto organizar varios <em>sprints</em> con los siguientes objetivos:
<ul>
	<li><span style="line-height: 13px;">Recopilar las correcciones más importantes pendientes para Symfony 2.3.</span></li>
	<li>Aumentar la comunidad de usuarios para realizar correcciones de bugs.</li>
</ul>
<strong>El primer <em>sprint</em> será el próximo viernes, día 12 de Abril</strong>. Durante los <em>sprints</em>, <a href="http://symfony.com/irc" target="_blank">Fabien estará disponible en el IRC</a> para coordinarlo todo. Si tienes pensada alguna corrección importante, puedes comenzar la discusión <a href="https://groups.google.com/forum/#!forum/symfony-devs" target="_blank"><strong>Symfony mailing-list</strong></a>.

&nbsp;

Freenode: <strong><a href="http://webchat.freenode.net/" target="_blank">Webchat</a></strong>.]]></description>
                <link>/sprints-para-recopilar-las-correcciones-importantes-de-symfony2-3</link>
                <pubDate>Sun, 07 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/sprints-para-recopilar-las-correcciones-importantes-de-symfony2-3</guid>
                                <category>symfony 2.3</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>El Symfony2 Docs Hack Day fue todo un éxito</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />El <strong><a title="Symfony Docs Hack Day 30 marzo 2013" href="/symfony-docs-hack-day-manana-sabado" target="_blank">Symfony2 Docs Hack Day</a></strong>, un <strong>evento realizado con el objetivo de mejorar la documentación de Symfony2</strong>, ha sido todo un éxito. Se celebró el pasado sábado 30 de Marzo y reunió a más de 35 personas en el canal <strong><a title="Cliente Web del IRC Freenode" href="http://webchat.freenode.net/" target="_blank">#symfony-docs</a></strong> en Freenode. Este tipo de eventos son de agradecer porque la documentación del framework es algo a lo que recurrimos todos en mayor o menor medida y que se encuentre actualizada y bien escrita es algo que te puede alegrar el día. Además, esto puede suponer el primer contacto de algunos usuario con la comunidad Symfony, aportando traducciones a otros idiomas o simplemente detectando erratas. Las <strong><a href="http://symfony.com/blog/symfony2-hacks-day-nice-people-hard-work-big-success" target="_blank">cifras que hoy publicó Ryan Weaver</a></strong>, uno de los organizadores del evento, son alentadoras:
<ul>
	<li><span style="line-height: 13px;">Más de 40 <em>pull-requests</em>.</span></li>
	<li>Se han realizado 30 correcciones y se han detectado nuevos errores.</li>
	<li>Buen ambiente en el canal IRC y gente proactiva.</li>
</ul>
Si te has quedado con las ganas de participar en un evento de este tipo, anótate la siguiente fecha: 24 de Mayo. El evento será realizará  durante la <a href="http://portland2013.live.symfony.com/" target="_blank"><strong>Symfony Live Portland</strong></a> y se podrá participar desde cualquier punto del globo.]]></description>
                <link>/el-symfony2-docs-hack-day-fue-todo-un-exito</link>
                <pubDate>Thu, 04 Apr 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/el-symfony2-docs-hack-day-fue-todo-un-exito</guid>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Unit tests sobre métodos protegidos y privados</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-263" alt="unit-tests" src="/assets/wp-content/uploads/2013/03/unit-tests.png" width="80" height="94" />Los test sobre las clases que escribimos son unas de las herramientas más importantes que poseemos como desarrolladores. Gracias a ellos, certificamos que todo funciona tal y como esperamos. Incluso puede llegar a ser mejor práctica crear los test antes de escribir cualquier código, tal y como indica la metodología <a title="Test-driven development" href="http://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas" target="_blank"><em><strong>Test-driven Development</strong> </em>o <em>TDD</em></a> por el acrónimo que forma. Testar a los métodos y propiedades públicas son las tereas habituales y en PHP se suelen realizar con <a href="https://github.com/sebastianbergmann/phpunit/" target="_blank"><strong>PhpUnit</strong></a>. El problema es que en algunas ocasiones, necesitamos comprobar que los métodos privados o protegidos funcionan correctamente y es en estos casos donde encontramos una barrera. Para eliminar esta barrera necesitamos hacer uso de la <a href="http://php.net/manual/es/intro.reflection.php" target="_blank"><strong>API de reflexión que ofrece PHP 5</strong> </a>y para facilitarnos el trabajo, existe un proyecto en <a href="https://github.com/chrismcmacken/phptools/tree/master/friend" target="_blank"><strong>GitHub</strong></a> que aprovecha el concepto de función amiga de C++, aquella función que era externa a una clase pero que tenía permisos para acceder a métodos privados y protegidos.

<!--more-->
<h3>¿Cómo usar la librería?</h3>
Estas funciones amigas forman parte del proyecto <a href="https://github.com/chrismcmacken/phptools" target="_blank"><strong>PhpTools</strong></a> y su uso es sencillo. Lo mejor, como siempre, un ejemplo:
<pre class="prettyprint">class MiClase {
    private $varPrivada = 'privada';

    private function funcionPrivada() {
        return 'función privada';
    }
}

$miClase = new MiClase();

echo $miClase-&gt;varPrivada;  // Genera un "fatal error
// --&gt; Cannot access private property MiClase::$varPrivada"

echo $miClase-&gt;funcionPrivada();  // Genera un "fatal error
// --&gt; Call to private method MiClase::funcionPrivada()"

$friend = new Friend($miClase);

echo $friend-&gt;funcionPrivada();  // $&gt; función privada
echo $friend-&gt;varPrivada;        // $&gt; privada

$friend-&gt;varPrivada = 'nuevo valor';
echo $friend-&gt;varPrivada;        // $&gt; nuevo valor</pre>
Gracias a la clase <code class="prettyprint">Friend</code> creamos un envoltorio que nos permite acceder a funciones y variables privadas. Para evitar conflictos con los nombres de métodos propios de nuestra clase, <code class="prettyprint">Friend</code> solo expone métodos mágicos y algunos métodos con el prefijo <code class="prettyprint">__friend</code>. Ahora, ya podemos usar cualquier <em>assert</em> de PhpUnit.

&nbsp;

GitHub: <a href="https://github.com/chrismcmacken/phptools" target="_blank"><strong>PhpTools</strong></a>.]]></description>
                <link>/unit-tests-sobre-metodos-protegidos-y-privados</link>
                <pubDate>Sun, 31 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/unit-tests-sobre-metodos-protegidos-y-privados</guid>
                                <category>unit test</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Symfony Docs Hack Day mañana sábado</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Mañana Sábado a las 9 de la mañana (9 am Central European Time) tendrá lugar en el canal <strong><a title="Cliente Web del IRC Freenode" href="http://webchat.freenode.net/" target="_blank">#symfony-docs</a></strong> del IRC en <strong>Freenode</strong> un evento para mejorar la documentación de Symfony. Los objetivos:
<ul>
	<li><span style="line-height: 13px;">Revisar la documentación del <em>core</em> y corregir los enlaces rotos y reescribir aquellas partes difíciles de entender o que sean inconsistentes.</span></li>
	<li>Mejorar la documentación de las opciones de configuración.</li>
	<li>Con todo lo anterior, <a href="https://github.com/symfony/symfony-docs/issues?labels=Actionable&amp;page=1&amp;state=open" target="_blank">Crear <em>pull-resquest</em> en el proyecto <strong>Symfony-doc</strong></a> para dar constancia de todos los cambios.</li>
</ul>
Si quieres ayudar a la comunidad Symfony, este puede ser un buen comienzo. No solo puedes realizar correcciones sobre la documentación en inglés. Puedes realizar traducciones a otros idiomas como el español. Mañana, como anfitriones del evento, estarán <a href="https://github.com/weaverryan" target="_blank"><strong>Ryan Weaver</strong></a> y <a href="https://github.com/WouterJ" target="_blank"><strong>Wouter J</strong></a>.

&nbsp;

Más información: <a href="http://symfony.com/blog/symfony-docs-hack-day-needs-you-on-march-30th" target="_blank"><strong>Symfony blog</strong></a>.]]></description>
                <link>/symfony-docs-hack-day-manana-sabado</link>
                <pubDate>Fri, 29 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-docs-hack-day-manana-sabado</guid>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Symfony2 en el corazón de otros framework</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Como programador y entusiasta de Symfony, me encanta ver como crece este proyecto tanto en características como en comunidad. Una de las mejores decisiones que han tomado los desarrolladores de Symfony es la de separar y desacoplar los componentes de forma que puedan ser reutilizados individualmente en otros proyectos fuera de Symfony. Gracias a ello disponemos de <strong>componentes de gran calidad</strong>, hace lo que se espera de ellos y de forma correcta, <strong>con una comunidad de programadores grande que ayuda a mantenerlos</strong>.

<strong>"Don't reinventing the wheel"</strong> es un principio muy importante que nos dice que si algo existe y funciona, hay que reutilizarlo. Es precisamente el razonamiento que ha llevado a grandes proyectos como <a href="http://drupal.org" target="_blank"><strong>Drupal</strong></a> o <a href="https://www.phpbb.com/" target="_blank"><strong>PhpBB</strong></a> y a otros framework como <a title="Laravel framework" href="http://laravel.com/" target="_blank"><strong>Laravel</strong></a> a incluir algunas partes de Symfony2 como parte de su <em>core</em>.

<!--more-->
<h3>PhpBB</h3>
PhpBB es uno de las aplicaciones <a title="Estadísticas de uso de PhpBB - w3techs" href="http://w3techs.com/technologies/details/cm-phpbb/all/all" target="_blank">más extendidas para crear foros</a>. Actualmente se encuentra en la versión 3.x y para la versión 4 se tiene intención de implementar parte de los componentes de Symfony2 tal como se propone en el <a title="RFC Symfony2 en PhpBB" href="https://wiki.phpbb.com/PhpBB4/RFC/Symfony_2" target="_blank"><strong>RFC</strong></a>. Las razones por las que adoptan Symfony2:
<ul>
	<li><span style="line-height: 13px;">PhpBB 4 busca usar como mínomo PHP 5.3. Symfony ha sido reescrito para usar esta versión como mínimo.</span></li>
	<li>Soporte para la <a title="Class Loader - Symfony2" href="http://symfony.com/doc/current/components/class_loader.html" target="_blank">carga automática de clases</a>.</li>
	<li>Symfony2 es un framework con una arquitectura clara y módulos desacoplados.</li>
	<li>Reutilizar componentes como la caché o el logger.</li>
	<li>El <a title="Dependency Injection - Symfony2" href="http://symfony.com/doc/current/components/dependency_injection/introduction.html" target="_blank">Inyector de Dependencias</a> es un componente esencial para desacoplar y tener una buena organización de los objetos.</li>
</ul>
Actualmente, el <a href="https://wiki.phpbb.com/PhpBB4/RFC" target="_blank"><strong>RFC ha sido aceptado</strong></a>. No te pierdas el vídeo de <strong>Fabien Potencier titulado "<a href="http://www.youtube.com/watch?v=VuNFof59A7M" target="_blank">PhpBB4 meets Symfony2</a>" </strong>presentado en Noviembre de 2010.
<h3>Drupal</h3>
<strong>Drupal</strong> es junto con <strong><a href="http://www.joomla.org/" target="_blank">Joomla</a></strong>, el <a title="Uso de los CMS en Internet" href="http://w3techs.com/technologies/overview/content_management/all" target="_blank">CMS de propósito general más usado de Internet</a>. La versión 8 se encuentra actualmente en desarrollo y es en esta en la que se va a comenzar a usar componentes de Symfony2:
<ul>
	<li><span style="line-height: 13px;"><strong>HttpFoundation, HttpKernel</strong> y <strong><strong>ClassLoader</strong></strong> han sido los <a href="http://groups.drupal.org/node/185724" target="_blank">primeros componentes en ser integrados</a>. Gracias al los dos primeros, Drupal podrá hacer frente a la <em><a href="http://groups.drupal.org/wscci" target="_blank">Web Services and Context Core Initiative</a></em>, que pretende proporcionar una API REST para que Drupal y los contenidos sean facilmente integrables.
</span></li>
	<li><strong>Inyector de dependencias</strong> permitirá tener clases desacopladas.</li>
	<li>El <strong>gestor de eventos de Symfony2</strong> -<em>EventDispatcher</em>- inicialmente <a href="http://drupal.org/node/1509164">convivirá con el sistema actual -<em>system hook</em>- hasta Drupal 9</a>. En Drupal 8 <em>EventDispatcher</em> tomará el control en los principales componentes del <em>core</em>.</li>
	<li>El <strong>motor de plantillas Twig</strong> estará incorporado en la versión 8.</li>
	<li>Para almacenar configuraciones, Drupal 8 opta por usar el <strong>formato <a title="Formato YAML" href="http://www.yaml.org/" target="_blank">YAML</a></strong> y para procesarlo utilizará el componente que incorpora Symfony2. El uso de este formato es promovido por la<a href="http://groups.drupal.org/build-systems-change-management/cmi" target="_blank"><em> Config Management Initiative</em></a>.</li>
</ul>
Si quieres ayudar a crear la versión 8 de Drupal, <a href="http://drupal.org/community-initiatives/drupal-core" target="_blank">únete a la comunidad</a>.
<h3>Laravel 4</h3>
<strong>Laravel</strong> es un framework muy joven, lo lanzó <a title="Cuenta Twitter de Taylor Otwell, creador de Laravel" href="https://twitter.com/taylorotwell" target="_blank">Taylor Otwell</a> en Abril de 2011, que nació con el objetivo de realizar desarrollo con elegancia y manteniendo las cosas lo más simples posibles. Como parte de su core, <strong><a href="https://github.com/laravel/laravel/tree/master/laravel/vendor/Symfony/Component" target="_blank">Laravel incorpora el HttpFoundation y el componente Console de Symfony2</a></strong>. Console permite desarrollar potentes aplicaciones de línea de comandos dejando de lado las dificultades, como por ejemplo,  saber el estado en el que quedó la ejecución de un comando.
<h3>Magento</h3>
<strong>Desde la próxima versión 2 de Magento</strong>, una de las aplicaciones líderes en la creación de tiendas online, incorporará soporte para el motor de plantillas <a href="http://twig.sensiolabs.org/" target="_blank"><strong>Twig</strong></a> de Symfony2, <strong><a title="Magento soporta plantillas Twig" href="https://github.com/magento/magento2/commit/3440eaef1268e0ea556ba8e3737cdd2ddf48c449" target="_blank">tal y como se indica en este commit</a>.</strong> El soporte incluye funciones y filters propias de Magento.]]></description>
                <link>/symfony2-en-el-corazon-de-otros-framework</link>
                <pubDate>Wed, 27 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony2-en-el-corazon-de-otros-framework</guid>
                                <category>drupal</category>
                                <category>laravel 4</category>
                                <category>magento</category>
                                <category>phpbb</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Netbeans permitirá renombrar un archivo al renombrar una clase</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-74" alt="netbeans-logo" src="/assets/wp-content/uploads/2013/01/netbeans-logo.png" width="227" height="68" />El desarrollo de <a href="http://netbeans.org/" target="_blank"><strong>Netbeans</strong></a> continúa y el equipo encargado de la evolución del soporte a PHP <a href="https://blogs.oracle.com/netbeansphp/entry/improved_type_renaming" target="_blank">presentó hace unos días</a> una nueva característica que se incluirá en la siguiente versión. <strong>Se trata de permitir renombrar ficheros durante el proceso de refactorización del nombre de una clase</strong>. Las buenas prácticas indican que se debería desarrollar una clase por archivo y que el nombre de la case debe coincidir con el nombre del fichero. Ahora Netbeans facilita el trabajo permitiendo realizar el renombrado de clase y fichero en una sola operación.

Puedes <strong><a href="http://bertram2.netbeans.org:8080/job/PHP-build/" target="_blank">descargar la versión</a></strong> en desarrollo e informar de los errores que encuentres.]]></description>
                <link>/netbeans-permitira-renombrar-un-archivo-al-renombrar-una-clase</link>
                <pubDate>Sat, 23 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/netbeans-permitira-renombrar-un-archivo-al-renombrar-una-clase</guid>
                                <category>netbeans</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Symfony2: organizar de los bundles de un proyecto</title>
                <description><![CDATA[<img class="size-full wp-image-62 alignnone" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Los <em><strong>bundles</strong></em> son un concepto nuevo que aparece con Symfony2 y son una parte muy importante de la filosofía Symfony. Symfony no es solo un framework, que nos facilita las tareas rutinarias, sino que también es una forma de trabajar. Siguiendo su metodología ahorraremos tiempo en implementar un proyecto. <strong>Los bundles son divisiones lógicas de un proyecto</strong>. Se organizan en carpetas con una <a href="http://symfony.com/doc/2.0/cookbook/bundles/best_practices.html#directory-structure" target="_blank">estructura conocida</a>. Aunque podríamos elegir otra, no sería lo mas conveniente si queremos aprovechar todas las facilidades del framework.

<!--more-->

<strong>Antes de crear un nuevo proyecto hay que realizar una buena planificación</strong> por lo que tendríamos que tener claras las entidades del modelo de datos, los bundles en los que se dividirá y las rutas que lo conforman. Con respecto a los bundles, inicialmente es complejo realizar una separación y más cuando puedes tener partes del proyecto dudosas pero por las experiencia acumulada hay algunos bundles que se repiten y esos son los que voy a describir. Por supuesto, esto es meramente orientativo y al final, cada programador toma sus decisiones.
<h3>Estructura base</h3>
<img class="aligncenter size-full wp-image-246" alt="bundles-symfony2" src="/assets/wp-content/uploads/2013/03/bundles-symfony2.png" width="635" height="130" />

<strong>CommonBundle:</strong> es un bundle transversal. Contiene lógica que podría ser usada por cualquier otro bundle. Cosas como utilidades o las <a href="http://twig.sensiolabs.org/" target="_blank">plantillas Twig</a> generales se pueden albergar en el perfectamente. Además, este bundle puede recibir aquellas características que no encajen en ningún otro.

<strong>UserBundle:</strong> alberga todo lo referente al usuario: página de login, alta de nuevos usuarios, dashboard etc...

<strong>StaticBundle:</strong> almacena contenido estático. Simplemente son vistas que cargaremos directamente <a href="http://symfony.com/blog/new-in-symfony-2-2-cache-support-for-static-pages" target="_blank">sin crear un controlador específico</a> ya que lo hace por nosotros Symfony mediante el <em>FrameworkBundle</em>.

<strong>ApiBundle:</strong> si el proyecto publica una API, este bundle almacena todos sus controladores y rutas. La API exponen parte o toda la funcionalidad del proyecto al exterior para que terceros puedan integrarla en sus servicios lo que, sin duda, reportará beneficios al proyecto.

<strong>BackendBundle:</strong> Todo lo relacionado con la administración del proyecto. Normalmente, el acceso al Backend está restringido a usuarios administradores. Por ejemplo. si el proyecto está relacionado con el <em>e-commerce</em>, desde el backend se crearán ofertas, alta de productos etc...

&nbsp;
<h4>ApiBundle</h4>
Las APIs de un proyecto tiene especial importancia y requiere de organizar bien el código. Por lo general, la lógica de negocio es compartida entre los accesos desde la web y los de la API. Ello obliga a implementar la menor lógica posible en los controladores y trasladarla a clases. Mediante el <a title="Inyector de dependencias - Symfony2" href="http://symfony.com/doc/current/components/dependency_injection/introduction.html" target="_blank"><em><strong>Inyector de dependencias</strong></em></a>, tendremos todo lo necesario para llevar a cabo cualquier tarea.

Es probable que algunos/todos de los métodos expuestos requieran autenticación/autorización por lo que es recomendable usar protocolos como <strong><a title="Estándar OAuth" href="http://oauth.net/" target="_blank">OAuth</a></strong>. <strong><a title="OAuth 2.0 en Symfony2" href="https://github.com/FriendsOfSymfony/FOSOAuthServerBundle" target="_blank">FOSOAuthServerBundle</a></strong> permite implementar un servidor OAuth 2.0 que cualquier cliente OAuth puede consumir, incluidos los dispositivos móviles. <a title="OAuth en Android" href="http://developer.android.com/training/id-auth/authenticate.html" target="_blank">Android</a> implementa soporte de serie para este protocolo. En <a title="OAuth en iOS - StackOverflo2" href="http://stackoverflow.com/questions/2901511/iphone-oauth-tutorial" target="_blank">iPhone, mediante librerías externas)</a>. Por último, una API requiere buena documentación, por lo que <a title="Documentación de API REST en Symfony2" href="https://github.com/nelmio/NelmioApiDocBundle" target="_blank"><strong>NelmioApiDocBundle</strong></a> es genial para este propósito.]]></description>
                <link>/symfony2-organizar-de-los-bundles-de-un-proyecto</link>
                <pubDate>Thu, 21 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony2-organizar-de-los-bundles-de-un-proyecto</guid>
                                <category>bundles</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>PHP 5.5: Disponible para probar ZendOptimizerPlus</title>
                <description><![CDATA[<img class="size-full wp-image-51 alignnone" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />El pasado 28 de Febrero anunciamos que PHP 5.5 vendría con las pilas cargadas en cuanto a rendimiento porque <a title="Zend Optimizer+ vendrá integrado en PHP 5.5" href="/zend-optimizer-vendra-integrado-en-php-5-5" target="_blank">incluiría de serie ZendOptimizerPlus</a>, un <em>opcode-cache</em> que hará que la ejecución de script se realice con mayor velocidad. Esta mejoría se debe a que la votación del <a href="https://wiki.php.net/rfc/optimizerplus" target="_blank"><strong>RFC</strong></a> terminó a favor de incluirlo desde la próxima versión de PHP. Pues bien... ayer <a href="http://toys.lerdorf.com/" target="_blank"><strong>Rasmus Lerdorf</strong></a>, creador de PHP, publicó un <em>twit</em> indicando que está disponible para probar el ZendOptimizerPlus:
<blockquote class="twitter-tweet" lang="es">You can start testing today with the new 5.5 cache by installing <a title="http://pecl.php.net/package/ZendOptimizerPlus" href="http://t.co/WjH9JOhl1L">pecl.php.net/package/ZendOp…</a> for PHP 5.2-5.4

— Rasmus Lerdorf (@rasmus) <a href="https://twitter.com/rasmus/status/312681386119159808">15 de marzo de 2013</a></blockquote>
Solo queda <a href="http://pecl.php.net/package/ZendOptimizerPlus" target="_blank">descargarlo</a> (requiere PHP &gt;= 5.2) y probar a ver que tal va...]]></description>
                <link>/php-5-5-disponible-para-probar-zendoptimizerplus</link>
                <pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-5-5-disponible-para-probar-zendoptimizerplus</guid>
                                <category>optimizerplus</category>
                                <category>php 5.5</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Netbeans: Gestión de dependencias mediante Composer</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-74" alt="netbeans-logo" src="/assets/wp-content/uploads/2013/01/netbeans-logo.png" width="227" height="68" />Hace unas semanas que se lanzó la <a title="Download NetBeans" href="http://netbeans.org/downloads/" target="_blank">versión 7.3</a> y el desarrollo continúa con nuevas características para la siguiente versión. En este caso, el equipo de desarrollo del módulo PHP de <strong><a title="Composer en Netbeans" href="https://blogs.oracle.com/netbeansphp/entry/add_project_dependency_via_composer" target="_blank">Netbeans ha añadido el soporte para la gestión de dependencias mediante Composer</a></strong>. Por si no lo conoces aún, <a title="Composer PHP" href="http://getcomposer.org/" target="_blank"><strong>Composer</strong></a> es un gestor de dependencias, una aplicación en la que indicamos que librerías o componentes son necesarios para nuestro proyecto y se encarga de obtenerlas y mantenerlas actualizadas.

Esta nueva característica se encuentra en una implementación muy temprana y es susceptible de mejoras, sobre todo en rendimento. El equipo de desarrollo nos invita a <a href="http://bits.netbeans.org/download/trunk/nightly/latest/" target="_blank"><strong>descargar</strong></a> la versión de desarrollo y <a title="Netbeans bug" href="http://netbeans.org/community/issues.html" target="_blank">comunicar los bug</a> encontrados.

<!--more-->

El funcionamiento es sencillo: En el navegador de proyectos seleccionamos el proyecto y, al obtener las opciones con el botón derecho, encontraremos una llamada "Composer". Desde ella podremos añadir, actualizar, validar etc...

<a href="/assets/wp-content/uploads/2013/03/composer-netbeans-php.png"><img class="aligncenter size-full wp-image-233" alt="composer-netbeans-php" src="/assets/wp-content/uploads/2013/03/composer-netbeans-php.png" width="508" height="433" /></a>]]></description>
                <link>/netbeans-gestion-de-dependencias-mediante-composer</link>
                <pubDate>Wed, 13 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/netbeans-gestion-de-dependencias-mediante-composer</guid>
                                <category>composer</category>
                                <category>netbeans</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>PHP: Invocar funciones anónimas desde una variable</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" /><strong>Las funciones anónimas o <em>closures</em> son funciones que permite crear <em><a title="Función callback - Wikipedia" href="http://es.wikipedia.org/wiki/Callback_(inform%C3%A1tica)" target="_blank">callback</a></em></strong>,  es decir, funciones que se pasa como argumento a otra y se ejecutan dentro de esta última. Se denominan funciones anónimas porque no tienen un nombre por el que hacerles referencia salvo, claro está, que se asignen a un variable.
<pre class="prettyprint">echo <a href="http://php.net/manual/es/function.preg-replace-callback.php" target="_blank">preg_replace_callback</a>('/hola/', function ($coincidencia) {
    return strtoupper($coincidencia[0]);
}, 'hola-mundo');

// Como resultado se obtiene HOLA-mundo</pre>
<!--more-->

En el ejemplo anterior, a la función <a href="http://php.net/manual/es/function.preg-replace-callback.php"><em>preg_replace_callback()</em></a> se le pasa como segundo argumento una función anónima que es invocada tras procesar la expresión regular y a la que como argumento le llegan un array con todas las coincidencias. <strong>Este tipo de funciones están disponibles desde <a href="http://www.php.net/manual/en/class.closure.php" target="_blank">PHP &gt;= 5.3.0</a></strong>. Para crear funciones y pasarlas como argumento en versiones de PHP &gt;= 4.0.1, se debe emplear <a href="http://www.php.net/manual/es/function.create-function.php" target="_blank"><em>create_function()</em></a>:
<pre class="prettyprint">echo <a href="http://php.net/manual/es/function.preg-replace-callback.php" target="_blank">preg_replace_callback</a>('/hola/', create_function ('$coincidencia', 
    'return strtoupper($coincidencia[0]);'), 'hola-mundo');

// Como resultado se obtiene HOLA-mundo</pre>
Las funciones anónimas nos permite generar un código más limpio y ordenado aunque todo esto, al final, depende del programador por lo que conviene usar cada herramienta en el momento adecuado.
<h3>Invocar funciones anónimas desde una variable de clase</h3>
Si ejecutamos el siguiente código obtendremos un error: <code class="prettyprint">Fatal error:  Call to undefined method MyClass::lambda()</code>:
<pre class="prettyprint">class MiClase {
  var $miFuncion;
  function __construct() {
    $this-&gt;miFuncion = function() {echo 'Yo! Symfony';}; // Declaración correcta
  }
}

$obj = new MiClase();
$obj-&gt;miFuncion();</pre>
La declaración de la función anónima es correcta, el problema viene en la ejecución debido a que los <strong>métodos y las propiedades de una clase se encuentran en espacios distintos</strong> lo que permite tener nombres de propiedades y métodos iguales sin que surja ningún problema:
<pre class="prettyprint">$obj-&gt;miFuncion; // Se accede como propiedad
$obj-&gt;miFuncion(); // Se accede como función</pre>
Disponemos de <strong>varias alternativas</strong> para invocar la función anónima asignada a una propiedad de clase:
<h4>Asignar nuestra función a una variable local</h4>
<pre class="prettyprint">class MiClase {
  public $miFuncion;
  function __construct() {
    $this-&gt;miFuncion = function() {echo 'Yo! Symfony';}; // Declaración correcta
  }
}

$obj = new MiClase();
$miFuncion = $obj-&gt;miFuncion;
$miFuncion();</pre>
<h4>Método mágico __invoke():</h4>
El método <a href="http://www.php.net/manual/en/language.oop5.magic.php#object.invoke" target="_blank"><em><strong>__invoke()</strong> </em></a>es un <em>magic method</em> de PHP que se emplea al llamar a métodos como funciones. Las funciones anónimas son instancias de <a href="http://www.php.net/Closure" target="_blank"><em><strong>Closure</strong></em></a> y este implementa el método <em>__invoke() </em>por lo que podemos usarlo directamente:
<pre class="prettyprint">class MiClase {
  public $miFuncion;
  function __construct() {
    $this-&gt;miFuncion = function() {echo 'Yo! Symfony';}; // Declaración correcta
  }
}

$obj = new MiClase();
$obj-&gt;miFuncion-&gt;__invoke();</pre>
<h4>Mediante call_user_func()</h4>
El método <a href="http://www.php.net/manual/en/function.call-user-func.php" target="_blank"><em>call_user_func()</em></a> está disponible desde PHP &gt;= 4.0 y permite invocar la función pasada como argumento:
<pre class="prettyprint">class MiClase {
  public $miFuncion;
  function __construct() {
    $this-&gt;miFuncion = function() {echo 'Yo! Symfony';}; // Declaración correcta
  }
}

$obj = new MiClase();
call_user_func($obj-&gt;miFuncion);</pre>
Si añadimos un segundo parámetro a <em>call_user_func</em> se pasará como argumento a <em>miFuncion</em> aunque en este caso no es necesario. Emplearemos <em><a href="http://www.php.net/manual/en/function.call-user-func-array.php" target="_blank">call_user_func_array()</a></em> en lugar de la anterior si deseamos pasar más de un parámetro como argumento. Ten en cuenta que siempre se pasan por referencia.
<h4>Mediante la método mágico __call()</h4>
Mediante el siguiente patrón logramos poder llamar directamente a nuestra función anónima:
<pre class="prettyprint">class MiClase {
  private $miFuncion;
  function __construct() {
    $this-&gt;miFuncion = function() {echo 'Yo! Symfony';}; // Declaración correcta
  }

  public function __call($nombre, $argumentos)
  {
    return call_user_func_array($this-&gt;$nombre, $argumentos);
  }
}

$obj = new MiClase();
$obj-&gt;miFuncion(); // Ahora si podemos llamar directamente</pre>
<h4>Mediante Traits</h4>
Los <em><strong><a href="http://php.net/manual/es/language.oop5.traits.php" target="_blank">Traits</a></strong>,</em> disponibles desde PHP &gt;= 5.4, <strong>nos van a permitir encapsular el  <em>__call()</em> anterior y reutilizarlo en cualquier clase</strong>:
<pre class="prettyprint">trait FuncionAnonima
{
  public function __call($nombre, $argumentos)
  {
    return call_user_func_array($this-&gt;$nombre, $argumentos);
  }
}

class MiClase {
  use FuncionAnonima;
  private $miFuncion;
  function __construct() {
    $this-&gt;miFuncion = function() {echo 'Yo! Symfony';}; // Declaración correcta
  }
}

$obj = new MiClase();
$obj-&gt;miFuncion(); // Ahora si podemos llamar directamente</pre>
&nbsp;

PHP: <strong><a title="Operador this en closures - PHP" href="http://www.php.net/manual/en/functions.anonymous.php#97906" target="_blank">Uso del operador</a><a title="Operador this en closures - PHP" href="http://www.php.net/manual/en/functions.anonymous.php#97906" target="_blank"> <em>$this</em> en closures (PHP &gt;=</a><a title="Operador this en closures - PHP" href="http://www.php.net/manual/en/functions.anonymous.php#97906" target="_blank"> 5.4.0)</a></strong>.]]></description>
                <link>/php-invocar-funciones-anonimas-desde-una-variable</link>
                <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-invocar-funciones-anonimas-desde-una-variable</guid>
                                <category>closures</category>
                                <category>funciones anónimas</category>
                                <category>traits</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>PHP y el compilador JIT</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Hoy he leído una <a href="http://marc.info/?l=php-internals&amp;m=135397984203784&amp;w=2" target="_blank">interesante discusión en la <em>Internals list</em> de PHP sobre incluir un compilador JIT como parte del núcleo de PHP</a> para transformar los <em>bytescodes</em> de los script a código nativo de la máquina en la que se ejecuta. Esto conllevaría una mejora de rendimiento, como la que obtiene Facebook con <strong><a href="http://www.facebook.com/note.php?note_id=10150415177928920" target="_blank">HHVM</a></strong> -<em>HipHop Virtual Machine</em>-.

<!--more-->

La discusión comienza cuando un usuario sugiere que sería muy interesante incluir en el núcleo de PHP un compilador al estilo HHVM para mejorar el rendimiento. Inmediatamente contesta <a title="Twitter de Rasmus Lerdorf" href="https://twitter.com/rasmus" target="_blank">Rasmus Lerdorf</a>, creador de PHP, que HHVM no sería la solución más adecuada sino que la mejor aproximación sería un compilador basado en <strong><a href="http://es.wikipedia.org/wiki/LLVM" target="_blank">LLVM</a> </strong>-<em>Low Level Virtual Machine</em>-. Tras varias contestaciones, incluidas las de <a href="http://www.linkedin.com/in/pollita" target="_blank">Sara Golemon</a>, ingeniera de Facebook, se concluye que HHVM no es la mejor opción puesto que se trata de una reimplementación completa de PHP y no podría unirse al núcleo. La <a href="http://marc.info/?l=php-internals&amp;m=135431422317954&amp;w=2" target="_blank">solución aportada por Sara Golemon</a> consiste en adjuntar el compilador JIT como una extensión e interceptar la función <em>zend_compile_file</em>, al estilo de APC, para realizaría el paso de <em>bytescodes</em> a código nativo durante la primera ejecución. El resto de ejecuciones invocarían al compilador JIT que lanzaría el código compilado.

Incluir mecanismo de este tipo es una <a href="http://www.facebook.com/pages/HipHop/112018472149183?rf=113384742005644#" target="_blank">petición muy generalizada</a> a muchos usuarios de PHP y es que, si bien PHP en consola es realmente rápido, cuando interactúa con con  el servidor para resolver peticiones merma un poco en rendimiento. Esto es lo que ha llevado a Facebook, una red social desarrollada, en su mayor parte en PHP, a buscar alternativas que permitan ganar en velocidad.

&nbsp;

GitHub: <a href="https://github.com/facebook/hiphop-php/wiki" target="_blank"><strong>HipHop de Facebook</strong></a>.

GitHub: <strong><a href="https://github.com/preillyme/llvm" target="_blank">LLVM para PHP</a></strong>. (Es una primera aproximación y tiene mucho que mejorar)

LLVM: <strong><a title="LLVM Developer Group" href="http://llvm.org/" target="_blank">Developer Group</a></strong>.

YoSymfony: <strong><a title="PHP: Escalabilidad y rendimiento" href="/php-escalabilidad-y-rendimiento" target="_blank">Escalabilidad y rendimiento en PHP</a></strong>.]]></description>
                <link>/php-y-el-compilador-jit</link>
                <pubDate>Sat, 09 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-y-el-compilador-jit</guid>
                                <category>compilador jit</category>
                                <category>hhvm</category>
                                <category>llvm</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Guía de estilos de Symfony2</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />La guía de estilos de Symfony2 describe la forma de escribir el código de <em>bundles</em> y proyectos basados en Symfony framework para hacerlo más conciso y predecible. Esto toma mayor importancia cuando realizamos <em>bundles</em> que distribuimos a terceros o queremos <a href="http://symfony.com/doc/current/contributing/index.html" target="_blank">contribuir a mejorar el núcleo del framework</a>. Las convenciones seguidas por Symfony siguen los estándar <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md" target="_blank">PSR-0</a>, <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md" target="_blank">PSR-1</a> y <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md" target="_blank">PSR-2</a> de PHP.

<!--more-->
<h3>Convenciones de la estructura del código</h3>
<ul>
	<li><span style="line-height: 13px;">Añade un <strong>espacio después de cada delimitador coma</strong> ','</span>
<pre class="prettyprint">substr($dummy, 0, 5);</pre>
</li>
	<li>Añade un <strong>único espacio a ambos lados de un operador</strong>: =, ==, &amp;&amp; etc...
<pre class="prettyprint">if($variable == true)</pre>
<pre class="prettyprint"> $variable == true ? 'si' : 'no';</pre>
</li>
	<li>En los<strong> array multilínea, añade una coma al final de cada elemento</strong>, incluido el último:
<pre class="prettyprint">$array = Array(
    'elemento1' =&gt; 'valor1',
    'elemento2' =&gt; 'valor2', // coma final
);</pre>
</li>
	<li>Añade un <strong>salto de línea antes de una sentencia <em>return</em> a menos que el <em>return</em> se encuentre solo en un bloque de sentencias</strong>, como por ejemplo <em>if</em>:
<pre class="prettyprint">class MiClase
{
    public function miFuncion()
    {
        $salida = false;
                       // salto de línea
        return $salida;
    }
}</pre>
<pre class="prettyprint">class MiClase
{
    public function miFuncion()
    {
        $salida = false;

        if($salida == true)
        {
            return $salida; // Solo en un bloque de sentencias {...}
        }

        return $salida;
    }
}</pre>
</li>
	<li>Usa las <strong>llaves para delimitar los bloques de código</strong>, con independencia del número de sentencias que contengan:
<pre class="prettyprint">// Correcto:
if(true)
{
    miFuncion();
}

// Mal:
if(true)
    miFuncion();</pre>
</li>
	<li><strong>Define una clase por archivo</strong>. Esto no tiene porque aplicarse a clases privadas auxiliares que solo se instancian desde una clase.</li>
	<li>Las <strong>variables de una clase se declaran antes que los métodos</strong>.</li>
	<li>Los <strong>métodos se declaran en el siguiente orden: <em>public</em>, <em>protected</em> y <em>private</em></strong>.</li>
	<li>Usa <strong>paréntesis al instanciar las clases, independientemente del número de argumentos</strong>:
<pre class="prettyprint">$a = new MiClase(); // Bien

$a = new MiClase; // Mal</pre>
</li>
</ul>
<h3>Convenciones de Nombres</h3>
<ul>
	<li>El <strong>nombre de las clases se realiza en <a href="http://es.wikipedia.org/wiki/CamelCase" target="_blank"><em>UpperCamelCase</em></a></strong>, es decir, que comienza por mayúscula.</li>
	<li><span style="line-height: 13px;">Usa notación <a title="Escritura camelCase - Wikipedia" href="http://es.wikipedia.org/wiki/CamelCase" target="_blank"><em><strong>camelCase</strong></em></a> sin guiones bajos en <strong>variables, funciones, métodos y argumentos</strong>.</span></li>
	<li>Usa el g<strong>uión bajo para los nombres de opciones, y nombres de parámetros</strong>.</li>
	<li>Todas las clases deben llevar <em>namespace</em>.</li>
	<li>Las <a title="Clase abstracta - PHP" href="http://php.net/manual/es/language.oop5.abstract.php" target="_blank"><em>clases abstractas</em></a> deben llevar el <strong>prefijo Abstract</strong>.</li>
	<li>Las <a title="Interfaces - PHP" href="http://www.php.net/manual/es/language.oop5.interfaces.php" target="_blank"><em>interfaces</em></a> deben llevar el <strong>sufijo Interface</strong>.</li>
	<li>Los <a title="Utilidades de los Traits de PHP" href="http://lennyvpg.wordpress.com/2012/12/29/herencia-multiple-en-php/" target="_blank"><em>traits</em></a> (PHP &gt;= 5.4) deben llevar el <strong>sufijo Trait</strong>.</li>
	<li>Las <a title="Exceptiones - PHP" href="http://www.php.net/manual/es/language.exceptions.php" target="_blank"><em>excepciones</em></a> deben tener el <strong>sufijo Exception</strong>.</li>
	<li>Los nombres de fichero usan caracteres alfanuméricos y guiones bajos.</li>
</ul>
<h3>Documentación del código</h3>
<ul>
	<li><span style="line-height: 13px;">Añade <a title="Documentación de PHPDoc [eng]" href="http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_phpDocumentor.howto.pkg.html#basics.docblock" target="_blank"><em>PHPDoc blocks</em> </a>a todas las clases, funciones y métodos.</span></li>
	<li>No usar la etiqueta <em>@return</em> si un método no devuelve nada.</li>
	<li>No se deben usar las siguientes etiquetas: <em>@package</em> y <em>@subpackage</em>.</li>
</ul>
&nbsp;
<h3>Convenciones para el Core de Symfony2</h3>
Hasta ahora hemos descrito la guía de estilos para <em>bundles</em> y proyectos basados en Symfony2. A continuación, añadimos más convenciones para aquellos que se animen a colaborar con el desarrollo del <em>framework</em>:

Para relacionar objetos existe una convención de nombres que nos facilita la comprensión de las relaciones. Cuando hay una relación 1:n, y esta relación se considera como principal se usan los siguientes nombres de métodos:
<pre class="prettyprint">get()
set()
has()
all()
remove()
clear()
isEmpty()
add()
register()
count()
keys()</pre>
El concepto de "relación principal" puede ser un poco confuso y lo mejor es da un ejemplo:
un contenedor de <em>cookies</em> tiene muchos objetos <em>cookie</em>.

En la <a href="http://symfony.com/doc/current/components/console/introduction.html#using-command-arguments" target="_blank">consola de Symfony2</a>, podemos crear un comando que recibirá argumentos y opciones. El objeto <em>input</em> que recibe el método <em>execute</em> no es una "relación principal" por lo que no se le aplica la convención anterior.  Para todas aquellas relaciones que no encajen en el caso anterior se emplean la siguiente convención de nombres:
<pre class="prettyprint">getXXX()
setXXX()  // Puede reemplazar o añadir un elemento.
replaceXXX() // No puede añadir un nuevo elemento. Si no existe genera excepción.
hasXXX()
getXXXs()
setXXXs() 
removeXXX()
clearXXX()
isEmptyXXX()
addXXX()
registerXXX()
countXXX()</pre>
&nbsp;

Documentación: <strong><a href="http://symfony.com/doc/current/contributing/code/standards.html" target="_blank">Conding standards</a></strong> | <strong><a href="http://symfony.com/doc/current/contributing/code/conventions.html" target="_blank">Convenciones del núcleo de Symfony</a></strong>]]></description>
                <link>/guia-de-estilos-de-symfony2</link>
                <pubDate>Wed, 06 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/guia-de-estilos-de-symfony2</guid>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Eventos PHP: Marzo 2013</title>
                <description><![CDATA[Estrenamos nuevo mes y eso significa nuevas conferencias. Tras finalizar un intenso Febrero en el que se han celebrado la importantísima <a href="http://confoo.ca/en" target="_blank">Confoo Conference</a> o la <a href="http://phpconference.co.uk/" target="_blank">PHP UK Conference</a> toca poner la atención en un nuevo mes. A continuación mostramos los principales eventos para este mes relacionados con la comunidad PHP:

<!--more-->
<h3>Midwest PHP Conference</h3>
<div class="row">
<div class="span2"><img class="alignnone size-full wp-image-211" alt="Midwestphp-logo" src="/assets/wp-content/uploads/2013/03/midwestphp-logo.png" width="131" height="136" /></div>
<div class="span7">Los <strong>días 2 y 3</strong> (se que llego tarde para anunciar este evento) se ha celebrado la <strong><a href="http://www.midwestphp.com/" target="_blank">Midwest PHP</a></strong> en la <strong><a href="http://www.midwestphp.com/venue" target="_blank">University of Minnesota Continuing Education Conference Center</a>. </strong>Han sido dos días cargados de mucho conocimiento en los que se ha hablado de <a href="http://www.midwestphp.com/sessions" target="_blank">Symfony, PHP, aplicaciones testables, Wordpress, MySQL o MongoDB</a>. Para estar al día sobre las futuras ediciones, tienes la cuenta Twitter: <a href="https://twitter.com/midwestphp">@<b>midwestphp</b></a> y el hashtag <a dir="ltr" href="https://twitter.com/search?q=%23midwestphp&amp;src=hash" rel="tag" data-query-source="hashtag_click">#<b>midwestphp</b></a>.</div>
</div>
<h3>PHPNE Conference</h3>
<div class="row">
<div class="span2"><img class="alignnone size-full wp-image-212" alt="phpne-logo" src="/assets/wp-content/uploads/2013/03/phpne-logo.png" width="215" height="82" /></div>
<div class="span7">El <strong>día 19</strong> tendrá lugar la<strong> <a href="http://conference.phpne.org.uk/" target="_blank">PHP North East Conference</a></strong> (<a href="http://twitter.com/phpne">@phpne</a>) se celebra en el <a href="http://conference.phpne.org.uk/venue/" target="_blank"><strong>"Tyneside Cinema" de Newcastle</strong></a> y habrá ponencias sobre <em>Silex microframework</em> a cargo de <a href="https://twitter.com/igorwesome" target="_blank">Igor Wiedler</a> y modernización de aplicaciones PHP mediante la migración a Symfony2 impartida por <a href="http://conference.phpne.org.uk/schedule/#fabrice" target="_blank">Fabrice Bernhard</a>. Si quieres estar al día sobre el evento tienes la cuenta Twitter <a href="http://twitter.com/phpne">@phpne</a> y el hashtag oficial <a href="https://twitter.com/#!/search/%23phpne13">#phpne13</a>.</div>
</div>
<h3>PHP Summit</h3>
<div class="row">
<div class="span2"><img class="alignnone size-full wp-image-213" alt="phpsummit-logo" src="/assets/wp-content/uploads/2013/03/phpsummit-logo.png" width="129" height="75" /></div>
<div class="span7">Los <strong>días 18 al 20</strong> se celebra la <strong><a href="http://php-summit.de/" target="_blank">PHP</a><a href="http://php-summit.de/" target="_blank"> Summit</a></strong> en <a href="http://php-summit.de/2013spring/location/" target="_blank">Múnich</a> aunque el idioma principal es el Alemán por lo que si te desenvuelves con el y te encuentras cerca no dudes en asistir. Como ponentes destacados estarán <a href="http://php-summit.de/2013spring/trainer/#667">Sebastian Bergmann</a>, creador de <a href="https://github.com/sebastianbergmann/phpunit/" target="_blank">PHPUnit</a>, <a href="http://php-summit.de/2013spring/trainer/#937" target="_blank">Arne Blankerts</a> y <a href="http://php-summit.de/2013spring/trainer/#2025" target="_blank">Stefan Priebsch</a>, ambos <em>co-fundadores</em> de <a href="http://thephp.cc/">thePHP.cc</a>.</div>
</div>]]></description>
                <link>/eventos-php-marzo-2013</link>
                <pubDate>Mon, 04 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/eventos-php-marzo-2013</guid>
                                <category>midwestphp</category>
                                <category>phpne</category>
                                <category>phpsummit</category>
                                                <category>Eventos</category>
                            </item>
                    <item>
                <title>Disponible Symfony 2.2</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" />Tras 6 meses de duro trabajo (no hay más que ver las cifras del <a href="http://symfony.com/blog/symfony-2-2-0#numbers" target="_blank">post en el blog de Symfony</a>), la <a title="Disponible Symfony 2.2" href="http://symfony.com/blog/symfony-2-2-0" target="_blank"><strong>versión 2.2  de Symfony ya está disponible</strong></a>, versión cuyo objetivo es estabilizar las características esenciales del framework además servir de puente para la versión 2.3 que estará terminada a finales del mes de Mayo y que será de tipo LTS -<em>Long term support</em> - con soporte hasta 2014. Es importante destacar que a partir de la próxima 2.3, los lanzamientos se realizarán en base al tiempo (como lo hace <a href="https://wiki.ubuntu.com/ReleaseSchedule" target="_blank">Ubuntu</a> o <a href="https://wiki.mozilla.org/Features/Release_Tracking" target="_blank">Firefox</a>) y no en base a características.

<!--more-->
<h3>Mejoras de <strong>Symfony 2.2</strong>:</h3>
En el <em><strong>FrameworkBundle</strong></em> se ha mejorado el <a href="http://symfony.com/blog/new-in-symfony-2-2-functional-tests-speed-up" target="_blank">rendimiento de las pruebas funcionales</a> deshabilitando el <em>profiler</em> por defecto. Ahora si lo necesitas en alguna prueba, simplemente lo habilitas. Este bundle también nos proporciona la posibilidad de <a href="http://symfony.com/blog/new-in-symfony-2-2-cache-support-for-static-pages" target="_blank">crear páginas estáticas sin tener que crear un controlador asociado</a> a cada una. A estas páginas se le puede configurar un mecanismo de caché.

Para las páginas de comercio electrónico o simplemente aquellas que dispongan de algún tipo de sistema de pago para lo que sea, <a href="http://symfony.com/blog/new-in-symfony-2-2-payment-related-validators" target="_blank">Symfony 2.2 incluye un <strong>nuevo tipo de <em>validador</em> de números de tarjeta de crédito</strong></a> mediante el <a title="Algoritmo de Luhn - Wikipedia" href="http://es.wikipedia.org/wiki/Algoritmo_de_Luhn" target="_blank">algoritmo <em>Luhn</em></a>.

El <em><strong>router</strong></em> ahora permite generar <a href="http://symfony.com/blog/new-in-symfony-2-2-new-url-generation-options" target="_blank">direcciones relativas</a> al esquema: <code class="prettyprint">//ejemplo.org/blog/la-pagina</code> y relativas al path: <code class="prettyprint">../ (path relativo de la URL)</code>. Ahora el <em>router</em> permite especificar los <a href="http://symfony.com/blog/new-in-symfony-2-2-url-host-support-in-the-routing" target="_blank">dominios y subdominios en los que actua una ruta</a>, característica muy demandada por los usuarios.

El <strong><em>HttpKernel</em></strong> ahora dispone de un nuevo <a title="El nuevo sub-framework encargado de gestionar fragmentos de contenido" href="/el-nuevo-sub-framework-encargado-de-gestionar-fragmentos-de-contenido" target="_blank"><em>sub-framework</em> para los fragmentos de presentación</a>. Otra característica interesante es que ahora Symfony nos informa en la barra de depuración sobre las llamadas y las instancias que hacemos <a href="http://symfony.com/blog/new-in-symfony-2-2-logging-of-deprecated-calls" target="_blank">sobre funciones y clases marcadas como <em>deprecated</em> del framework</a>.

El <strong><em>Finder</em></strong> mejora en <a href="https://gist.github.com/jfsimon/3230139" target="_blank">rendimiento</a> e incluye soporte de <em>globs</em> en funciones como <em><a href="http://symfony.com/blog/new-in-symfony-2-2-finder-improvements#glob-support-for-the-in-method" target="_blank">in()</a>,</em> que restringe las operaciones de búsqueda a los directorios pasados como argumento y <a href="http://symfony.com/blog/new-in-symfony-2-2-finder-improvements#filter-by-path" target="_blank">filtros por path</a>.

Respecto a la<strong> <a href="http://symfony.com/blog/new-in-symfony-2-2-security-utilities" target="_blank">seguridad</a></strong> la versión 2.2 incluye un generador de números aleatorios seguros y un comparador de cadenas ideal para evitar <em><a href="http://en.wikipedia.org/wiki/Timing_attack">Timing attacks</a> </em>al comparar password.

Por último, la parte de <strong>consola</strong> también recibe mejoras como el <a href="http://symfony.com/blog/new-in-symfony-2-2-autocomplete-on-the-command-line" target="_blank">autocompletar</a>, la <a href="http://symfony.com/blog/new-in-symfony-2-2-better-interaction-from-the-console#displaying-a-progress-bar-for-long-running-tasks" target="_blank">barra de progreso</a> o <a href="http://symfony.com/blog/new-in-symfony-2-2-better-interaction-from-the-console#hiding-passwords-given-from-the-cli" target="_blank">evitar que un password esté legible cuando lo introducimos</a>.]]></description>
                <link>/disponible-symfony-2-2</link>
                <pubDate>Fri, 01 Mar 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/disponible-symfony-2-2</guid>
                                <category>symfony 2.2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Zend Optimizer+ vendrá integrado en PHP 5.5</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Es muy probable que veamos el <a title="Zend OptimizerPlus Source Code - Github" href="https://github.com/zend-dev/ZendOptimizerPlus/" target="_blank"><strong><em>Optimizer+</em> de Zend</strong></a> <strong>en la próxima versión de PHP</strong> según los resultados temporales de la votación al <strong><a title="RFC OptimizerPlus [eng] - PHP" href="https://wiki.php.net/rfc/optimizerplus" target="_blank">RFC</a></strong> que describe la propuesta. En la votación hay varias opciones y por el momento, la <em>"Integrate into 5.5, even if minor delay required"</em> es la más votada. Si finaliza la votación de este modo, PHP 5.5 vendrá con <em>Zend Optimizer+</em> aunque tenga un pequeño retraso. La siguiente opción más votada por la comunidad es integrar el componente en PHP 5.5 solo la fecha de lanzamiento de la versión no sufre retrasos. En caso contrario dejarlo para la 5.6  y ya estaríamos hablando de mediados de 2014.

<!--more-->

<em><strong>Zend Optimizer+</strong></em> es un <a title="PHP Opcodes cache o PHP accelerator - Wikipedia" href="http://es.wikipedia.org/wiki/PHP_accelerator" target="_blank"><em>opcodes cache</em></a>, una <strong>aplicación que aumenta el rendimiento del los script PHP evitando compilaciones innecesarias a código intermedio</strong> para ser ejecutado por el intérprete del lenguaje. Hasta hace menos de un mes, el código fuente de <em>Optimizer+</em> no era software libre aunque se podía usar libremente en proyectos, pero ahora, como parte de este RFC, Zend lo ha liberado bajo la <a title="Licencia PHP - Wikipedia" href="http://es.wikipedia.org/wiki/Licencia_PHP" target="_blank"><strong>licencia PHP</strong></a> para no tener problemas de integración con otros componentes del lenguaje.

Además de <em>Zend Optimizer</em>, existen otros <i>Opcodes Cache </i>como <em><a href="http://php.net/manual/es/book.apc.php" target="_blank"><strong>APC</strong></a></em> o <em><strong>xCache</strong></em>. <em>APC</em> es el más conocido y sobre él se ha realizado el <strong><a title="Optimizer+ vs APC" href="http://bit.ly/Y6CZd1" target="_blank"><em>benchmarks Optimizer+</em> vs <em>APC</em> </a> </strong>que nos deja interesantes resultados. En términos generales, <em>Optimizer+</em> se comporta mucho mejor que <em>APC</em> en número de peticiones/segundo donde obtiene una ganancia de entre un 5 y un 20%.

La gran ventaja de <em>Zend Optimizer+</em> es el rendimiento pero <em>APC</em> también presenta características que no incluye <em>Optimizer+</em> como la caché de datos o la reutilización de partes de memoria en desuso; <em>Zend Opetimizer+</em> funciona de otra manera ya que no reclama el espacio en desuso y se reinicia cuando el total de memoria no usada sobrepasa un nivel configurable.

&nbsp;

Vota el <a href="https://wiki.php.net/rfc/optimizerplus" target="_blank"><strong>RFC</strong></a>.]]></description>
                <link>/zend-optimizer-vendra-integrado-en-php-5-5</link>
                <pubDate>Thu, 28 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/zend-optimizer-vendra-integrado-en-php-5-5</guid>
                                <category>optimizer+</category>
                                <category>php 5.5</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>deSymfony 2013 ya tiene fecha y lugar</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-41" alt="desymfony" src="/assets/wp-content/uploads/2013/01/desymfony.png" width="273" height="76" />La edición 2013 de <a href="http://desymfony.com/" target="_blank"><strong>deSymfony</strong></a>, uno de los grandes eventos sobre <a href="http://symfony.com" target="_blank"><em>Symfony framework</em></a> en español, ya tiene fecha y lugar. <strong>Será en Madrid, del 21 al 23 de Junio en la <a title="¿Cómo llegar a deSymfony 2013?" href="http://desymfony.com/localizacion" target="_blank">Universidad Politécnica</a></strong>. El evento anunció su periodo de <a title="deSymfony 2013 abre el periodo de inscripción para ponentes" href="/desymfony-2013-abre-el-periodo-de-inscripcion-para-ponentes-2" target="_blank"><em>call for paper</em> </a>el pasado 26 de Enero y durará hasta el 15 de Marzo, mes en el que se anunciará el programa completo de ponentes y ponencias y se pondrán a la venta las entradas.

<!--more-->

Si  desarrollas aplicaciones con <em>Symfony framework</em> no deberías perder la oportunidad de presentar una ponencia por la visibilidad que supone para ti y tu/s proyecto/s. <strong>deSymfony</strong> es un evento al que <strong>acuden más de 350 asistentes</strong> y es el lugar ideal para que empresas y reclutadores vean tu talento.

&nbsp;

<strong>Web del evento</strong>: <a href="http://desymfony.com/" target="_blank">desymfony.com</a>

<strong>Ponencias anteriores</strong>: <a href="http://www.youtube.com/user/desymfony" target="_blank">Vídeos</a> | <a title="Presentaciones deSymfony 2012 - Slideshow" href="http://www.slideshare.net/search/slideshow?q=desymfony+2012" target="_blank">Presentaciones</a>]]></description>
                <link>/desymfony-2013-ya-tiene-fecha-y-lugar</link>
                <pubDate>Wed, 27 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/desymfony-2013-ya-tiene-fecha-y-lugar</guid>
                                <category>desymfony</category>
                                                <category>Eventos</category>
                            </item>
                    <item>
                <title>El nuevo sub-framework encargado de gestionar fragmentos de contenido</title>
                <description><![CDATA[<img class="alignnone  wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="179" height="51" />Hoy se ha presentado en el blog de Symfony un nuevo<strong><a href="http://symfony.com/blog/new-in-symfony-2-2-the-new-fragment-sub-framework" target="_blank"> <em>sub-framework </em>para gestionar de forma más eficiente y desacoplada los fragmentos de contenido</a></strong> en plantillas Twig. Estos fragmentos no son más que partes de una plantilla cuyo contenido es resultado de renderizar la plantilla asociada a la acción de un controlador. Como parte de las refactorizaciones que se están llevando a cabo en la versión 2.2, se ha ha creado el <em>fragment sub-framework</em>, que es parte del <a title="Symfony2 HttpKernel" href="https://github.com/symfony/HttpKernel" target="_blank"><em>HttpKernel</em></a>, y a el se ha movido la lógica que antes se situaba en el <a title="Symfony2 FrameworkBundle" href="https://github.com/symfony/FrameworkBundle" target="_blank"><em>FrameworkBundle</em></a>.

<!--more-->

Con todo  esto se ha conseguido:
<ul>
	<li>La gestión de fragmentos de contenido está más desacoplada y es más<strong> fácil de integrar en proyectos como <a href="http://drupal.org" target="_blank">Drupal</a></strong>.</li>
	<li>Se ha mejorado la legibilidad de código sustituyendo el parámetro <em>standalone</em> por <em>strategy</em> en la función <em>render()</em>:
<pre class="prettyprint">{# ANTES #}
{# Usando la estratégia sub-request #}
{{ render(url('route_name')) }}

{# Usando la estratégia ESI - Edge Side Includes #}
{{ render(url('route_name', { strategy: 'esi' })) }}

{# Usando la estratégia HInclude tag via a regular URL #}
{{ render(url('route_name', { strategy: 'hinclude' })) }}

{# AHORA #}
{# Usando la estratégia sub-request #}
{{ render(url('route_name')) }}

{# Usando la estratégia ESI - Edge Side Includes #}
{{ render(url('route_name', { standalone: 'esi' })) }}

{# Usando la estratégia HInclude #}
{{ render(url('route_name', { standalone: 'hinclude' })) }}</pre>
Además, ahora el código puede ser más bonito porque se han creado funciones para cada estratégia:
<pre class="prettyprint">{# sub-request interno resuelta por Symfony#}
{{ render(url('route_name')) }}

{# Usando la estratégia ESI - Edge Side Includes #}
{{ render_esi(url('route_name')) }}

{# Usando la estratégia HInclude #}
{{ render_hinclude(url('route_name')) }}</pre>
</li>
	<li>Como la referencia a los fragmentos se realiza por rutas absolutas, el <em>fragment sub-framework</em> no depende del gestor de rutas:
<pre class="prettyprint">{# Fragmento referenciado mediante URL #}
{{ render(url('route_name')) }}</pre>
</li>
	<li>Ahora se pueden emplear, mediante la<em> notación bundle</em>, la refetencia a fragmentos usando los controladores:
<pre class="prettyprint">{# Fragmento referenciado mediante un controlador #}
{{ render(controller('Bundle:controlador:action')) }}</pre>
</li>
</ul>
&nbsp;

<strong>Profundizar más:</strong>

<a title="Usar ESI en Symfony2" href="http://symfony.com/doc/current/book/http_cache.html#using-esi-in-symfony2" target="_blank">El ESI en Symfony2</a>

<a href="http://www.w3.org/TR/esi-lang" target="_blank">ESI Language Specification 1.0</a>
]]></description>
                <link>/el-nuevo-sub-framework-encargado-de-gestionar-fragmentos-de-contenido</link>
                <pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/el-nuevo-sub-framework-encargado-de-gestionar-fragmentos-de-contenido</guid>
                                <category>desymfony</category>
                                <category>symfony 2.2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Las nuevas características de PHP 5.5</title>
                <description><![CDATA[<img src="/assets/wp-content/uploads/2013/01/php-logo.png" alt="php-logo" width="123" height="74" class="alignnone size-full wp-image-51" />El pasado 21 de Febrero se lanzó <strong><a title="PHP 5.5.0 Alpha 5 - PHP" href="http://php.net/archive/2013.php#id2013-02-21-2" target="_blank">PHP 5.5.0 Alpha5</a></strong> y creo que es un buen momento para comentar algunas de las novedades que traerá esta nueva versión. Novedades que van desde crear <em>iteradores</em> de forma más sencilla hasta una nueva API para el <em>hashing</em> de password.

<!--more-->
<h3>Construir <em>iteradores</em> más sencillos</h3>
Con el fin de crear iteradores de forma sencilla y rápida, nace el <a href="http://www.php.net/manual/en/language.generators.overview.php" target="_blank"><strong><em>Generators</em></strong></a>, que nos permite construir iteradores mediante bucles sin tener que escribir los métodos de la interfaz <em><a href="http://www.php.net/manual/en/class.iterator.php" target="_blank">Iterator</a></em>:
<pre class="prettyprint">// Iterador del 0 al 9
function rangeTo10()
{
    for(i=0; i&lt; 10; i++)
    {
        yield $i; //yield no return;
    }
}</pre>
Usar el <em>iterador</em> es sencillo:
<pre class="prettyprint"> foreach (rangeTo10() as $number) {
    echo "$number ";
}

Salida: 0,1,2,3,4,5,6,7,8,9</pre>
La parte interesante de los <em>Generators</em> es la sentencia <a title="PHP yield - PHP" href="http://www.php.net/manual/en/language.generators.syntax.php#language.generators.syntax.yield" target="_blank"><strong><em>yield</em></strong></a>, que a diferencia de <a title="PHP return - PHP" href="http://www.php.net/manual/en/functions.returning-values.php" target="_blank"><em>return</em></a>, no hace que termine el flujo de la función sino que queda 'congelado' y continua devolviendo resultados en la siguiente iteración. Los <em>Generators</em> además nos permiten iterar sobre los datos sin tenter que crear un array adicional en memoria. Por ejemplo, la función range(0, 1000000) crearía en memoria un array de un millón de elementos que ocuparían 100 MB en memoria. Por último, no olvides echarle un vistazo a la <a href="http://www.php.net/manual/en/language.generators.syntax.php" target="_blank"><strong>sintaxis de la sentencia <em>yield</em></strong></a>.
<h3>Nueva Password Hashing API</h3>
La nueva API gira entorno a la función <em><strong><a title="Función crypt - PHP" href="http://www.php.net/manual/en/function.crypt.php">crypt()</a></strong></em>, que obtiene el resumen de una cadena de entrada. La <a title="Password Hashing API - PHP" href="http://www.php.net/manual/en/book.password.php" target="_blank"><em>Password Hashing API</em></a> no es más que un envoltorio para gestionar los password mediante las siguientes funciones:
<ul>
	<li><strong><a href="http://www.php.net/manual/en/function.password-get-info.php" target="_blank">password_hash</a></strong>:<strong> </strong>Obtiene un <em>hash</em> del password de usuario. Permite indicar el <a href="http://www.php.net/manual/en/password.constants.php" target="_blank">algoritmo</a>.</li>
	<li><a href="http://www.php.net/manual/en/function.password-get-info.php" target="_blank"><strong>password_get_info</strong></a>: Devuelve información sobre los parámetros usados para crear el <em>hash</em>.</li>
	<li><a href="http://www.php.net/manual/en/function.password-needs-rehash.php" target="_blank"><strong>password_needs_rehash</strong></a>: Esta función es muy interesante porque devuelve un <em>booleano</em> que indica si el <em>hash</em> se ha generado con loas parámetros que le indicas a <em>password_needs_rehash</em> como argumento.</li>
	<li><a href="http://www.php.net/manual/en/function.password-verify.php" target="_blank"><strong>password_verify</strong></a>: Esta as la función más interesante de todas porque permite comprobar si el password suministrado por un usuario es válido. Lógicamente, debemos tener previamente almacenado el <em>hash</em> del password.</li>
</ul>
Todos los <em>hash</em> empleados por la <em>Password Hashing API</em> deben crearse con <em>password_hash()</em>.
<h3>Mejora de la función <em>empty()</em></h3>
Ahora no solo acepta variables sino que también se pueden pasar funciones como argumento:

<strong>PHP &lt; 5.5:</strong>
<pre class="prettyprint">$nombre = " yosymfony "
$nombreNormalizado = trim($nombre)

if(!empty($nombreNormalizado))
    echo 'hay nombre'</pre>
<strong>PHP &gt;= 5.5:</strong>
<pre class="prettyprint">$nombre = " yosymfony "

if(!empty(trim($nombre))   // Ahora esto no produce error
    echo 'hay nombre'</pre>
<h3>Los bloques <em>try... catch</em> soportan <em>finally</em></h3>
Por fin PHP se iguala a otros lenguajes e incorpora la sentencia <em>finally</em> para ejecutar código dentro de un bloque <em>try... catch</em> se produzca o no excepción.
<pre class="prettyprint">try {
    echo 'Código';
} catch (Exception $e) {
    echo 'Exceptión: '.$e-&gt;getMessage();
} finally {
    echo 'Bloque finally.';
}</pre>
<h3>Array y string dereferencing</h3>
Para mí, esta es una de las características más importantes. Ya en la versión 5.4 se consiguió el dereferencing en arrays devueltos por funciones. Ahora ya es posible usarlo en literales:
<pre class="prettyprint">function getArray() {
    return array(1, 2, 3);
}

// Anterior a PHP 5.4
$tmp = getArray();
$item= $tmp[1];

// de otra forma:
list(, $item) = getArray();

// En PHP 5.4
$secondElement = getArray()[1];

// En 5.5 también se puede:
echo [1, 2, 3][0]; // Muestra 1

// Con string también funciona:
echo 'php'[0] // Muestra p</pre>
<h3>Soporte de <em>List()</em> en bucles <em>foreach</em></h3>
El constructor<a href="http://www.php.net/manual/en/function.list.php" target="_blank"><em><strong> list()</strong></em></a> permite asignar en una sola operación el valor de varias variables. En esta nueva versión de PHP es posible usarlo en bucles <em>foreach</em>:
<pre class="prettyprint">$array = [
    [1, 2],
    [3, 4],
];

foreach ($array as list($a, $b)) {
    echo "A: $a; B: $b\n";
}</pre>]]></description>
                <link>/las-nuevas-caracteristicas-de-php-5-5</link>
                <pubDate>Sun, 24 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/las-nuevas-caracteristicas-de-php-5-5</guid>
                                <category>php 5.5</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>¿Almacenar las imágenes en disco o en base de datos?</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />El título es una pregunta típica al diseñar/implementar proyectos en los que interviene un número considerado de imágenes, como servicios de hospedaje de fotos. La pregunta no tiene una respuesta taxativa porque depende de la naturaleza del proyecto y de lo que se quiera realizar con esas fotos. Si necesitamos retocar las fotos, almacenarlas en base de datos puede que no sea la opción más cómoda. En este post simplemente comentaré los pros y contras de ambas opciones y que cada uno elija la que mejor se adapte.

El tamaño importa y <strong>almacenar imágenes en base de datos  hace que las tablas crezcan de tamaño rápidamente</strong> por lo que podríamos alcanzar algún tipo de límite configurado en el sistema operativo. Si almacenamos las imágenes en disco tenemos el problema de las búsquedas lentas. Para evitarlo podríamos aprovechar la jerarquía de directorios para organizar las imágenes y ganaríamos tiempo de búsqueda. <strong><em><a title="ReiserFS [eng] - Wikipedia" href="http://en.wikipedia.org/wiki/ReiserFS" target="_blank">Reiser FS </a></em>es un sistema de ficheros Linux que da muy buenos resultados en las búsquedas</strong>.

&nbsp;

<strong>Las imágenes almacenadas en disco se pueden obtener directamente por el <em>servidor web</em></strong>; Requiere de una operación de lectura en disco y de una operación de escritura en el flujo de respuesta hacia el cliente. A<strong>lmacenarlas en base de datos es una opción más lenta que necesita de un <em>script</em></strong> que recupere la imagen y se la entregue al servidor web. Ello supone una operación de lectura en la base de datos y una escritura para entregársela al <em>script</em>. Después, el script debe realizar una lectura de la imagen para enviarla a el cliente, lo que se traduce en una nueva operación de escritura, ahora sobre el flujo de respuesta.

Dependiendo del tipo de aplicación que estemos desarrollado, puede que en el caso anterior no haya opción y tengamos que almacenarla en base de datos. Hablo de situaciones como en las que necesitamos controlar qué usuarios y cuantas veces acceden a una imagen, documento etc...

<!--more-->

&nbsp;

<strong>Almacenar las imágenes en base de datos significa tener un repositorio de imágenes centralizado para todos las servidores</strong> o instancias. A no ser que tengas algún tipo de partición remota montada en todos los servidores, almacenar imágenes en disco es algo local al servidor y puede ser una situación no deseable cuando se dispone de múltiples servidores.

&nbsp;

Las imágenes se almacenan en MySql, por ejemplo, en un campo tipo <a title="Documentación MySql [eng]" href="http://dev.mysql.com/doc/refman/5.5/en/blob.html">Blob</a> de tamaño variable. <strong>Las búsquedas con el motor <a title="MyISAM - Wikipedia" href="http://es.wikipedia.org/wiki/MyISAM" target="_blank">MyISAM</a> en campos variables son más ineficiente que con campos de tamaño fijo</strong>.

<strong>Almacenar las imágenes en base de datos supone un grado de acoplamiento alto entre las imágenes y el gestor de base de datos</strong>. Esto no ocurre con el almacenamiento en disco. Por otro lado, almacenar las imágenes en base de datos tienen la ventaja de tener el respaldo de las transacciones (en MySQL usar motor <a title="InnoDB - Wikipedia" href="http://es.wikipedia.org/wiki/InnoDB" target="_blank">InnoDB</a>) por lo que si para tu aplicación son importantes ciertos atributos asociados a la imagen, la imagen y los atributos se pueden almacenar en una operación atómica. Si se produce algún fallo, no se almacena la imagen. En disco, esto no sucede. Si se produce un error, la imagen quedará corrupta y los atributos no estarán sincronizados correctamente.

Almacenar las imágenes en base de datos te da el beneficio de poder usar las herramientas de <em>backups</em> típicas de un gestor de base de datos. Almacenarlas en disco... también tiene sus herramientas de backup pero las de base de datos te pueden permitir una recuperación parcial.]]></description>
                <link>/almacenar-las-imagenes-en-disco-o-en-base-de-datos</link>
                <pubDate>Thu, 21 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/almacenar-las-imagenes-en-disco-o-en-base-de-datos</guid>
                                <category>mysql</category>
                                <category>rendimiento</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>¿Son seguras las dependencias de tu aplicación Symfony2?</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-181" style="margin: 5px;" alt="Sensio-labs-logo" src="/assets/wp-content/uploads/2013/02/sensio-labs-logo.png" width="147" height="40" />Hoy <strong>Fabien Potencier</strong>, creador de Symfony, ha anunciado en su <a href="http://fabien.potencier.org/article/67/don-t-use-php-libraries-with-known-security-issues" target="_blank">blog</a> que <a href="http://sensiolabs.com/en" target="_blank">Sensio Labs</a> pone a nuestro alcance una <a title="Comprueba las vulnerabilidades de tu aplicación Symfony2" href="https://security.sensiolabs.org/" target="_blank">herramienta</a> para comprobar las <strong>vulnerabilidades existentes en las dependencias de nuestros proyectos Symfony o Zend framework</strong> siempre que usemos <a title="PHP Composer" href="http://getcomposer.org/" target="_blank"><strong>Composer</strong></a> como gestor de dependencias. La iniciativa es realmente buena porque a estas alturas de partido, Symfony se ha masificado y existen <a title="Case studies [eng] - Symfony" href="http://symfony.com/blog/category/case-studies" target="_blank">grandes proyectos cuyo funcionamiento depende de que el framework y sus bundles</a> trabajen de forma correcta y segura. Además Fabien asegura que se están mejorando la identificación de los bug para cumplir con el <em>Common Vulnerabilities and exposures</em> o <a href="http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=symfony" target="_blank">CVE</a>. Todo esto es otro incentivo más para usar Symfony y Composer, una estupenda aplicación que se encarga de  obtener las dependencias que necesitemos en nuestro proyecto de forma transparente, con solo lanzar un comando. No estaría nada mal que PHP tuviese algún sistema estándar de este tipo para  comprobar si las librerías/frameworks/aplicaciónes son seguras y están a la última.

<!--more-->
<h3>¿Cómo funciona el <em>Security Advisories Checker</em>?</h3>
Tienes tres formas de usarlo,  una de ellas es mediante una API que te permitirá usarla en sistemas de Integración Contínua:
<ul>
	<li><span style="line-height: 13px;"><strong>Web</strong> de <a href="https://security.sensiolabs.org/" target="_blank">security.sensiolabs.org</a>: Accedes a la web y subes tu fichero <code class="prettyprint">composer.lock</code>.</span></li>
	<li>Usar la <strong>aplicación de consola</strong> <a title="Aplicación Security Checker - Symfony2" href="https://github.com/sensiolabs/security-checker" target="_blank">Security Checker</a>:
<code class="prettyprint">$ php security-checker security:check /tu-directorio/composer.lock</code></li>
	<li><a title="Security Checker  API - Symfony2" href="https://security.sensiolabs.org/api" target="_blank"><strong>API</strong> del servicio</a>.</li>
</ul>
&nbsp;

Eco de la noticia:<strong> <a href="http://fabien.potencier.org/article/67/don-t-use-php-libraries-with-known-security-issues" target="_blank">Fabien Potencier</a> | <a href="http://www.symfony.es/noticias/2013/02/19/nueva-herramienta-para-descubrir-problemas-de-seguridad-en-proyectos-php" target="_blank">Symfony.es</a></strong>]]></description>
                <link>/son-seguras-las-dependencias-de-tu-aplicacion-symfony2</link>
                <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/son-seguras-las-dependencias-de-tu-aplicacion-symfony2</guid>
                                <category>bug</category>
                                <category>seguridad</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Vulnerabilidad SOAP en PHP 5.3x y 5.4x</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Hoy <a href="http://www.zend.com/en/" target="_blank"><strong>Zend Technologies</strong></a> ha anunciado, a través de su cuenta <a href="https://www.facebook.com/ZendTechnologies/posts/10151452763862140" target="_blank">Facebook</a> y en <a href="http://twitter.com/zend" target="_blank">Twitter</a>, el descubrimiento de una<strong> vulnerabilidad en la implementación de servicios SOAP que afecta a las versiones 5.3.x y 5.4.x</strong>:
<blockquote cite="https://www.facebook.com/ZendTechnologies/posts/10151452763862140">IMPORTANT -- we've just released a fix for a SOAP security vulnerability in PHP. More details on the vulnerability to be announced soon, after core PHP releases its fix. In the meantime, if you're on Zend Server you can get patched immediately!
&nbsp;
PHP in Zend Server 6 is already fixed, no action is required.
&nbsp;
PHP in Zend Server 5.6 should be updated immediately if you use SOAP. If on Linux, update from your repository; if on Windows or IBM i download hotfixes from:
<a href="http://www.zend.com/en/products/server/downloads-prev" target="_blank" rel="nofollow nofollow">http://www.zend.com/en/products/server/downloads-prev</a>
&nbsp;
We'll be reaching out to all our customers to make sure they're aware of the issue and have taken appropriate action.</blockquote>
<!--more-->

Más tarde dejaba claro en Twitter que<strong> no es un problema exclusivo de Zend Server 6</strong>:
<blockquote class="twitter-tweet" lang="es">To clarify: <a href="https://twitter.com/search/%23SOAP">#SOAP</a> vulnerability is <a href="https://twitter.com/search/%23PHP">#PHP</a> wide, not just Zend Server; stay tuned for details.(But Zend Server is already patched!)

— zend (@zend) <a href="https://twitter.com/zend/status/303429422910951424">18 de febrero de 2013</a></blockquote>
Por el momento no hay más información y argumentan que habrá una nueva actualización pronto de las ramas 5.3 y 5.4. La última actualización se realizó el <a title="Nuevas versiones PHP 5.4.11 y PHP 5.3.21" href="/nuevas-versiones-php-5-4-11-y-php-5-3-21" target="_blank">pasado Enero</a>.

Pues nada, si eres usuario de Zend Server 6 <a title="Zend Server 6" href="http://www.zend.com/en/products/server/downloads-prev" target="_blank"><strong>tienes una corrección disponible</strong></a>. El resto deberá esperar.]]></description>
                <link>/vulnerabilidad-soap-en-php-5-3x-y-5-4x</link>
                <pubDate>Mon, 18 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/vulnerabilidad-soap-en-php-5-3x-y-5-4x</guid>
                                <category>bug</category>
                                <category>php 5.3</category>
                                <category>php 5.4</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>@phpuniverse: Información de la comunidad PHP en tiempo real</title>
                <description><![CDATA[<img class="alignnone  wp-image-141" style="margin: 5px;" alt="phpuniverse-logo-twitter" src="/assets/wp-content/uploads/2013/02/phpuniverse-logo-twitter.png" width="77" height="77" />El mundo de PHP está en contínua evolución. El número de proyectos realizados con este leguaje crece cada día y todos estos ellos generan una gran cantidad de información: nuevas versiones, tutoriales o eventos celebrados por todo el mundo entorno los los grandes proyectos. Con el fin de agrupar <a title="Comunidad PHP" href="http://yosymfony.com/comunidad-php/"><strong>todas las noticias (en cualquier idioma) que suceden en la comunidad de usuarios de PHP</strong></a>, he creado una cuenta twitter <a title="Información sobre PHP y su entorno - Twitter" href="http://twitter.com/phpuniverse" target="_blank"><strong>@phpuniverse</strong></a> que recolecta diariamente información sobre PHP y su entorno. La <a href="https://github.com/yosymfony/phpuniverse-feed-list/blob/master/list.md" target="_blank">lista de fuentes</a> se actualiza cada vez que encuentro alguna interesante y, por supuesto, está abierta a sugerencias mediante un <a title="Comunidad PHP" href="http://devi-vm.local/wordpress/?page_id=410" target="_blank"><em>pull-request</em></a> en nuestra cuenta de <a title="Yosymfony en Github" href="https://github.com/yosymfony" target="_blank">GitHub</a>.]]></description>
                <link>/phpuniverse-informacion-de-la-comunidad-php-en-tiempo-real</link>
                <pubDate>Sun, 17 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/phpuniverse-informacion-de-la-comunidad-php-en-tiempo-real</guid>
                                <category>comunidad php</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Configurar Doctrine para usar SQLite en Symfony2</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-136" alt="sqlite-logo" src="/assets/wp-content/uploads/2013/02/sqlite-logo.png" width="134" height="64" /><a href="http://www.sqlite.org/" target="_blank"><strong>SQLite</strong></a> es uno de los gestores de bases de datos más usados del mundo por su facilidad de uso y de incorporación en proyectos. <strong>Funciona almacenando toda la base de datos en un solo fichero</strong> y, a diferencia de otros gestores como MySQL u Oracle de tipo <em>cliente-servidor</em>, el proceso que gestiona los datos va embebido en la propia aplicación accediendo a la información mediante funciones en lugar de usar un protocolo que comunique al cliente con el servidor. SQLite <a title="Estándar ACID de base de datos - Wikipedia" href="http://es.wikipedia.org/wiki/ACID" target="_blank"><strong>cumple el estándar ACID</strong></a> por lo que implementa un mecanismo seguro para realizar <em>transacciones</em>.

<strong>SQLite</strong> está más introducida en nuestras vidas de lo que creemos. El sistema operativo Android, el más usado del mundo en <em>smartphones</em>, lleva<a title="SQLite en Android [eng]" href="http://developer.android.com/reference/android/database/sqlite/package-summary.html" target="_blank"> incorporado SQLite</a>. <a title="Noticia: WebProfiler - Symfony.es" href="http://www.symfony.es/noticias/2010/09/01/symfony2-presenta-su-webprofiler/" target="_blank"><strong>Symfony2 usa SQLite en el <em>WebProfiler</em></strong> </a>para almacenar el historial de ejecución de nuestra aplicación en un fichero llamado <code class="prettyprint">profiler.db</code> en <code class="prettyprint">/cache</code>.

<!--more-->
<h3>Configurar Doctrine DBAL</h3>
Symfony2 dispone de una detallada <a title="Configurar Doctrine DBAL [eng] - Symfony" href="http://symfony.com/doc/current/reference/configuration/doctrine.html#doctrine-dbal-configuration" target="_blank">documentación para configurar el gestor de base de datos</a> que va a emplear Doctrine. A continuación simplifico para mostrar como se configuraría el driver de SQLite:

En primer lugar editamos el fichero <code class="prettyprint">app/config/config.yml</code>:
<pre class="prettyprint"># Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        path:     %database_path% // importará el directorio donde está nuestra base de datos SQLite
        memory:   %database_memory%
        charset:  UTF8</pre>
Por último modificamos <code class="prettyprint">app/config/parameters.yml</code> que es el que contiene los parámetros de configuración usados por el anterior fichero:
<pre class="prettyprint">    database_driver: pdo_sqlite
    database_host:
    database_port:
    database_name:
    database_memory: false // true si queremos que la base de datos se volátil
    database_user: mi-usuario
    database_password: mi-password
    database_path: /directorio-mi-proyecto/app.db</pre>
Si queremos que nuestra base de datos sea volátil, debemos poner a <em>true</em> el valor de la propiedad <em>database_memory</em> y dejar vacío el valor de <em>database_path</em>. Ten en cuenta que el valor de estos parámetros es mútuamente excluyente.

&nbsp;

Doctrine: <a title="Documentación pdo_sqlite [eng] - Doctrine" href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html" target="_blank"><strong>Driver pdo_sqlite</strong></a>]]></description>
                <link>/configurar-doctrine-para-usar-sqlite-en-symfony2</link>
                <pubDate>Thu, 14 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/configurar-doctrine-para-usar-sqlite-en-symfony2</guid>
                                <category>doctrine</category>
                                <category>sqlite</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Github y sus recientes problemas de disponibilidad</title>
                <description><![CDATA[<img src="/assets/wp-content/uploads/2013/02/github-logo.png" alt="github-logo" width="125" height="73" class="alignnone size-full wp-image-132" /></a>Ayer me llamó la atención un post de <strong><a title="Post de Brandon Savage [eng]" href="http://www.brandonsavage.net/github-your-single-point-of-failure" target="_blank">Brandon Savage -<em>Github: your single point of failure</em>-</a> </strong>acerca de los recientes<strong> <a title="Estado del servicio Github" href="https://status.github.com/messages" target="_blank">problemas de Github</a></strong> y de la dependencia que muchas empresas  y organizaciones se están creando con el. Github es un excelente servicio que realiza una gran labor para la comunidad del software libre permitiendo disponer de <strong>repositorios de código para cualquier proyecto <em>open source</em> sin gasto alguno</strong>. Miles de usuarios colaboran en proyectos desde cualquier parte del mundo trabajando en local y subiendo los cambios al repositorio del proyecto mediante <em>pull-request</em>. Sin duda, Github ha contribuido a socializar el código y a facilitar a los usuarios colaborar con proyectos y los hitos que ha alcanzado no son nada desdeñables. En enero anunció que alcanzó los <a title="Github alcanza los 3 millones de usuarios [eng] - Techcrunch" href="http://techcrunch.com/2013/01/16/github-passes-the-3-million-developer-mark/" target="_blank">3 millones de usuarios</a> y más de 46.000 repositórios además de ser nombrada como una de las <a title="Las 10 compañías tecnológicas del 2012 [eng] - Forbes" href="http://www.forbes.com/sites/tanyaprive/2012/12/30/top-10-tech-companies-of-2012/" target="_blank">10 compañías tecnológicas del 2012 por la revista Forbes</a> y de ganar el galardón a la <a title="Github The 2012 Crunchie For “Best Overall Startup&quot; [eng] - Techcrunch" href="http://techcrunch.com/2013/01/31/github-wins-the-2012-crunchie-for-best-overall-startup-may-the-fork-be-with-you/" target="_blank">mejor startup de los premios <em>2012 Crunchies</em> organizados por Techcrunch</a>.

<!--more-->
<h3>Funcionamiento de Github</h3>
Trabajar con Github es sencillo. Simplemente, elegimos el proyecto con el que queremos colaborar y realizamos un <em>fork</em>. Esto crea un nuevo repositório identico al original y asociado a nuestro usuario con el que trabajar. Realizamos los cambios que consideremos sobre el código, hacemos el <em>commit</em> y por último una petición <em>pull-request</em> para que los propietarios del repositorio original incorporen nuestros cambios.  Sencillo y muchos de los cambios los puedes realizar online con un editor incorporado.
<h3>El problema</h3>
Grandes organizaciones y proyecto residen en Gihub: <a title="Repositorios de Mozilla - Github" href="https://github.com/mozilla" target="_blank">Mozilla</a>, <a title="Repositorio de Symfony - Github" href="https://github.com/symfony/symfony" target="_blank"><strong>Symfony</strong></a> o el <a title="Repositorio kernel Linux - Github" href="https://github.com/torvalds/linux" target="_blank">kernel Linux</a>, todos ellos grandes proyectos con cientos de desarrolladores a lo largo del mundo colaborando entorno a un código alojado en Github que actúa como eje central. Existen repositórios para código libre y código privado (estos son de pago) y tanto unos como otros sufren el mismo problema y es que Github <strong>no ofrece ningún tipo de <a href="http://es.wikipedia.org/wiki/Acuerdo_de_nivel_de_servicio" target="_blank">Acuerdo de Nivel de Servicio</a></strong> o <em>Service Level Agreement</em> por el que poder realizar reclamaciones en el caso de los repositorios privados.
<h3>Alternativas</h3>
Una posible solución, si te sientes cómodo con Github,  es crearte tu propio Github en los servidores de tu empresa con <a href="https://enterprise.github.com/pricing" target="_blank">Github Enterprise</a>, aunque no es una solución al alcance de cualquiera, o usar una alternativa <em>open source</em> bajo <em>licencia MIT </em>llamada <a title="Alternativa open source a Github" href="http://gitlab.org/" target="_blank"><strong>Gitlab</strong></a> que nos ofrece una solución parecida a Github incluso en aspecto.]]></description>
                <link>/github-y-sus-recientes-problemas-de-disponibilidad</link>
                <pubDate>Wed, 13 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/github-y-sus-recientes-problemas-de-disponibilidad</guid>
                                <category>github</category>
                                                <category>Varios</category>
                            </item>
                    <item>
                <title>Symfony 2.2.0 RC2 disponible</title>
                <description><![CDATA[<img class=" wp-image-62 alignleft" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="204" height="58" />Desde hoy está disponible la <a title="Symfony 2.2.0 RC2 [eng] - Blog de Symfony" href="http://symfony.com/blog/symfony-2-2-0-rc2-released" target="_blank"><strong>segunda versión candidata a Symfony 2.2.0</strong></a> y este mes tendremos versión final!. Seguramente te estés preguntando ¿qué fue de la RC1?. Pues simplemente, <a title="Symfony 2.2.0 RC1" href="https://github.com/symfony/symfony/tree/v2.2.0-RC1" target="_blank">se sacó la semana pasada</a> pero no se hizo ningún comunicado en el blog oficial porque algunos componentes no estaban con un mínimo de estabilidad. Desde la última beta2, se han corregido algunos bug y se han incluido algunas características como el soporte al mecanismo de cifrado <a title="Soporte al algoritmo Bcrypt en Symfony 2.2.0 [eng] - Github" href="https://github.com/symfony/symfony/commit/9d089ef998bd49637f455b668d7fd353d851ceb9" target="_blank"><em><strong>BCrypt</strong></em></a> para la codificación de <em>password</em>. Tienes disponibles <a title="Diferencias Symfony 2.2.0 beta2 y Symfony 2.2.0 RC2" href="https://github.com/symfony/symfony/compare/v2.2.0-BETA2...2.2" target="_blank">todas las diferencias desde la última beta</a>.

<!--more-->

<h3>Probar Symfony 2.2.0 RC2</h3>
Como siempre, el método más recomendado es crear un nuevo proyecto con composer:

<code class="prettyprint">$ php composer.phar create-project symfony/framework-standard-edition somewhere/ 2.2.0-RC2
</code>

También puedes descargar el proyecto <a title="Syfmony2 Standard Edition" href="http://symfony.com/download" target="_blank"><em>ready-made</em></a> de la edición estándar.

Si por el contrario, usas componentes sueltos, la actualización pasa por actualizar <em>composer.json</em> o descargar los componetes manualmente: <code class="prettyprint">https://github.com/symfony/{nombre_componente}/archive/v2.2.0-RC2.zip;</code>

Si actualizas desde la versión 2.1, no olvides <a href="https://github.com/symfony/symfony/blob/master/UPGRADE-2.2.md" target="_blank">revisar el archivo de actualización hacia la 2.2</a>.]]></description>
                <link>/symfony-2-2-0-rc2-disponible</link>
                <pubDate>Mon, 11 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-2-2-0-rc2-disponible</guid>
                                <category>symfony 2.2.0</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Las presentaciones de la SunshinePHP 2013</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-124" alt="sunshinephp-logo" src="/assets/wp-content/uploads/2013/02/sunshinephp-logo.png" width="180" height="75" />Ayer finalizó la <a href="http://sunshinephp.com/" target="_blank"><strong>SunshinePHP</strong></a> celebrada los días 8 y 9 en Miami tras 31 ponencias y 29 ponentes entre los que se encontraban los españoles <a title="Web de Javier Eguiluz" href="http://javiereguiluz.com/" target="_blank"><strong>Javier Eguiluz</strong></a> y <a title="Web de Nacho Martín" href="http://nacho-martin.com/" target="_blank"><strong>Nacho Martín</strong></a> hablando sobre el motor de plantillas Twig y sobre la integración de Javascript con Symfony. Dejo algunas de las presentaciones más interesantes.

<!--more-->
<h3>Symfony y Javascript by Nacho Martín (<a title="Twitter de Nacho Martín" href="http://twitter.com/nacmartin" target="_blank">@nacmartin</a>)</h3>
Crear una API y usar Backbone.js para el lado cliente son algunos de los temas de los que habla:

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://www.slideshare.net/slideshow/embed_code/16453390" height="356" width="427" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Symfony &amp; Javascript. Combining the best of two worlds" href="http://www.slideshare.net/nachomartin/symfony-javascript-combining-the-best-of-two-worlds" target="_blank">Symfony &amp; Javascript. Combining the best of two worlds</a> </strong> from <strong><a href="http://www.slideshare.net/nachomartin" target="_blank">Nacho Martín</a></strong></div>
<h3 style="margin-bottom: 5px;">Twig: tips and tricks by Javier Eguiluz (<a title="Twitter de Javier Eguiluz" href="http://twitter.com/javiereguiluz" target="_blank">@javiereguiluz</a>)</h3>
Consejos y trucos sobre el motor de plantillas Twig:

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://www.slideshare.net/slideshow/embed_code/16428066" height="356" width="427" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Twig tips and tricks" href="http://www.slideshare.net/javier.eguiluz/twig-tips-and-tricks" target="_blank">Twig tips and tricks</a> </strong> from <strong><a href="http://www.slideshare.net/javier.eguiluz" target="_blank">Javier Eguiluz</a></strong></div>
<h3 style="margin-bottom: 5px;">PHP 5.5 The new bits by Davey Shafik (<a title="Twitter de Davey Shafik" href="http://twitter.com/dshafik" target="_blank">@dshafik</a>)</h3>
Presentación de las novedades de PHP 5.5: Nuevas funciones como <a title="Función booval - Documentación PHP" href="http://www.php.net/manual/es/function.boolval.php" target="_blank"><em>booval()</em></a> para extraer el valor booleano de una variable, soporte de <a title="List - Documentación de PHP" href="http://www.php.net/manual/es/function.list.php" target="_blank"><em>list()</em></a> en el iterador <em>foreach, </em>seguridad en la generación de claves etc...

<script async class="speakerdeck-embed" data-id="551057f055670130691f123138194f19" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>

<h3>How Kris Writes Symfony Apps by Kris Wallsmith (<a title="Twitter de Kris Wallsmith" href="http://twitter.com/kriswallsmith" target="_blank">@kriswallsmith</a>)</h3>
Su experiencia desarrollando aplicaciones en Symfony2:

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://www.slideshare.net/slideshow/embed_code/16445039" height="356" width="427" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="How Kris Writes Symfony Apps" href="http://www.slideshare.net/kriswallsmith/how-kris-writes-symfony-apps" target="_blank">How Kris Writes Symfony Apps</a> </strong> from <strong><a href="http://www.slideshare.net/kriswallsmith" target="_blank">Kris Wallsmith</a></strong></div>
<h3>Cryptography For The Average Developer by Anthony Ferrara (<a title="Twitter de Anthony Ferrara" href="http://twitter.com/ircmaxell" target="_blank">@ircmaxwell</a>)</h3>
Presentación muy interesante acerca de la seguridad: funciones seguras y no seguras de PHP para generar números aleatórios o cómo almacenar los password de los usuarios en base de datos:

<iframe style="border: 1px solid #CCC; border-width: 1px 1px 0; margin-bottom: 5px;" src="http://www.slideshare.net/slideshow/embed_code/16444671" height="356" width="427" allowfullscreen="" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
<div style="margin-bottom: 5px;"><strong> <a title="Cryptography For The Average Developer - Sunshine PHP" href="http://www.slideshare.net/ircmaxell/cryptography-for-the-average-developer-1" target="_blank">Cryptography For The Average Developer - Sunshine PHP</a> </strong> from <strong><a href="http://www.slideshare.net/ircmaxell" target="_blank">ircmaxell</a></strong></div>
<h3>Bringing Symfony Components into Your Legacy Code by Hugo Hamon (<a title="Twitter de Hugo Hamon" href="http://twitter.com/hhamon" target="_blank">@hhamon</a>)</h3>
Migración de aplicaciones a Symfony2:

<script async class="speakerdeck-embed" data-id="d2d194c0543e0130178722000a1e8e84" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>
&nbsp;
<h3>Otras presentaciones</h3>
Además, se habló también sobre <a href="http://jmikola.github.com/slides/mongodb_dos_and_donts/">qué se debe hacer y qué no hacer con Mongo DB</a> by Jeremy Mikola (<a title="Twitter de Jeremy Mikola" href="http://twitter.com/jmikola" target="_blank">@jmikola</a>) y <a href="http://davidbu.ch/slides/20130208_sunshinephp_symfony-speed.html" target="_blank"><strong>optimización del Frontend en Symfony2</strong></a> by  David Buchmann (<a title="Twitter de David Buchmann" href="http://twitter.com/dbu" target="_blank">@dbu</a>).

Por supuesto, en esta edición de la SunshinePHP se trataron más temas. Si veo más presentaciones, las colgaré en el post.]]></description>
                <link>/las-presentaciones-de-la-sunshinephp-2013</link>
                <pubDate>Sun, 10 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/las-presentaciones-de-la-sunshinephp-2013</guid>
                                <category>sunshinephp</category>
                                                <category>Eventos</category>
                            </item>
                    <item>
                <title>PSR-3: El estándar para las librerías logger de PHP</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />El <strong><a title="PSR-3 Logger interface - Github" href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md" target="_blank">PSR-3</a> es un <em>proposed-standard-request</em> que describe una interfaz común que deberían cumplir las librerías que realizan </strong><em><strong>logger</strong>, </em>registrar las acciones que ocurren durante la ejecución, en nuestras aplicaciones PHP. Los PSR son como los <a title="RFC - Wikipedia" href="http://es.wikipedia.org/wiki/Request_for_Comments" target="_blank">RFC o Request for Comments</a>, documentos que describe como se lleva a cabo una tarea y que se someten a comentarios y a voto para adoptarse como estándar.

PSR-3 propone un conjunto de interfaces para que, en todas las librerías que cumplan el estándar, se registren los mensajes de igual manera. En PSR-3 cada mensaje consta de un texto, que describe la anomalía o evento sucedido, unas variables de contexto y un nivel de importancia. Los niveles de importancia, <em>debug, info, notice, warning, error, critical, alert, emergency</em>, se basan los declarados en el <a title="The Syslog Protocol [eng]" href="http://tools.ietf.org/html/rfc5424" target="_blank"><strong>RFC 5424</strong></a> que describe el formato de los mensajes de log empleado por grandes sistemas operativos como Linux.

<!--more-->
<h3>El Mensaje</h3>
El mensaje es el texto que se almacena en el fichero, base de datos o el soporte que se crea necesario y describe la acción o evento sucedido. Todos los métodos que implementan la interfaz propuesta por PSR-3 admiten <em>string</em> u objetos que se puedan convertir a <em>string</em> mediante la implementación de la función mágica <em>__tostring()</em>.

Las variables de contexto de cada mensaje son un conjunto de pares <em>clave-valor</em> que se pasan como array y cuya clave será buscada en el mensaje y reemplazada con el valor:
<pre class="prettyprint">//...
$contexto = array('nombreUsuario' =&gt; 'Symfony-user');
$this-&gt;logger-&gt;info('El usuario {nombreUsuario} ha iniciado sesión', $context);</pre>
Mediante la interpolación de los valores de contexto, en el mensaje final se tendrá el siguiente texto:

<code class="prettyprint">El usuario Symfony-user ha iniciado sesión</code>

El nombre de cada clave en el mensaje debe ir entre llaves y sin espacios en blanco en el interior. Los caracteres válidos van de <code>a-z</code>, <code>A-Z</code>, <code>_</code> y el <code>.</code>.

<strong>Existe una clave especial llamada <em>exception</em> cuya misión es incluir un objeto de tipo Exception</strong> que serviría al logger para incluir detalles del error.

Los niveles de importancia de cada mensaje los describo de menor a mayor importancia:
<ul>
	<li><span style="line-height: 13px;"><strong>debug</strong>: Información de debug de la aplicación. No usado en entornos de producción.</span></li>
	<li><strong>info</strong>: Eventos interesantes como el inicio de sesión de usuarios.</li>
	<li><strong>notice</strong>: Eventos normales pero significativos.</li>
	<li><strong>warning</strong>: Ocurrencias excepcionales que no llegan a ser error.</li>
	<li><strong>error</strong>: Errores de ejecución que permiten continuar con la ejecución de la aplicación pero que deben ser monitorizados.</li>
	<li><strong>critical</strong>: Situaciones importantes donde se generan excepciones no esperadas o no hay disponible un componente.</li>
	<li><strong>alert</strong>: Se deben tomar medidas inmediatamente. Se da en situaciones como la caída completa de la web, base de datos no disponible etc... En este caso, se suelen enviar mensajes por email.</li>
	<li><strong>emergency</strong>: Es el error más grave e indica que todo el sistema está inutilizable.</li>
</ul>
Las funciones que un <em>logger</em> debería de implementar tienen el siguiente aspecto:
<pre class="prettyprint">    public function emergency($message, array $context = array());
    public function alert($message, array $context = array());
    public function critical($message, array $context = array());
    public function error($message, array $context = array());
    public function warning($message, array $context = array());
    public function notice($message, array $context = array());
    public function info($message, array $context = array());

    public function debug($message, array $context = array());

    /**
     * Esta es la función a la que llaman todas las anteriores
     */
    public function log($level, $message, array $context = array());</pre>
<h3>Críticas al estándar</h3>
Existen algunos autores como <a href="http://blog.stuartherbert.com/php/2012/12/29/personal-thoughts-on-the-psr-3-log-proposal/" target="_blank"><strong>Stuart Herbert’s</strong></a> que indican que los nombre de los métodos deberían empezar por un verbo para tener mejor legibilidad. Sería usar <code class="prettyprint">$this-&gt;log-&gt;<strong>log</strong>Emergency(...)</code> en lugar de <code class="prettyprint">$this-&gt;log-&gt;emergency(...)</code>. Además, la inclusión de las excepciones en una clave especial llamada <em>exception</em> no suena bien. Sería mejor pasarla como un parámetro opcional y no tener que distinguir este caso en la implementación del logger.

&nbsp;

Github: <strong><a title="PSR-3 logger interface" href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md" target="_blank">Documentación PSR-3</a></strong>]]></description>
                <link>/psr-3-el-estandar-para-las-librerias-logger-de-php</link>
                <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/psr-3-el-estandar-para-las-librerias-logger-de-php</guid>
                                <category>logger</category>
                                <category>psr</category>
                                <category>psr-3</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>El Web profiler de Symfony2 en Silex</title>
                <description><![CDATA[<img class="alignnone  wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="204" height="58" />Fabien Pontecier publicó ayer un post en el que hablaba de la <a title="Integración del Web profiler de symfony2 en Silex - Fabien Pontecier" href="http://fabien.potencier.org/article/66/debugging-silex-applications-just-got-funnier" target="_blank"><strong>nueva integración del <em>Web profiler</em> de Symfony2 en el <em>microframework</em> Silex</strong></a>. Se trata de una gran noticia, pues nos permitirá trazar y depurar mejor nuestra aplicación hecha con Silex.

El <em><strong>Web profiler</strong></em> es un <a title="Nuevo en Symfony2: Web Profiler - Symfony.es " href="http://www.symfony.es/noticias/2010/09/01/symfony2-presenta-su-webprofiler/" target="_blank">nuevo componente que se introdujo en Symfony2</a> como una mejora de la barra de depuración que existía en las versiones 1.x. Con este nuevo componente existe un mayor control sobre como se ha ejecutado nuestra aplicación y en caso de generarse alguna excepción disponemos de un mayor nivel de detalle.

Si quieres comenzar a probar el nuevo Web profiler de Silex, la mejor forma es mediante composer:

<code class="prettyprint">composer create-project fabpot/silex-skeleton tuDirectorio/ 1.0.x-dev</code>

&nbsp;

Github: <a title="Código fuente - Github" href="https://github.com/sensiolabs/Silex-WebProfiler" target="_blank"><strong>WebProfiler para Silex</strong></a>.]]></description>
                <link>/el-web-profiler-de-symfony2-en-silex</link>
                <pubDate>Fri, 08 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/el-web-profiler-de-symfony2-en-silex</guid>
                                <category>micro-framework</category>
                                <category>silex</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Cliente para la API de OpenShift en PHP</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" /><a href="http://openshift.redhat.com" target="_blank"><strong>OpenShift</strong></a> es un PASS, <em>Platform-as-a-Service</em>, de RedHat que ofrece servicios de computación en la nube. Permite desplegar aplicaciones en PHP, Ruby, Java o Perl y dispone de un servicio <em>express</em> para desplegar de forma gratuita nuestra aplicación hecha, por ejemplo, en Symfony. Se trata de un buen servicio para comenzar con un proyecto personal o desplegar un blog ya que la versión <em>express</em> tiene una características muy interesante: 50k páginas mensuales (esto es un valor apróximado y depende del tipo de aplicación y de las técnicas que uses para servir el contenido. Por ejemplo caché) y un máximo de tres <em>Gears</em> o paquetes de recursos: conjunto de software con una cantidad de RAM y espacio en disco limitada.
<p style="text-align: left;"><!--more--></p>
<p style="text-align: left;">La mejor forma de comenzar con OpenShift es crearte una cuenta y registrar una aplicación desde el panel de administración vía web aunque tiene funcionalidad limitada por lo que tendrás que instalar el comando <em>rhc</em> (una gema de Ruby) para sacarle todo el partido a la instancia creada: añadir dominios a tu aplicación (por ejemplo tu .com), arrancar/parar aplicaciones o añadir nuevos Gears. Todo esto se realiza desde la consola con el comando <em>rhc</em>, pero hoy he encontrado una implementación de la <a title="Documentación de la API REST de OpenShift" href="https://access.redhat.com/knowledge/docs/en-US/OpenShift/2.0/html/REST_API_Guide/" target="_blank">API REST de OpenShift</a> para PHP. Se trata de <strong><em><a title="OpenShift API client para PHP" href="https://github.com/hasinhayder/openshift-php-client" target="_blank">OpenShift PHP Client</a>,</em></strong> un sencillo cliente que nos permite realizar cualquier opción disponible en el comando <em>rhc</em>.</p>
<p style="text-align: left;">Un ejemplo de como usarla:</p>

<pre class="prettyprint">include_once("lib/openshift.php");
$username = "Nombre-de-usuario";
$password = "password";

$openshift = new OpenShift($username,$password);

// Crea un nuevo dominio
$data = $openshift-&gt;getDomainManager()-&gt;createDomain("yoSymfony");

// Listar los dominios
$data = $openshift-&gt;getDomainManager()-&gt;getDomains();

// Renombrar dominios
$data = $openshift-&gt;getDomainManager()-&gt;getDomain("yoSymfony")-&gt;updateName("yoSymfony2") ;

// Crear una aplicación
$data = $openshift-&gt;getDomainManager()-&gt;getDomain("yoSymfony")-&gt;createApplication("php","php-5.3");</pre>
&nbsp;

<a href="http://openshift.redhat.com" target="_blank">OpenShift de Redhat</a>
Github: <strong><em><a title="OpenShift API client para PHP" href="https://github.com/hasinhayder/openshift-php-client" target="_blank">OpenShift PHP Client</a>.</em></strong>]]></description>
                <link>/cliente-para-la-api-de-openshift-en-php</link>
                <pubDate>Thu, 07 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/cliente-para-la-api-de-openshift-en-php</guid>
                                <category>openshift</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Guzzle: framework para construir clientes de servicios REST</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-106" style="margin: 5px;" alt="guzzle-logo" src="/assets/wp-content/uploads/2013/02/guzzle-logo.png" width="91" height="103" /><a href="http://guzzlephp.org/" target="_blank"><strong>Guzzle</strong></a> es un  framework que no permite crear, con pocas líneas de código, un cliente capaz de consumir <a title="REST - Wikipedia" href="http://es.wikipedia.org/wiki/Representational_State_Transfer" target="_blank">servicios REST</a> como los de Twitter, GitHub o Facebook. Guzzle emplea la librería <a title="cURL para PHP" href="http://php.net/manual/es/book.curl.php" target="_blank"><strong>cURL</strong></a> para realizar las peticiones HTTP a los servicios y provee un <em>sencillo sistema de descripción de servicios</em> que documentan y detallan los métodos que podrá usar el cliente. Guzzle permite usar cualquier verbo del protocolo HTTP: GET, POST, DELETE... y dispone de mecanismos de <a title="Cache de respuestas HTTP de Guzzle" href="http://guzzlephp.org/guide/http/caching.html" target="_blank"><strong>caché de respuestas</strong></a> y de realización de<strong> <a href="http://guzzlephp.org/guide/batching.html" target="_blank">consultas en paralelo y batch</a></strong>.

<!--more-->

La facilidad de uso de Guzzle se ve en ejemplos como este en el que se escribe un pequeño cliente para Twitter:
<pre class="prettyprint">// Endpoint de la API de Twitter
$client = new Client('https://api.twitter.com/{version}', array(
    'version' =&gt; '1.1'
));

// Usamos el protocolo oAuth para firmar las peticiones mediante OauthPlugin con
// los datos que nos proporciona Twitter
$client-&gt;addSubscriber(new Guzzle\Plugin\Oauth\OauthPlugin(array(
    'consumer_key'    =&gt; 'tu consumer_key',
    'consumer_secret' =&gt; 'tu consumer_secret',
    'token'           =&gt; 'tu token',
    'token_secret'    =&gt; 'tu token_secret'
)));

// Devolvemos los últimos twits del usuario (<a title="Método statuses/user_timeline de la API de Twitter" href="https://dev.twitter.com/docs/api/1/get/statuses/user_timeline" target="_blank">Doc API Twitter</a>)
echo $client-&gt;get('statuses/user_timeline.json')-&gt;send()-&gt;getBody();</pre>
La descripción de los servicios es un punto muy importante de esta librería ya que de una sola vez, documentamos y establecemos los tipos de datos que conforma el resultado de cada método. Los servicios se pueden describir mediante arrays PHP o usando JSON. Recomiendo esta última ya que me parece más legible.
<pre class="prettyprint">{
    "name": "API ejemplo",
    "apiVersion": "2013-02-05",
    "baseUrl": "http://api.ejemplo.es",
    "description": "Descripción de la API",
    "operations": {
        "GetUsers": {
            "httpMethod": "GET",
            "uri": "/users",
            "summary": "Obtiene la lista de usuarios",
            "responseClass": "GetUsersOutput"
        },

    },
    "models": {
        "GetUsersOutput": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "name": {
                        "location": "json",
                        "type": "string"
                    },
                    "age": {
                        "location": "json",
                        "type": "integer"
                    }
                }
            }
        }
    }
}</pre>
Cómo ves el JSON es bastante descriptivo y a cada método le indicamos el modelo de datos que esperamos como respuesta mediante el atributo <em>models</em>. Tras esto solo queda asociarla a nuestro cliente y estaremos en disposición de consumir sus métodos:
<pre class="prettyprint">use Guzzle\Service\Description\ServiceDescription;

$description = ServiceDescription::factory('/path/to/descripcion-servicio.json');
$client-&gt;setDescription($description);</pre>
&nbsp;

Código fuente: <strong><a title="Código fuente GuzzlePHP - Github" href="https://github.com/guzzle/guzzle" target="_blank">Github</a></strong>.]]></description>
                <link>/guzzle-framework-para-construir-clientes-de-servicios-rest</link>
                <pubDate>Tue, 05 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/guzzle-framework-para-construir-clientes-de-servicios-rest</guid>
                                <category>api</category>
                                <category>guzzlephp</category>
                                <category>rest</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>PHP: Escalabilidad y rendimiento</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" />Escalabilidad y rendimiento son dos magnitudes que mantienen una estrecha relación y que, en general, determinan la capacidad de respuesta de una aplicación web. En este artículo describo varias opciones y configuraciones para que nuestras aplicaciones web respondan en tiempo y sean capaces de hacer frente a un crecimiento del número de accesos. No se trata de pensar en escalabilidad y rendimiento desde el minuto cero de nuestro proyecto; Es más bien, tener en mente los pasos posibles  y realizar una codificación que nos facilite estos pasos en el futuro.
<h3>¿Qué es la escalabilidad y el rendimiento?</h3>
El <strong>rendimiento determinan el tiempo de entrega de los resultados de una petición</strong>, es decir, como de rápido eres capaz de servir los datos. Imagina que el tiempo medio empleado en cada petición hacia tu web necesita 400 milisegundos. Una mejora de rendimiento sería bajar esa media a 300 milisegundos.

La <strong>escalabilidad es la capacidad de tu aplicación web de crecer acorde con el crecimiento del número de usuarios</strong> que acceden a ella. Escalabilidad y rendimiento están relacionados. A medida que aumentas el rendimiento de una aplicación requiere menos recursos para escalar.

<!--more-->

&nbsp;
<h3>Optimización de PHP</h3>
PHP es un lenguaje interpretado que, en cada petición web, compila y convierte a <em>opcodes</em> nuestros script. Dicha transformación emplea un tiempo que puede llegar a ser considerable en situaciones de alto tráfico. Existen unas aplicaciones llamadas <em>opcodes cache</em> que se sitúan entre el servidor web y PHP y que almacenan los <em>opcodes</em> generados la primera vez que se realiza una petición de manera que las siguientes no es necesario realizar la compilación.

Existen numerosas <em>opcodes cache</em> como <a href="http://www.iis.net/downloads/microsoft/wincache-extension" target="_blank">Wincache para IIS</a> o <a title="APC para PHP" href="http://pecl.php.net/package/APC" target="_blank">APC</a> que es una de las más usadas.

No solo se deberían de cachear los opcodes de PHP. También es muy recomendable cachear el contenido HTML. Existen muchas páginas generadas dinámicamente cuyo contenido permanece invariable durante largos periodos de tiempo. Es una pérdida de recursos generarlas en cada petición por lo que se hace necesario almacenar el HTML resultante en disco y servidor directamente si no ha sufrido cambio alguno. Los <em>framework</em> más populares como <a title="Symfony framework" href="http://symfony.com/" target="_blank">Symfony</a> o <a title="Zend framework" href="http://framework.zend.com/" target="_blank">Zend</a> ya incluyen este tipo de mecanismos. Si no usas ningún <em>framework</em> que soporte caché de contenido, puedes crearte tu propio mecanismo de caché HTML:
<pre class="prettyprint">// /var/www/app/utils/cache.php
$timeout = 3600; // Una hora de duración
$file = '/var/www/tmp/cache/' . md5($_SERVER['REQUEST_URI']);

if (file_exists($file) &amp;&amp; (filemtime($file) + $timeout) &gt; time()) {
    readfile($file); // Devuelve el contenido cacheado
    exit();
} else {
    // Ejecutamos el contenido
    ob_start();
    register_shutdown_function(function () use ($file) {
        $content = ob_get_flush();
        file_put_contents($file, $content);
    });
}</pre>
<h3>Balanceadores de carga</h3>
El balanceador es una pieza importante cuando nuestra aplicación web alcanza un tráfico elevado. Nos va a permitir repartir el tráfico entrante entre varios servidores. PHP permite el escalado horizontal de forma sencilla, simplemente añadiendo más servidores. Balanceadores de carga hay de muchos tipos, software y hardware. Nuestra elección dependerá del presupuesto e incluso del tipo de hosting elegido.

Los <strong>Balanceadores software</strong> son muy comunes pues no son más que una máquina corriendo en Linux, por ejemplo, a la que se le ha añadido software para gestionar la carga entre varias máquinas. Existe aplicaciones específicas, como <strong><a title="Balanceador de carga Perlbal" href="https://github.com/perlbal/Perlbal" target="_blank">Perlbal</a></strong>, para realizar las labores de un balanceador de carga pero la mayor parte de las ocasiones serán realizadas por servidores web como <a title="Servidor web Nginx" href="http://nginx.org/" target="_blank">Nginx</a>, <a title="Servidor web Apache" href="http://httpd.apache.org/" target="_blank">Apache</a> o <a href="http://www.squid-cache.org/" target="_blank">Squid</a>. Además de gestionar la carga de tráfico, todas estas aplicaciones suelen incorporar características adicionales como caché o compresión <em>GZIP</em> de los resultados.

Dentro de los balanceadores software, podríamos incluir a aquellos disponibles en <strong>hosting cloud</strong> como <a href="http://aws.amazon.com/es/ec2/" target="_blank">Amazon EC2</a> que permite repartir la carga entre varias instancias.

La otra gran categoría son los <strong>balanceadores hardware</strong>, máquinas con software y hardware diseñados específicamente para realizar esta tarea como <a href="http://www.citrix.com/products/netscaler-application-delivery-controller/overview.html" target="_blank">Citrix NetScaler</a> o <a href="http://www.f5.com/products/big-ip/" target="_blank">F5 Big-IP</a>. Además de su tarea principal, suelen actuar como barrera de seguridad o cortafuegos hacia nuestra red interna.

Independientemente del tipo de balanceador de carga elegido, existe varios <strong><a title="Balance de carga - Wikipedia" href="http://es.wikipedia.org/wiki/Balance_de_carga" target="_blank">algoritmos para repartir la carga</a></strong>, desde los más simples, que reparte de forma aleatoria, hasta los que tienen en cuenta variables de estado de cada máquina para asignarles el tráfico.

El uso de balanceadores de carga requiere tener en mente algunos consejos que pueden influir en el diseño del código de nuestra aplicación:
<ul>
	<li><span style="line-height: 13px;"><strong>Si usamos algún tipo de caché</strong>, como APC, debemos escribir nuestro código asumiendo que tendremos más de una caché, habrá tantas como nodos tengamos soportando carga.</span></li>
	<li><strong>La información sobre sesiones</strong> o <em>cookies</em> <strong>se suelen almacenar en archivos</strong> por lo que es una mala opción si se emplean balanceadores de carga. Debemos buscar una alternativa, como almacenarlas en base de datos.</li>
	<li>Al hilo del problema anterior, si almacenamos recursos como avatares o fotos subidas por los usuarios, debemos pensar en centralizar los recursos.</li>
</ul>
Aunque al principio nos baste solo con una máquina para soportar todo el tráfico, a medida que vamos codificando nuestro proyecto debemos hacerlo teniendo estas ideas en mente de forma que futuros cambios sean sencillos de hacer.
<h3>MySql</h3>
La base de datos es el siguiente <em>cuello de botella</em>. Aunque en el rendimiento de este factor no solo depende de la configuración de los servidores sino también del diseño de nuestras bases de datos: índices, tablas... etc. En este artículo me centraré en MySql por ser uno de los gestores de bases de datos más empleados en el mundo.
<h4>Configuración maestro-esclavo</h4>
<p style="text-align: left;">MySql permite activar la configuración maestro-esclavo en la que todos los cambios (<em>insert, update, delete</em>) realizados sobre el maestro, se propagan automáticamente al esclavo. Esto supone varios beneficios como repartir la carga ya que esclavos pueden ser varios. Ahora, todas las consultas que realice nuestra aplicación deben quedar separadas en aquellas que realizan solo consulta (<em>select</em>) de las que realizan modificación de datos (<em>insert, update o delete</em>). Todas las consultas que no implique alterar datos se deben dirigir hacia el esclavo mientras que las restantes se realizan sobre el maestro:<a href="/assets/wp-content/uploads/2013/02/mysql-maestro-esclavo.png"><img class=" wp-image-99 aligncenter" alt="mysql-maestro-esclavo" src="http://yosymfony.com/wp-content/uploads/2013/02/mysql-maestro-esclavo-300x226.png" width="240" height="181" /></a></p>
Este tipo de configuración presenta un inconveniente y es que <strong>la propagación de los datos del maestro al esclavo necesita un tiempo</strong> que puede ir desde los milisegundos hasta segundos, dependiendo de la carga. Debes evitar realizar operaciones de modificación de datos e inmediatamente realizar una <em>select</em> porque puede que obtengas información errónea. Si es muy crucial obtener el dato real, podríamos realizar la select sobre el maestro pero en general, es una mala práctica.
<h4>Múltiples esclavos</h4>
Si llegamos a este punto hemos de felicitarnos pues nuestras aplicación ha triunfado. Ahora tenemos tantas peticiones que necesitamos añadir más esclavos para mejorar los tiempos de respuesta. En la arquitectura anterior, solo existía un esclavo al que realizar peticiones pero ahora, ¿a qué esclavo accedemos? Una solución sencilla consiste en asignar un esclavo a cada servidor web:
<p style="text-align: center;"><a href="/assets/wp-content/uploads/2013/02/maestro-multiples-esclavos.png"><img class="size-medium wp-image-100 aligncenter" alt="maestro-multiples-esclavos" src="http://yosymfony.com/wp-content/uploads/2013/02/maestro-multiples-esclavos-179x300.png" width="179" height="300" /></a></p>
Ahora, cada servidor web tiene configurado su esclavo.

Existe una configuración adicional en la que en cada servidor web se instala un esclavo MySql. En general, es un configuración que no me gusta debido a que estás uniendo las necesidades del servidor web con las del servidor de base de datos. Una aplicación web puede hacer uso intesivo de datos y necesitar agregar cinco servidores MySql sin necesidad de aumentar los servidores web.
<h4>Configuración maestro-esclavo en Symfony2</h4>
Doctrine 2.1 soporta la configuración maestro-esclavo y desde <a title="Configuración Doctrine para maestro-esclavo en Symfony2" href="http://symfony.com/doc/master/reference/configuration/doctrine.html" target="_blank">Symfony2</a> se puede usar.]]></description>
                <link>/php-escalabilidad-y-rendimiento</link>
                <pubDate>Mon, 04 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/php-escalabilidad-y-rendimiento</guid>
                                <category>escalabilidad</category>
                                <category>mysql</category>
                                <category>rendimiento</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Symfony Live: Tour 2013</title>
                <description><![CDATA[<img class="alignnone  wp-image-91" alt="Symfony-live" src="/assets/wp-content/uploads/2013/02/symfony-live.png" width="133" height="121" /><strong>Symfony Live</strong>, la conferencia oficial de Symfony, anuncia su agenda para 2013, que incluye <strong>SymfonyCon</strong> en Europa. La agenda comienza en Miami, en la <strong><a title="SunShinePHP Conference" href="http://sunshinephp.com/" target="_blank">SunShinePHP</a></strong> el 8 y 9 de Febrero. En ella tendrás talleres Symfony  donde aprender <a title="Contenido del Symfony Workshop en la SunShinePHP Conference [eng]" href="http://trainings.sensiolabs.com/en/training/advanced-symfony2" target="_blank"><strong>temas avanzados de Symfony2 de forma práctica</strong></a>. Se realizarán el día 7. Además, durante todo  el evento, podrás realizar el examen de certificación de Symfony2, 75 preguntas y 90 minutos para demostrar tus conocimientos sobre el <em>framework</em>.

<!--more-->

&nbsp;

Sin salir del continente americano, la <strong><a title="Symfony Live USA 2013" href="http://portland2013.live.symfony.com/registration/" target="_blank">Symfony Live USA</a></strong> se celebrará este año en Portland del 20 al 24 de Mayo coincidiendo por primera vez con la <a title="DrupalCon 2013" href="http://portland2013.drupal.org/" target="_blank">DrupalCon</a> y la <a href="http://www.webvisionsevent.com/" target="_blank">WebVision</a>. Y es que la <a title="Drupal 8 integrará componentes de Symfony2" href="http://www.symfony.es/noticias/2011/10/26/drupal-8-integra-los-primeros-componentes-de-symfony2/" target="_blank">relación Symfony-Drupal no se estrecha solo en código</a>. Será un gran acontecimiento con tres días de talleres, dos de conferencias y acceso al examen de certificación de Symfony2.

En Europa, <strong>Symfony Live realizará eventos en <a title="Symfony Live 2013 París [fr]" href="http://paris2013.live.symfony.com/" target="_blank">París</a></strong>, Reino Unido y Alemania. Por el momento, solo hay información del evento en París que se realizará del 2 al 6 de Abril.]]></description>
                <link>/symfony-live-tour-2013</link>
                <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/symfony-live-tour-2013</guid>
                                <category>sunshinephp</category>
                                <category>symfony live</category>
                                <category>symfonycon</category>
                                                <category>Eventos</category>
                            </item>
                    <item>
                <title>Manual de Silex en español</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-85" alt="silex-logo" src="/assets/wp-content/uploads/2013/01/silex-logo.png" width="92" height="88" />Silex es un <em>microframework</em> desarrollado por <a href="http://sensiolabs.com/" target="_blank">Sensio Labs</a>, los creadores de Symfony, destinado a la pequeña y mediana aplicación. Aunque Symfony es uno de los mejores <em>web framework</em> para desarrollar grandes aplicaciones de forma ágil y siguiendo buenas prácticas, no parece muy lógico emplearlo en pequeños proyecto que apenas usan base de datos. El concepto sobre el que pivota Silex es el de microframework, es decir, que nuestra solución se encuentre entera contenida en un solo archivo:
<pre class="prettyprint">// index.php

require_once __DIR__.'/../vendor/autoload.php';

$app = new Silex\Application();

$app-&gt;get('/usuario/{name}', function ($name) use ($app) {
    return 'Bienvenido '.$app-&gt;escape($name);
});

$app-&gt;run();</pre>
<!--more-->

Este es un ejemplo sencillo que contiene definida una ruta y la acción asociada a ella. Para probarlo, basta con acceder a /usuario/yoSymfony y verás que responde "Bienvenido yoSymfony". Por supuesto, requiere tener <a href="http://www.symfony.es/noticias/2013/01/30/silex-desarrollo-web-%C3%A1gil-y-profesional-con-php/" target="_blank"><strong>Silex</strong> instalado</a> tal como explica Javier Eguiluz.

<strong>Silex</strong> tiene soporte para realizar pruebas funcionales mediante el módulo <a title="Módulo httpkernel de Symfony2" href="https://github.com/symfony/HttpKernel" target="_blank"><em>HttpKernel</em></a> de Symfony2 que incluye.

Gracias a <a title="Manual de Silex microframework en español" href="http://librosweb.es/silex/" target="_blank"><strong>Librosweb.es</strong></a> disponemos del manual oficial traducido al español. Publicación que se une a su ya extensa lista.

&nbsp;

<a href="http://librosweb.es/silex/" target="_blank">Manual de Silex en español</a>.]]></description>
                <link>/manual-de-silex-en-espanol</link>
                <pubDate>Wed, 30 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/manual-de-silex-en-espanol</guid>
                                <category>libros</category>
                                <category>micro-framework</category>
                                <category>silex</category>
                                                <category>PHP</category>
                                <category>Symfony</category>
                            </item>
                    <item>
                <title>Disponible CakePHP 2.3.0</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-81" alt="CakePHP-logo" src="/assets/wp-content/uploads/2013/01/cakephp-logo.png" width="93" height="87" />Ya está disponible la última versión de <a title="Descargar CakePHP" href="https://github.com/cakephp/cakephp/tags" target="_blank"><strong>CakePHP, 2.3.0</strong></a> y la sexta revisión de la rama 2.2. Para el que no conozca CakePHP, decir que es un framework que permite el desarrollo ágil de aplicaciones web en PHP. Desde el blog de la aplicación se asegura que la 2.3.0 es totalmente compatible con la anterior 2.5 aunque, antes de aventurarte a actualizar, es recomendable leer la <a title="Guía de migración a CakePHP 2.3.0 [eng]" href="http://book.cakephp.org/2.0/en/appendices/2-3-migration-guide.html" target="_blank">guía de migración hacia la nueva versión</a>.

Respecto a las novedades de la nueva versión, el componete <a title="Documentación del componente [eng]" href="http://api.cakephp.org/class/auth-component" target="_blank"><em>AuthComponent</em></a> ha mejorado los mecanismos de autenticación <em>stateless</em>, es decir, aquellos que no emplean mecanismos tales como las <em>cookies</em>. Ahora responde con un código de error en lugar de realizar una redirección. Además se ha añadido soporte al algoritmo <em><a title="Algoritmo Bcrypt [eng] - Wikipedia" href="http://en.wikipedia.org/wiki/Bcrypt" target="_blank">BCrypt</a></em> para cifrar las claves de los usuarios.

El paginador de resultados ha cambiado y con la versión 2.3.0 se genera una excepció <em>NotFoundException</em> si el número de página solicitado se sale de rango.

Otros cambios destacados han sido el soporte a <em><a title="Transport Layer Security - Wikipedia" href="http://es.wikipedia.org/wiki/Transport_Layer_Security" target="_blank">TLS</a></em> en <a title="Documentación del componente [eng]" href="http://api.cakephp.org/class/http-socket" target="_blank"><em>CakeSocket</em></a> por lo que se permite el envío de email seguros usando <em>SMTP</em> con <em>TLS</em>.

Por el momento CakePHP 2.3.0 puede correr en PHP 5.2, pero, como dicen ellos, te perderás futuras funcionalidades.

&nbsp;

Lista de <a href="http://bakery.cakephp.org/articles/lorenzo/2013/01/28/cakephp_2_3_0_is_out" target="_blank">novedades de CakePHP 2.3.0 + revisiones de 2.2.6</a>
<strong>Via</strong>: <a href="http://bakery.cakephp.org/" target="_blank">Blog CakePHP</a>]]></description>
                <link>/disponible-cakephp-2-3-0</link>
                <pubDate>Tue, 29 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/disponible-cakephp-2-3-0</guid>
                                <category>cakephp</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Confoo Conferencen 2013</title>
                <description><![CDATA[<img style="margin: 10px;" alt="confoo-conference" src="/assets/wp-content/uploads/2013/01/confoo-conference.jpg" width="96" height="96" />Del 25 de Febrero al 1 de Marzo se celebra la <a title="Web de Confoo Conference - eng" href="http://confoo.ca/" target="_blank"><strong>Confoo Conference</strong></a> en Montreal, Canadá. Se trata de uno de los eventos más importantes no solo de PHP sino también lenguajes como Ruby, Python, y .NET donde descubrirás nuevas herramientas y conocerás a gente muy interesante de grandes empresas de todo el mundo. Para esta edición se esperan más de 750 asistentes y se harán más de 160 presentaciones y entre ellas se hablará sobre Symfony en cuatro sesiones impartidas por <a href="http://confoo.ca/en/speaker/hugo-hamon">Hugo Hamon</a>:
<ul>
	<li><a href="http://confoo.ca/en/2013/session/practical-symfony2">Practical Symfony2 (part 1)</a></li>
	<li><a href="http://confoo.ca/en/2013/session/practical-symfony2">Practical Symfony2 (part 2)</a></li>
	<li><a href="http://confoo.ca/en/2013/session/bringing-symfony-components-in-your-legacy-code">Bringing Symfony Components in your Legacy Code</a></li>
	<li><a href="http://confoo.ca/en/2013/session/leveraging-forms-validation-with-symfony">Leveraging Forms &amp; Validation with Symfony</a></li>
</ul>
<!--more-->

Dos días  previos al evento se realizará un <em>hackaton</em> en el que tendrás oportunidad de conocer de forma práctica Symfony2, y aprenderás sobre temas de seguridad en la web y Javascript.

Confoo Conference vista por sus participantes:

<iframe src="http://www.youtube.com/embed/86VcHcaurRQ" height="315" width="560" allowfullscreen="" frameborder="0"></iframe>

&nbsp;

<strong>Web</strong>: <a href="http://confoo.ca/" target="_blank">confoo.ca</a>
<strong>Lugar</strong>: <a href="http://confoo.ca/en/venue" target="_blank">Hilton Bonaventure - Montreal, Canadá</a> | Venta de tickets <a href="http://confoo.ca/en" target="_blank">online</a>.]]></description>
                <link>/confoo-conferencen-2013</link>
                <pubDate>Mon, 28 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/confoo-conferencen-2013</guid>
                                <category>confoo conference</category>
                                                <category>Eventos</category>
                            </item>
                    <item>
                <title>Las novedades NetBeans 7.3 para Symfony y PHP</title>
                <description><![CDATA[<img class="alignnone size-full wp-image-74" alt="netbeans-logo" src="/assets/wp-content/uploads/2013/01/netbeans-logo.png" width="227" height="68" />Hoy ha visto la luz la <a title="NetBeans IDE 7.3 Release Candidate 1" href="http://netbeans.org/community/releases/73/" target="_blank">primera versión candidata a versión final de NetBeans 7.3</a> con interesantes novedades como el soporte para los <em>namepaces</em> en las anotaciones de Symfony2 y Doctrine. A continuación resalto algunas:
<h3>Twig</h3>
<a href="https://blogs.oracle.com/netbeansphp/entry/another_twig_improvements" target="_blank">Soporte a </a><strong><a href="https://blogs.oracle.com/netbeansphp/entry/another_twig_improvements" target="_blank"><em>code templates</em> de Twig</a>.</strong> Los <em>code templates</em> o <em>snippet</em> son porciones de código que funcionan a modo de plantilla al escribir sentencias.

<a href="https://blogs.oracle.com/netbeansphp/entry/twig_code_completion" target="_blank"><strong><em>Code completion</em> del código de la plantilla</strong></a> donde en todo momento te muestra sugerencias de la sentencia que tienes intención de teclear y la documentación asociada.

<strong>Sintaxis coloreada para las <a title="String Interpolation de Twig - eng" href="http://twig.sensiolabs.org/doc/templates.html#string-interpolation" target="_blank"><em>String Interpolation</em> de Twig 1.5</a></strong>. Las <em>String Interpalation</em> son un nuevo mecanismo que permite evaluar una expresión dentro de una cadena de texto: <code class="prettyprint">{ "texto #{expresión}" }</code>  al renderizar una plantilla. Ejemplo: <code class="prettyprint">{ "La suma es #{1 + 1}" unidades }</code>.

<!--more-->
<h3>Soporte a Composer</h3>
El nuevo NetBeans tiene <a href="https://blogs.oracle.com/netbeansphp/entry/composer_support" target="_blank">soporte para Composer</a>. Si no conoces <a title="Introducción a Composer - eng" href="http://getcomposer.org/doc/00-intro.md#introduction" target="_blank">Composer</a>, decirte que es un gestor de dependencias de PHP, es decir, una aplicación en la que tras crear el fichero <em>composer.json</em> y declaras las librerías o componentes necesitas es capaz de obtenerlas. Una vez configuradas las opciones de Composer en NetBeans estaremos listos para usarlo. NetBeans proporciona opciones para crear el <em>composer.json</em> inicial, actualizar y validar las dependencias.
<h3>Ambiguous Comparison Hint</h3>
Aunque esto es un cambio menor, no está demás mencionarlo. Bajo este nombre tan raro se encuentra un mecanismo que nos avisa sobre un posible error de asignación. Lo mejor será que lo explique con un ejemplo:
<pre class="prettyprint">class MiClase
{
    public function miFuncion()
    {
        $a == 10; // Ambiguous Comparison Hint nos indica de un posible error
    }
}</pre>
Cuando lo que realmente queríamos era esto:
<pre class="prettyprint">class MiClase
{
    public function miFuncion()
    {
        return $a == 10;
    }
}</pre>
<h3>Motor de plantillas Smarty</h3>
<a title="Motor de plantillas para PHP Smarty" href="http://www.smarty.net/" target="_blank">Smarty</a> es otro motor de plantillas al estilo Twig muy usado en el mundo PHP. Las novedades de NetBeans 7.3 incluyen el <a href="https://blogs.oracle.com/netbeansphp/entry/smarty_tags_pairing_and_matching" target="_blank">resaltado de etiquetas y la generación de mensajes de advertencia cuando no se cierran correctamente</a>. Además, como Twig, también incluye <em>code templates </em>y soporte para <a href="https://blogs.oracle.com/netbeansphp/entry/smarty_configurable_comments_and_code" target="_blank">dos formas de realizar comentarios en las plantillas</a>.]]></description>
                <link>/las-novedades-netbeans-7-3-para-symfony-y-php</link>
                <pubDate>Mon, 28 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/las-novedades-netbeans-7-3-para-symfony-y-php</guid>
                                <category>composer</category>
                                <category>netbeans</category>
                                <category>symfony2</category>
                                <category>twig</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Los servicios estándar de Symfony2</title>
                <description><![CDATA[<a href="/assets/wp-content/uploads/2013/01/symfony2-logo.png"><img class="alignnone size-full wp-image-62" alt="symfony2-logo" src="/assets/wp-content/uploads/2013/01/symfony2-logo.png" width="255" height="73" /></a>El <a title="Contenedor de servicios de Symfony2 - eng" href="http://symfony.com/doc/current/book/service_container.html"><em>Service Container</em> o <em><strong>contenedor de servicios</strong></em></a> es una pieza muy importante de Symfony2 que permite instanciar y organizar algunos objetos de nuestra aplicación en un lugar centralizado. Gracias al <a title="Inyector de dependencias de Symfony2" href="http://github.com/symfony/DependencyInjection" target="_blank"><em>Inyector de dependencias</em></a> es capaz de construir los objetos entregándoles, en el momento de la construcción, las clases de las que depende. Como resultado obtenemos una mayor reutilización de nuestro código y un mayor nivel de desacoplamiento entre nuestras clases.
<h3>¿Qué es un servicio?</h3>
Un servicio en Symfony2 no es más que una instancia de una clase, accesible de forma global, que se encarga de realizar una tarea determinada. Cuando en algún controlador de nuestra aplicación necesitamos enviar un correo, obtenemos el servicio <em>mailer</em> que provee todo lo necesario para administrar el envío de emails:
<pre class="prettyprint">class ControladorDeTuAplicacion extends Controller {
   public function holaAction() {
      $this-&gt;get('mailer'); // Obtiene el servicio de envío de email
   }
}</pre>
<!--more-->

Nuestra aplicación puede extender el <em>Service Container</em> con servicios propios. La forma más sencilla, si usas el formato <em>YML</em>, es crear una clase, que contendrá la lógica de nuestro servicio, y editar el fichero <em>services.yml</em> dentro de <em>/Resources/config</em> de nuestro bundle para darle un nombre al servicio e indicar las dependencias que presenta:
<pre class="prettyprint">namespace AcmeBundle\MiGestorDeCorreo;

//
// Gestor de envío de correos de mi proyecto
//
class MiGestorDeCorreo
{
    private $mailer;

    public function __construct($mailer)
    {
        $this-&gt;mailer = $mailer; // Gestor de correo de Symfony2
    }

    public function eviarCorreoDeBienvenida()
    {
        // ...
    }
}</pre>
Ahora solo queda registrar la clase en el fichero services.yml de alguno de nuestros bundles, normalmente, en aquel con el que presenta más afinidad:
<pre class="prettyprint">services:
    acme.gestorCorreo:
        class: AcmeBundle\MiGestorDeCorreo # Namespace completo a nuestra clase
        arguments: [@mailer] # dependencia1, dependencia2,... dependenciaN</pre>
Como argumentos puedes pasar otros servicios (se emplea la '@'), constantes, y variables declaradas en el <em>services.yml</em>.

Ahora, gracias al nombre que hemos dado al servicio podemos obtener una instancia de nuestro gestor de correo desde cualquier controlador de forma sencilla:

<code class="prettyprint">$this-&gt;get('acme.gestorCorreo')</code>
<h3>Lista de servicios estándar</h3>
Existe una extensa lista de servicios que forma parte Symfony2  y que se pueden obtener mediante la consola de Symfony:

<code class="prettyprint">$ php app/console container:debug</code>

De ellos, los más usados suelen ser los siguientes:
<ul>
	<li><span style="line-height: 13px;"><strong>request</strong>: Representa la petición en curso.</span></li>
	<li><strong>mailer</strong>: Utilidades relacionadas con el envío de correos. Es un <em>wrapper</em> del componente<em><a href="http://swiftmailer.org/" target="_blank"> Swift Mailer</a>.</em></li>
	<li><strong>doctrine</strong>: Doctrine es el <em><a title="¿Qué es un ORM? - Wikipedia" href="http://es.wikipedia.org/wiki/Mapeo_objeto-relacional" target="_blank">ORM</a></em> por defecto de Symfony2 y se encarga de la persistencia de datos. Mediante este servicio se puede obtener en <em>Entity Manager</em>.</li>
	<li><strong>twig</strong>: Motor de plantillas</li>
	<li><strong>security.context</strong>: Información de la sesión de usuario: token, roles, autenticación...</li>
</ul>]]></description>
                <link>/los-servicios-estandar-de-symfony2</link>
                <pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/los-servicios-estandar-de-symfony2</guid>
                                <category>inyección de dependencias</category>
                                <category>symfony2</category>
                                                <category>Symfony</category>
                            </item>
                    <item>
                <title>El servidor web incluido en PHP 5.4</title>
                <description><![CDATA[<a href="/assets/wp-content/uploads/2013/01/php-logo.png"><img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" /></a>Entre las muchas mejoras que introdujo <strong>PHP 5.4</strong>, una de ellas fue la inclusión de serie de un servidor web embebido al estilo <em><a title="Python SimpleHttpServer - eng" href="http://docs.python.org/2/library/simplehttpserver.html" target="_blank">Python built in server</a></em>. <strong>La intención es permitir realizar pruebas de nuestros proyectos y no es apto para entornos de producción</strong>. El servidor resuelve las peticiones de forma secuencial y es posible indicar el <em>root document</em> o directorio de trabajo. Además, también podemos proporcionar un script que hará de enrutador para las peticiones.

La forma más sencilla de iniciar el servidor es la siguiente <span class="muted">(desde la consola)</span>:

<code class="prettyprint">$ php -S localhost:8000</code>

<!--more-->El comando anterior levanta el servidor en el puerto 8000 y toma como <em>root document</em> el directorio actual:
<pre class="prettyprint">PHP 5.4.11 Servidor de desarrollo iniciado en Domingo Enero 27 12:27:01 2013
Escuchando en localhost:8000
La raíz de documentos es /var/www-interno
Presione Ctrl-C para salir</pre>
Si queremos usar otro directorio de trabajo debemos añadir la opción <em>-t</em>:

<code class="prettyprint">$ php -S localhost:8000 -t /home/yosymfony/html-publico</code>

El servidor es capaz de devolver el <a title="MIME type - Wikipedia" href="http://es.wikipedia.org/wiki/Multipurpose_Internet_Mail_Extensions" target="_blank"><em>MIME type</em> </a>adecuado para los siguientes recursos: .css, .gif, .htm, .html, .jpe, .jpeg, .jpg, .js, .png, .svg, y .txt. <strong>Desde la versión 5.4.4 en adelante también soporta .htm y .svg</strong>. Si quisieramos agregar un nuevo tipo no soportado, usaríamos un script enrutador que se lanza con cada petición:
<pre class="prettyprint">// router.php
$path = pathinfo($_SERVER["SCRIPT_FILENAME"]);
if ($path["extension"] == "ogg") {
    header("Content-Type: video/ogg");
    readfile($_SERVER["SCRIPT_FILENAME"]); // Se devuelve el contenido del fichero
}
else {
    return FALSE; // Continúa resolviéndose la petición
}</pre>
Y ahora solo queda levantar el servidor con los nuevos parámetros:

<code class="prettyprint">$ php -S localhost:8000 -t /home/yosymfony/html-publico router.php</code>

&nbsp;

<strong>Más información</strong>: <a title="Documentación de PHP" href="http://php.net/manual/es/features.commandline.webserver.php" target="_blank">Servidor web embebido en PHP</a>]]></description>
                <link>/el-servidor-web-incluido-en-php-5-4</link>
                <pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/el-servidor-web-incluido-en-php-5-4</guid>
                                <category>servidor web embebido</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>Nuevas versiones PHP 5.4.11 y PHP 5.3.21</title>
                <description><![CDATA[<a href="/assets/wp-content/uploads/2013/01/php-logo.png"><img class="alignnone size-full wp-image-51" alt="php-logo" src="/assets/wp-content/uploads/2013/01/php-logo.png" width="123" height="74" /></a>El pasado día 17, el equipo de PHP lanzó una <a title="Historial de cambios de PHP 5.4.11 y 5.3.21" href="http://php.net/ChangeLog-5.php" target="_blank"><strong>actualización de las ramas 5.3 y 5.4</strong></a> en la que se corrigen 10 bug. Las correcciones de la 5.3 se refieren sobre todo a la extensión <a title="Manual de cURL en PHP" href="http://php.net/manual/es/book.curl.php" target="_blank">cURL</a>. La rama 5.4 recibe correcciones en la función <em><a href="https://bugs.php.net/bug.php?id=63737" target="_blank">json_decode()</a></em> y en la gestión de memoria relacionada con <a title="Función getenv de PHP - eng" href="http://php.net/manual/en/function.getenv.php" target="_blank">getenv()</a>.

Es muy recomendable actualizar cualquier versión anterior de PHP a la rama 5.4.

<strong>Historial de cambios</strong>: <a title="Historial de cambios de PHP 5 - eng" href="http://php.net/ChangeLog-5.php" target="_blank">PHP 5</a>

<strong>Descargar</strong>: <a href="http://php.net/downloads.php" target="_blank">PHP</a>]]></description>
                <link>/nuevas-versiones-php-5-4-11-y-php-5-3-21</link>
                <pubDate>Sun, 27 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/nuevas-versiones-php-5-4-11-y-php-5-3-21</guid>
                                <category>php 5.3</category>
                                <category>php 5.4</category>
                                                <category>PHP</category>
                            </item>
                    <item>
                <title>deSymfony 2013 abre el periodo de inscripción para ponentes</title>
                <description><![CDATA[<a href="/assets/wp-content/uploads/2013/01/desymfony.png"><img class="alignnone size-full wp-image-41" alt="desymfony" src="/assets/wp-content/uploads/2013/01/desymfony.png" width="273" height="76" /></a>El <strong>evento Symfony más importante de habla en español</strong> abre su periodo de <a title="Call for Paper - deSymfony 2013" href="http://desymfony.com/call-for-papers-desymfony-2013.pdf" target="_blank"><em>call for paper</em> en el que puedes inscribirte como ponente</a>. <strong>El evento tendrá lugar en Madrid, el próximo Junio</strong> y hasta el 15 de Marzo tienes de plazo para enviar los temas sobre los que te gustaría hablar (es recomendable enviar más de una propuesta). Las ponencias serán de 45 minutos y tratarán temas relacionados con Symfony y su entorno: motor de plantillas Twig, Doctrine, CMF, integración contínua o incluso Drupal, que mantiene una <a title="Artículo en Symfony.es de Javier Eguiluz" href="http://www.symfony.es/noticias/2012/03/26/el-futuro-de-drupal-se-llama-symfony/" target="_blank">estrecha relación con el framework</a>.

Participar en un evento de la envergadura de deSymfony conlleva grandes ventajas: Más de 300 asistentes, supone mucha visibilidad a empresas y usuarios, las ponencias se graban en vídeo y se exponen en la web de deSymfony. Puedes echar un vistazo a los <a title="Vídeos deSymfony 2012 - YouTube" href="http://www.youtube.com/user/desymfony" target="_blank">vídeos de la pasada edición 2012</a>. Desde <strong>YoSymfony</strong> seguiremos informando.

&nbsp;

<strong>Web del evento</strong>: <a href="http://desymfony.com/" target="_blank">desymfony.com</a>

<strong>Ponencias anteriores</strong>: <a href="http://www.youtube.com/user/desymfony" target="_blank">Vídeos</a> | <a title="Presentaciones deSymfony 2012 - Slideshow" href="http://www.slideshare.net/search/slideshow?q=desymfony+2012" target="_blank">Presentaciones</a>

&nbsp;]]></description>
                <link>/desymfony-2013-abre-el-periodo-de-inscripcion-para-ponentes-2</link>
                <pubDate>Sat, 26 Jan 2013 00:00:00 +0000</pubDate>
                <guid isPermaLink="true">/desymfony-2013-abre-el-periodo-de-inscripcion-para-ponentes-2</guid>
                                <category>desymfony</category>
                                                <category>Eventos</category>
                            </item>
            </channel>
</rss>
